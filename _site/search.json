[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Bienvenue sur mon site :\nJe suis un jeune analyste qui “monte en compétence” sur R.\nMon diplôme universitaire Dataviz a relancé mon envie de codage et de traitement des données à travers de belles visualisations.\nAprès ces quelques mots, ci dessous, les différents travaux réalisés ou en cours…\nVous pouvez également me suivre sur ,  & .\n\n\n\nData Visualization\n\nStorytelling in ggplot using rounded rectangles\nRounded rectangles with {ggchicklet} can give your bar chart a different feel.\n\n\nHow to use Fonts and Icons in ggplot\nSpice up your visuals with different fonts and icons.\n\n\n\nStats/ML\n\nYet Again: R + Data Science\nCourse I taught at Ulm University. Inspired by the legendary R4DS, I take a tour through the data science workflow. Includes intro to {shiny} and {tidymodels}.\n\n\nStatistical Concepts (A Shiny App)\nInteractive webapp I built to teach a selection of statistical concepts. Will be extended once I master {golem}."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index2.html",
    "href": "index2.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Je suis un jeune analyste qui “monte en compétence” sur R.\nMon diplôme universitaire Dataviz a relancé mon envie de codage et de traitement des données à travers de belles visualisations.\nAprès ces quelques mots, ci dessous, les différents travaux réalisés ou en cours…\nVous pouvez également me suivre sur ,  & .\n\n\n\n\n\n\nRounded rectangles with {ggchicklet} can give your bar chart a different feel.\n\n\n\nSpice up your visuals with different fonts and icons.\n\n\n\n\n\n\nCourse I taught at Ulm University. Inspired by the legendary R4DS, I take a tour through the data science workflow. Includes intro to {shiny} and {tidymodels}.\n\n\n\nInteractive webapp I built to teach a selection of statistical concepts. Will be extended once I master {golem}."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Présentation, prise en main, en passant par le processus d’installation."
  },
  {
    "objectID": "blog.html#tous-les-documents",
    "href": "blog.html#tous-les-documents",
    "title": "Romuanalyst",
    "section": "Tous les documents :",
    "text": "Tous les documents :"
  },
  {
    "objectID": "posts/TP_manip_visu.html",
    "href": "posts/TP_manip_visu.html",
    "title": "TP manipulation et visualisation",
    "section": "",
    "text": "TP programmation statistique – R\nTous les codes utilisés dans les étapes suivantes, doivent être visibles dans votre rendu final. Les questions sont indépendantes, donc ne restez pas bloqué sur une question.\nPour la réalisation du TP, vous aurez besoin des packages suivants :\n\ndplyr\nggplot2\n\nUne fois les packages installés/chargés, vérifier que vous avez accès au dataset « starwars » (affichez le).\n\nAfficher les personnages qui ont joué dans le film : The Phantom Menace\nAfficher les 10 premières lignes de la table\nCombien y a t’il de personnages dans chaque espèce\nDonner le nom des personnages de l’espèce Droid\nCalculer la taille moyenne et le poids moyen\nCréer une nouvelle table « starwars_reduit » avec les variables : name, height, mass, sex, species, birth_year\nCi dessous le code à copier pour créér une nouvelle table « genre » :\n\n\n\ngenre <- data.frame(sex = c(\"male\", \"none\", \"female\", \"hermaphroditic\",\"NA\"), sex_2022 = c(\"Homme\", \"Non prononcé\", \"Femme\", \"Bisexué\",\"\"))\n\nFusionner/joindre les 2 tables « starwars_reduit » et « genre » \n\nFaire une moyenne par espèce de : height, mass, birth_year (utiliser le pipe)\nFaire un nuage de points entre le poids et la taille (avec un titre)\nFaire un histogramme par espèce\nAjouter un titre au graphique précedent, ainsi qu’un thème\nReprésenter chaque espèce sur un graphique"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "I’m a mathematics PhD student with a passion for R, data visualization, Shiny and statistics/machine learning. On this blog, I share and teach what I learn.\nTo get started, you can check out my most popular on content below. You can find me on  or  and .\n\n\n\n\n\n\nThe SWD is a great look for any visual. With ggplot you can recreate it.\n\n\n\nRounded rectangles with {ggchicklet} can give your bar chart a different feel.\n\n\n\nSpice up your visuals with different fonts and icons.\n\n\n\nAvoid plots that look like a gnome just puked a rainbow. Use colors effectively.\n\n\n\n\n\n\nCourse I taught at Ulm University. Inspired by the legendary R4DS, I take a tour through the data science workflow. Includes intro to {shiny} and {tidymodels}.\n\n\n\nBoth Poisson and logistic regression are GLMs. I explain the fundamentals.\n\n\n\nInteractive webapp I built to teach a selection of statistical concepts. Will be extended once I master {golem}.\n\n\n\n\n\n\nIf you’ve just gotten started with {shiny}, this is the post for you.\n\n\n\nNext step after the “6 simple Shiny things” post.\n\n\n\nFun app I built to ‘thin out pixels from an image’. The “about” page contains neat tricks for your Shiny learning path.\n\n\n\n\n\n\nThe {janitor} package contains great helper functions and can work magic with Excel files.\n\n\n\nYou don’t have to know much HTML or CSS to style your Quarto blog according to your wishes. This video shows you how.\n\n\n\nThis is a fun game I built to learn the street names in my city. Turned out to be a great Shiny learning experience.\n\n\n\n\n\n\nCurly-Curly and dot-dot-dot are EXTREMELY powerful concepts in R. Master them to be unstoppable.\n\n\n\nFunctional programming is great and powerful. A great motivation for learning them can come from ggplot.\n\n\n\n\n\n\nThis is an in-depth guide on how to start blogging with Quarto.\n\n\n\nI taught a intro to R course for business students. Here are things I wish I had known sooner.\n\n\n\nTidyTuesday is a great learning experience because so many people share their code."
  },
  {
    "objectID": "posts/index2.html",
    "href": "posts/index2.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Je suis un jeune analyste qui “monte en compétence” sur R.\nMon diplôme universitaire Dataviz a relancé mon envie de codage et de traitement des données à travers de belles visualisations.\nAprès ces quelques mots, ci dessous, les différents travaux réalisés ou en cours…\nVous pouvez également me suivre sur ,  & .\n\n\n\n\n\n\nRounded rectangles with {ggchicklet} can give your bar chart a different feel.\n\n\n\nSpice up your visuals with different fonts and icons.\n\n\n\n\n\n\nCourse I taught at Ulm University. Inspired by the legendary R4DS, I take a tour through the data science workflow. Includes intro to {shiny} and {tidymodels}.\n\n\n\nInteractive webapp I built to teach a selection of statistical concepts. Will be extended once I master {golem}."
  },
  {
    "objectID": "posts/blog.html",
    "href": "posts/blog.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Présentation, prise en main, en passant par le processus d’installation."
  },
  {
    "objectID": "posts/blog.html#tous-les-documents",
    "href": "posts/blog.html#tous-les-documents",
    "title": "Romuanalyst",
    "section": "Tous les documents :",
    "text": "Tous les documents :"
  },
  {
    "objectID": "test2.html",
    "href": "test2.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans qu’il soit besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple on peut à partir d’une ligne de commande écrire :\nprint('Hello world!')\n## [1] \"Hello world!\"\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage.\n\n\n\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\nTypiquement on tape le code dans l’éditeur et on l’exécute ensuite dans la console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison cmd Retour dans IOS et ctrl Retour sous Windows ou tout simplement à l’aide de la commande Run.\n\n\n\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") \n# On telecharge et installe le package dplyr utilisé dans la manipulation de données\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\nImportant : il est à noter que # sert à commenter les instructions."
  },
  {
    "objectID": "R et Posit.html",
    "href": "R et Posit.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans qu’il soit besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple on peut à partir d’une ligne de commande écrire :\nprint('Hello world!')\n## [1] \"Hello world!\"\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage.\n\n\n\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\nTypiquement on tape le code dans l’éditeur et on l’exécute ensuite dans la console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison cmd Retour dans IOS et ctrl Retour sous Windows ou tout simplement à l’aide de la commande Run.\n\n\n\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") \n# On telecharge et installe le package dplyr utilisé dans la manipulation de données\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\nImportant : il est à noter que # sert à commenter les instructions."
  },
  {
    "objectID": "index1.html",
    "href": "index1.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "I’m a mathematics PhD student with a passion for R, data visualization, Shiny and statistics/machine learning. On this blog, I share and teach what I learn.\nTo get started, you can check out my most popular on content below. You can find me on  or  and .\n\n\n\n\n\n\nThe SWD is a great look for any visual. With ggplot you can recreate it.\n\n\n\nRounded rectangles with {ggchicklet} can give your bar chart a different feel.\n\n\n\nSpice up your visuals with different fonts and icons.\n\n\n\nAvoid plots that look like a gnome just puked a rainbow. Use colors effectively.\n\n\n\n\n\n\nCourse I taught at Ulm University. Inspired by the legendary R4DS, I take a tour through the data science workflow. Includes intro to {shiny} and {tidymodels}.\n\n\n\nBoth Poisson and logistic regression are GLMs. I explain the fundamentals.\n\n\n\nInteractive webapp I built to teach a selection of statistical concepts. Will be extended once I master {golem}.\n\n\n\n\n\n\nIf you’ve just gotten started with {shiny}, this is the post for you.\n\n\n\nNext step after the “6 simple Shiny things” post.\n\n\n\nFun app I built to ‘thin out pixels from an image’. The “about” page contains neat tricks for your Shiny learning path.\n\n\n\n\n\n\nThe {janitor} package contains great helper functions and can work magic with Excel files.\n\n\n\nYou don’t have to know much HTML or CSS to style your Quarto blog according to your wishes. This video shows you how.\n\n\n\nThis is a fun game I built to learn the street names in my city. Turned out to be a great Shiny learning experience.\n\n\n\n\n\n\nCurly-Curly and dot-dot-dot are EXTREMELY powerful concepts in R. Master them to be unstoppable.\n\n\n\nFunctional programming is great and powerful. A great motivation for learning them can come from ggplot.\n\n\n\n\n\n\nThis is an in-depth guide on how to start blogging with Quarto.\n\n\n\nI taught a intro to R course for business students. Here are things I wish I had known sooner.\n\n\n\nTidyTuesday is a great learning experience because so many people share their code."
  },
  {
    "objectID": "R et Posit2.html",
    "href": "R et Posit2.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage.\n\n\n\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison ⌘⏎ dans IOS et Ctrl⏎ sous Windows ou tout simplement à l’aide de la commande Run.\n\n\n\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\nL’une des premières utilisation est la création d’objets1, qui seront mis en mémoire pour l’utilisation dans de futur fonctions ou codes. Un objet peut être créé en utilisant “l’assignation”. Il s’agit d’assigner à un objet (lettre, mot, …) une valeur à l’aide d’une flèche (<-) ou avec le signe =. Je préconise cependant d’utiliser l’assigantion par la “flèche”, cela permet d’avoir un code plus propre et de pouvoir différencier l’assignation et le code en lui même. Une fois l’objet créé nous pouvons afficher son contenu en tapant le nom de l’objet.1 Les objets sont en général des vecteurs, matrices, listes …, auxquels nous appliqueront des fonctions\nExemple :\n\n\nn <- (20 + 10)/5       # création de n et assignation du résultat de l'opération\n\nn                      # appel de l'objet n pour affichage de sa valeur\n\n[1] 6\n\n\n\n\n\n\n\nTip\n\n\n\nLe chiffre 1 entre crochets indique qu’il s’agit du premier élément d’une série de n valeurs. Dans l’exemple précedent, la série comprend 1 valeur. \n\n\nLe nom d’un objet doit obligatoirement commencer par une lettre. Il peut être suivi de chiffres, de points, d’espace soulignés (_). De plus, le langage R fait la distinction entre les majuscules et les minuscules : n et N pourront servir à nommer/créer 2 objets distincts.\n\n\n\n\n\n\nImportant\n\n\n\nSi l’objet existe déja, sa valeur précédente est éffacée. C’est un annule et remplace. \n\n\n\n\n\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") # avec guillemets!\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\n\n\n\n\n\n\nTip\n\n\n\nLe # sert à commenter les instructions. Le texte/code situé après # (sur la même ligne) ne sera pas éxécuté, ce sera juste un commentaire.\n\n\nAsides allow you to place content objet from the content it is placed in. Asides look like footnotes, but do not include the footnote mark (the superscript number). This is a span that has the class objet which places it in the margin without a footnote number."
  },
  {
    "objectID": "R et Posit2.html#quest-ce-que",
    "href": "R et Posit2.html#quest-ce-que",
    "title": "Romuanalyst",
    "section": "Qu’est-ce que  ?",
    "text": "Qu’est-ce que  ?\nLe logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\nprint('Hello world!')\n## [1] \"Hello world!\"\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage."
  },
  {
    "objectID": "R et Posit2.html#prise-en-main-de-r-studio",
    "href": "R et Posit2.html#prise-en-main-de-r-studio",
    "title": "Romuanalyst",
    "section": "Prise en main de R-studio",
    "text": "Prise en main de R-studio\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison cmd Entrer dans IOS et ctrl Entrer sous Windows ou tout simplement à l’aide de la commande Run."
  },
  {
    "objectID": "R et Posit2.html#laide-en-ligne",
    "href": "R et Posit2.html#laide-en-ligne",
    "title": "Romuanalyst",
    "section": "L’aide en ligne",
    "text": "L’aide en ligne\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!"
  },
  {
    "objectID": "R et Posit2.html#packages",
    "href": "R et Posit2.html#packages",
    "title": "Romuanalyst",
    "section": "Packages",
    "text": "Packages\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") \n# On telecharge et installe le package dplyr utilisé dans la manipulation de données\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\nImportant : il est à noter que # sert à commenter les instructions."
  },
  {
    "objectID": "R et Posit3.html",
    "href": "R et Posit3.html",
    "title": "Romuanalyst",
    "section": "",
    "text": "Le logiciel R est un langage dédié à la statistique. Il a été développé à partir des années 90 à l’University of Auckland, Nouvelle-Zélande. Son implémentation principale est en open source (gratuit et modifiable) R : cran.r-project.org.\nR est un langage interprété (comme Python) et non compilé, c’est-à-dire que les commandes tapées au clavier sont directement exécutées sans avoir besoin de construire un programme complet. On dit également qu’il est “exécuté à la volée”. Par exemple, on peut à partir d’une ligne de commande écrire :\n\nprint('Hello world!')\n\n[1] \"Hello world!\"\n\n\nPour simplifier son utilisation, il est possible d’écrire des scripts c’est à dire une suite de commandes qui se trouvent dans un fichier dont l’extension est .R mais on pourrait tout aussi bien les écrire dans un .txt.\nPour simplifier l’utilisation de R, il est nécessaire d’avoir une interface graphique (appelée aussi GUI pour Graphic User Interfaces). Celle offerte par R est très simpliste et beaucoup préfèrent utiliser RStudio (www.rstudio.com) à juste titre. Cet outil permet de réellement fluidifier le travail avec ce langage.\n\n\n\nLa fenêtre de RStudio se divise généralement en quatre sous-fenêtres: en partant de haut à gauche et en les parcourant dans le sens horaire on trouve :\n\nun éditeur de texte pour les scripts\nl’espace de travail ou d’historique de commandes\nle navigateur de fichiers, graphiques, packages, documentations\nla console R, c’est à dire la ligne de commande ainsi que les résultats des exécutions du code.\n\n\nTypiquement, on tape le code dans l’éditeur (1) puis on l’exécute. il se retrouve alors dans console. Pour cela on place le curseur dans la ligne qu’on veut exécuter et on envoie la commande à la console à l’aide de la combinaison cmd Entrer dans IOS et ctrl Entrer sous Windows ou tout simplement à l’aide de la commande Run.\n\n\n\nR dispose d’une documentation très complète et l’aide en ligne peut être très utile pour l’utilisation de fonctions, librairies et jeux de données. On peut accéder directement à l’aide en tapant ? suivi par la fonction (ou autre instruction, jeu de données,…) sur laquelle on souhaite se renseigner :\n?mean\naffichera par exemple la page d’aide pour la fonction mean(). La commande\nhelp(mean)\naura le même effet.\nOn peut aussi trouver énormément d’informations sur le web : par exemple en cherchant à l’aide d’un moteur de recherche un problème lié à une tâche R on trouve presque toujours une réponse (souvent dans des forum ouverts sur le site Cross Validated).\nLe but de cette introduction tutorielle est de vous apprendre l’utilisation élémentaire de R. Bien que les objets et commandes de bases y soient introduits, cette introduction n’est pas une référence complète au langage R (loin de là!), vous serez donc amenés à utiliser l’aide et à chercher des informations sur le web. A chaque étape, vous êtes encouragés à taper les commandes et à en comprendre le résultat : la meilleur façon d’apprendre un langage est d’écrire et débugger beaucoup de lignes de code!\n\n\n\nL’une des premières utilisation est la création d’objets1, qui seront mis en mémoire pour l’utilisation dans de futur fonctions ou codes. Un objet peut être créé en utilisant “l’assignation”. Il s’agit d’assigner à un objet (lettre, mot, …) une valeur à l’aide d’une flèche (<-) ou avec le signe =. Je préconise cependant d’utiliser l’assigantion par la “flèche”, cela permet d’avoir un code plus propre et de pouvoir différencier l’assignation et le code en lui même. Une fois l’objet créé nous pouvons afficher son contenu en tapant le nom de l’objet.\nExemple :\n\nn <- (20 + 10)/5       # création de n et assignation du résultat de l'opération\n\nn                      # appel de l'objet n pour affichage de sa valeur\n\n[1] 6\n\n\n\n\n\n\n\n\nTip\n\n\n\nLe chiffre 1 entre crochets indique qu’il s’agit du premier élément d’une série de n valeurs. Dans l’exemple précedent, la série comprend 1 valeur. \n\n\nLe nom d’un objet doit obligatoirement commencer par une lettre. Il peut être suivi de chiffres, de points, d’espace soulignés (_). De plus, le langage R fait la distinction entre les majuscules et les minuscules : n et N pourront servir à nommer/créer 2 objets distincts.\n\n\n\n\n\n\nImportant\n\n\n\nSi l’objet existe déja, sa valeur précédente est éffacée. C’est un annule et remplace. \n\n\n\n\n\nLes deux grands avantages de R est d’être gratuit et open source. De ce fait il jouit d’une communauté d’utilisateurs très active dans le monde scientifique (statistiques, science des données, bioinformatique, sciences sociales,…). Il est de plus très utilisé par la communauté scientifique et de plus en plus dans les entreprises.\nToute nouvelle méthode statistique a très rapidement une implémentation dans ce langage, ce qui n’est pas toujours le cas pour d’autres langages. Cela enrichi considérablement le logiciel et se fait à l’aide de ce qu’on appelle des paquets (ou packages ou library) Ces derniers sont développés par les utilisateurs et les développeurs. On peut les installer pour augmenter les capacités et possibilités du logiciel dans des domaines très variés de la statistique mais pas seulement en statistique. Il en existe un très grand nombre sur le site du CRAN : cran.r-project.org.\nPour installer un package:\ninstall.packages(\"dplyr\") # avec guillemets!\nUne fois un package installé, il faudra le charger en mémoire à chaque fois qu’une nouvelle session est ouverte:\nlibrary(dplyr) # sans guillemets!\nrequire(dplyr) # fonction équivalente\n\n\n\n\n\n\nTip\n\n\n\nLe # sert à commenter les instructions. Le texte/code situé après # (sur la même ligne) ne sera pas éxécuté, ce sera juste un commentaire."
  }
]