<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Albert Rapp</title>
<link>https://albert-rapp.de/blog.html</link>
<atom:link href="https://albert-rapp.de/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Albert Rapp's personal Blog.</description>
<generator>quarto-1.0.36</generator>
<lastBuildDate>Thu, 11 Aug 2022 22:00:00 GMT</lastBuildDate>
<item>
  <title>The ultimate beginner’s guide to generalized linear models (GLMs)</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/14_GLMs/14_GLMS.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>You may have never heard about generalized linear models (GLMs). But you’ve probably heard about logistic regression or Poisson regression. Both of them are special cases of GLMs.</p>
<p>There are even more special cases of GLMs. That’s because GLMs are versatile statistical models. And in this blog post we’re going to explore the mathematical foundations of these models. Actually, this post is based on one of my recent <a href="https://twitter.com/rappa753/status/1538156165535760384">Twitter threads</a>. You can think of this post as the long form version of that thread.</p>
<p>Here, I’ll add a few more details on the mathematical foundations of GLMs.<sup>1</sup> More importantly, though, I will show you how to implement GLMs with R. We’ll learn both the <code>{tidymodels}</code> and the <code>{stats}</code> way of doing GLMs. So without further ado, let’s go.</p>
<section id="logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="logistic-regression">Logistic regression</h2>
<p>Let’s start with logistic regression. Assume that you have the following data about penguins.</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 333 × 4
   sex    body_mass_g species bill_length_mm
   &lt;fct&gt;        &lt;int&gt; &lt;fct&gt;            &lt;dbl&gt;
 1 male          3750 Adelie            39.1
 2 female        3800 Adelie            39.5
 3 female        3250 Adelie            40.3
 4 female        3450 Adelie            36.7
 5 male          3650 Adelie            39.3
 6 female        3625 Adelie            38.9
 7 male          4675 Adelie            39.2
 8 female        3200 Adelie            41.1
 9 male          3800 Adelie            38.6
10 male          4400 Adelie            34.6
# … with 323 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<p>Imagine that your goal is to classify penguins as male or female based on the other variables <code>body_mass_g</code>, <code>species</code> and <code>bill_length_mm</code>. Better yet, let’s make this specific. Here’s a dataviz for this exact scenario.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_GLMS_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/14_GLMs/14_GLMS_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>As you can see, the male and female penguins form clusters that do not overlap too much. However, regular linear regression won’t help us to distinguish them. Think about it. Its output is something numerical. Here, we want to find classes.</p>
<p>So, how about trying to predict a related numerical quantity then? Like a probability that a penguin is male. Could we convert the classes to 0 and 1 and then run a linear regression? Well, we could. But this won’t give us probabilities either. Why? Because predictions are not restricted to <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D">.</p>
<p>But I suspect you’re REALLY determined to use linear regression. After all, what have you learned ordinary least squares (OLS) for if not for using it everywhere? So, what saves you from huge predictions? That’s the glorious logistic function (applied to linear regression’s predictions). It looks like this.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="fl" style="color: #AD0000;">0.1</span>), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">plogis</span>(x)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">color =</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">3</span>)[<span class="dv" style="color: #AD0000;">3</span>], <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;">theme_minimal</span>(<span class="at" style="color: #657422;">base_size =</span> <span class="dv" style="color: #AD0000;">14</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;">element_blank</span>())</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_GLMS_files/figure-html/unnamed-chunk-4-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/14_GLMs/14_GLMS_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>I’ve applied this strategy to our data to “predict” probabilities. Then, I used a 50% threshold for classification.</p>
<p>Note that I have chosen this threshold here only for demo purposes. In general, 50% is not a good threshold. That’s because there are many situations where you want your model to be <strong>really</strong> sure before it makes a classification. For example, with malignant tumor detection we want to use a threshold that is different from a coin flip. Clearly, we want to be sure that a tumor is dangerous before we undergo surgery.</p>
<p>So, back to our prediction strategy. Against all odds we’ve run a linear regression to “predict” probabilities and classified on this 50% threshold. Does this give us good results? Have a look for yourself.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Predicted probabilities</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Correct classifications?</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_GLMS_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/14_GLMs/14_GLMS_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_GLMS_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/14_GLMs/14_GLMS_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<p>The predictions for male and female penguins overlap quite a lot. This leads to many incorrect classifications. Not bueno. At this point, you may as well have trained a model that answers “Is this a male penguin?” with <a href="https://www.youtube.com/watch?v=LJP1DphOWPs">“Nope, just Chuck Testa”</a>.</p>
<p>So, our classification is bad. And hopefully I’ve convinced you that OLS isn’t the way to go here. But what now?</p>
<p>Well, it wasn’t all bad. The idea of linking a desired quantity (like a probability) to a linear predictor is actually what GLMs do. To make it work, let’s take a step back.</p>
<p>Usually, we model our response variable <img src="https://latex.codecogs.com/png.latex?Y"> by decomposing it into</p>
<ul>
<li>a deterministic function <img src="https://latex.codecogs.com/png.latex?f(X_1,...,%20X_n)"> dependent on predictors <img src="https://latex.codecogs.com/png.latex?X_1,%20%5Cldots,%20X_p">, <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20%5Cmathbb%7BN%7D">, plus</li>
<li>a random error term</li>
</ul>
<p>Thus, regression is nothing but finding a function describing the <strong>average</strong> outcome. With a little change in notation this becomes clearer:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AY_i%20&amp;=%20f(X_1,%20%5Cldots,%20X_p)%20+%20%5Cvarepsilon_i%20%5C%5C%5B2mm%5D%0A&amp;=%20%5Cmathbb%7BE%7D%5BY_i%20%7C%20X_1,%20%5Cldots,%20X_p%5D%20+%20%5Cvarepsilon_i,%20%5Cquad%20i%20=%201,%20%5Cldots,%20n%0A%5Cend%7Balign*%7D%0A"></p>
<p>In linear regression, this deterministic function is given by a linear predictor. We will denote this linear predictor by <img src="https://latex.codecogs.com/png.latex?%5Ceta_i(%5Cbeta)"> Note that it depends on a parameter <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bp%20+%201%7D">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_i(%5Cbeta)%20=%20%5Cbeta_0%20+%20x_%7Bi,%201%7D%5Cbeta_1%20+%20%5Ccdots%20+%20x_%7Bi,%20p%7D%20%5Cbeta_p%0A"></p>
<p>Alright, we’ve emphasized that we’re really trying to model an expectation. Now, think about what we’re trying to predict. We’re looking for probabilities, are we not?</p>
<p>And do we know a distribution whose expectation is a probability? Bingo! We’re thinking about Bernoulli. Therefore, let us assume that our response variable <img src="https://latex.codecogs.com/png.latex?Y"> is Bernoulli-distributed (given our predictors), i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?Y_i%20%7C%20X_1,%20%5Cldots,%20X_p%20%5Csim%20%5Ctext%7BBer%7D(%5Cpi_i)">.</p>
<p>And now we’re back with our idea to link the average outcome to a linear predictor via a suitable transformation (logistic function). This sets up our model. In formulas, this is written as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5BY_i%20%7C%20X_1,%20%5Cldots,%20X_p%5D%20=%20%5Cpi_i%20=%20h%5Cbig(%5Ceta_i(%5Cbeta)%5Cbig)%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ah(x)%20=%20%5Cfrac%7Be%5E%7B%5Ctext%7Bx%7D%7D%7D%7B1%20+%20e%5Ex%7D.%0A"></p>
<p>You’re thinking we’ve tried this already, aren’t you? How will we get different results? Isn’t this new setup just semantics? Theoretic background is useless in practice, right? (I’ve actually heard someone say that to a speaker at a scientific workshop. A shitshow ensued.)</p>
<p>Previously, we used the OLS estimator to find the linear predictor’s parameter <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. But with our new model setup comes a new way of estimating <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. Take a look. Compare the results of using the OLS estimator with what we get when we maximize the so-called likelihood.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Transforming OLS estimates</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Maximizing likelihood</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_GLMS_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/14_GLMs/14_GLMS_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_GLMS_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/14_GLMs/14_GLMS_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
<p>Much fewer incorrect results, right? And that’s despite having used the same 50% threshold once I predicted probabilites. This means that maximizing the likelihood delivers a way better estimator. Let’s see how that works.</p>
<p>The <strong>likelihood function</strong> <img src="https://latex.codecogs.com/png.latex?L"> is the product of the densities of the assumed distribution of Y given the predictors (here Bernoulli). This makes it the joint probability of the observed data. In formulas, this is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(%5Cbeta)%20:=%20%5Cprod_%7Bi%20=%201%7D%5En%20f(y_i%20%7C%20%5Cbeta)%20=%20%5Cprod_%7Bi%20=%201%7D%5En%20%5Cpi_i%5E%7By_i%7D%20(1%20-%20%5Cpi_i)%5E%7B1%20-%20y_i%7D.%0A"></p>
<p>We estimate <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> by maximizing this function or equivalently (but easier) its logarithm</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Al(%5Cbeta)%0A:=%0A%5Clog%20L(%5Cbeta)%0A=%0A%5Csum_%7Bi%20=%201%7D%5En%20%5Cbigg%5B%0A%20%20%5Cunderbrace%7By_i%20%5Clog%20%5Cbigg(%0A%20%20%20%20%5Cfrac%7B%5Cpi_i%7D%7B1%20-%20%5Cpi_i%7D%0A%20%20%5Cbigg)%0A%20%20+%0A%20%20%5Clog%20(1%20-%20%5Cpi_i)%7D_%7B=:%20l_i(%5Cbeta)%7D%0A%5Cbigg%5D.%0A"></p>
<p>How do we find this maximum? By using the same strategy as for any other function that we want to maximize: Compute the first derivative and find its root. That’s why it’s easier to maximize the log-likelihood (sums are easier to differentiate than products).</p>
<p>In this context, the first derivative<sup>2</sup> is also known as <strong>score fct</strong></p>
<p><img src="https://latex.codecogs.com/png.latex?%0As(%5Cbeta)%0A:=%0A%5Cfrac%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%0A=%0A%5Csum_%7Bi%20=%201%7D%5En%20%5Cfrac%7B%5Cpartial%20l_i(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%0A=%0A%5Csum_%7Bi%20=%201%7D%5En%20s_i(%5Cbeta),%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20s_i(%5Cbeta)%20&amp;=%20x_i(y_i%20-%20%5Cpi_i)%20=%20x_i%5Cbig(y_i%20-%20h(x_i%5ET%20%5Cbeta)%5Cbig)%5Cquad%20%5Ctext%7Band%7D%20%5C%5C%5B2mm%5D%0A%20%20h(x)%20&amp;=%20%5Cfrac%7Be%5E%7B%5Ctext%7Bx%7D%7D%7D%7B1%20+%20e%5Ex%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Here, finding a root is hard because no analytical solutions exist. Thus, we’ll have to rely on numerical methods.</p>
<section id="newtons-method" class="level3">
<h3 class="anchored" data-anchor-id="newtons-method">Newton’s method</h3>
<p>A well-known procedure is Newton’s method. In each iteration it tries to get closer to a function’s root by moving along its gradient. Have a look at this GIF from <a href="https://en.wikipedia.org/wiki/Newton's_method#/media/File:NewtonIteration_Ani.gif">Wikipedia</a>. It shows how Newton’s method works for a univariate function. But the same ideas work in higher dimensions, i.e.&nbsp;in <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D%5En"> where <img src="https://latex.codecogs.com/png.latex?n%20%5Cin%20%5Cmathbb%7BN%7D">.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="NewtonIteration_Ani.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/14_GLMs/NewtonIteration_Ani.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Alright, let me unwrap what you see here. In each iteration, Newton’s method computes <img src="https://latex.codecogs.com/png.latex?f(x_k)">, i.e.&nbsp;the function’s value at <img src="https://latex.codecogs.com/png.latex?x_k"> (the current value). Then, it uses the function’s derivative <img src="https://latex.codecogs.com/png.latex?f%5E%7B%5Cprime%7D"> to find the tangent line of <img src="https://latex.codecogs.com/png.latex?f"> at the current position <img src="https://latex.codecogs.com/png.latex?x_k">. Once the tangent line is found, our new position <img src="https://latex.codecogs.com/png.latex?x_%7Bk%20+%201%7D"> is determined by the intersection of the tangent line and the <img src="https://latex.codecogs.com/png.latex?x">-axis. All of this can be summarized via</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ax_%7Bk%20+%201%7D%20=%20f(x_k)%20-%20(f%5E%7B%5Cprime%7D(x_k))%5E%7B-1%7D%20f(x_k).%0A"></p>
<p>As I said, this can be generalized for vector-valued functions <img src="https://latex.codecogs.com/png.latex?f">. In that case, <img src="https://latex.codecogs.com/png.latex?f%5E%7B%5Cprime%7D"> is a matrix (the so called <a href="https://en.wikipedia.org/wiki/Hessian_matrix">Hessian matrix</a>) and <img src="https://latex.codecogs.com/png.latex?(f%5E%7B%5Cprime%7D)%5E%7B-1%7D"> is the inverse of that matrix. Like the one-dimensional derivative the Hessian matrix is dependent of the current position <img src="https://latex.codecogs.com/png.latex?x_k">.</p>
<p>In the context of GLMs, the current position <img src="https://latex.codecogs.com/png.latex?x_k"> is usually denoted with <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bk%7D"> and the Hessian</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BJ%7D(%5Cbeta)%20=%20-%20%5Cfrac%7B%5Cpartial%5E2%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%20%5Cpartial%20%5Cbeta%5ET%7D%0A"></p>
<p>is called <strong>observed information Matrix</strong>. Once again we can summarize Newton’s algorithm in one single line by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta_%7Bt%20+%201%7D%20=%20%5Cbeta_%7Bt%7D%20+%20%5Cmathcal%7BJ%7D%5E%7B-1%7D(%5Cbeta_%7Bt%7D)%20s(%5Cbeta_%7Bt%7D).%0A"></p>
</section>
</section>
<section id="poisson-regression" class="level2">
<h2 class="anchored" data-anchor-id="poisson-regression">Poisson regression</h2>
<p>Congrats! You’ve brushed up on one example of GLMs, namely logistic regression. But GLMs wouldn’t be general if that were all.</p>
<p>Depending on the assumed distribution and the function that links the linear predictor to the expectation, GLMs have many names. <strong>Poisson regression</strong> is another one.</p>
<p>Poisson regression is a GLM which assumes that Y follows a Poisson distribution (who would have seen that one coming), i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?Y_i%20%7C%20X_1,%20X_2,%20X_3%20%5Csim%20%5Ctext%7BPoi%7D(%5Clambda_i)">, <img src="https://latex.codecogs.com/png.latex?%5Clambda_i%20%3E%200">. A suitable link function is given by the exponential function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbb%7BE%7D%5BY_i%20%7C%20X_1,%20X_2,%20X_3%5D%20=%20%5Clambda_i%20=%20%5Cexp%5Cbig(%5Ceta_i(%5Cbeta)%5Cbig).%0A"></p>
<p>This model is used when you try to estimate count data like this.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">

<div id="bgemewavzm" style="overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

#bgemewavzm .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 12pt;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: 80%;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#bgemewavzm .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#bgemewavzm .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#bgemewavzm .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#bgemewavzm .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#bgemewavzm .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#bgemewavzm .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#bgemewavzm .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#bgemewavzm .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#bgemewavzm .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#bgemewavzm .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#bgemewavzm .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#bgemewavzm .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#bgemewavzm .gt_from_md > :first-child {
  margin-top: 0;
}

#bgemewavzm .gt_from_md > :last-child {
  margin-bottom: 0;
}

#bgemewavzm .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#bgemewavzm .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#bgemewavzm .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#bgemewavzm .gt_row_group_first td {
  border-top-width: 2px;
}

#bgemewavzm .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#bgemewavzm .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#bgemewavzm .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#bgemewavzm .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#bgemewavzm .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#bgemewavzm .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#bgemewavzm .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#bgemewavzm .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#bgemewavzm .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#bgemewavzm .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#bgemewavzm .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#bgemewavzm .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#bgemewavzm .gt_left {
  text-align: left;
}

#bgemewavzm .gt_center {
  text-align: center;
}

#bgemewavzm .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#bgemewavzm .gt_font_normal {
  font-weight: normal;
}

#bgemewavzm .gt_font_bold {
  font-weight: bold;
}

#bgemewavzm .gt_font_italic {
  font-style: italic;
}

#bgemewavzm .gt_super {
  font-size: 65%;
}

#bgemewavzm .gt_two_val_uncert {
  display: inline-block;
  line-height: 1em;
  text-align: right;
  font-size: 60%;
  vertical-align: -0.25em;
  margin-left: 0.1em;
}

#bgemewavzm .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

#bgemewavzm .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#bgemewavzm .gt_slash_mark {
  font-size: 0.7em;
  line-height: 0.7em;
  vertical-align: 0.15em;
}

#bgemewavzm .gt_fraction_numerator {
  font-size: 0.6em;
  line-height: 0.6em;
  vertical-align: 0.45em;
}

#bgemewavzm .gt_fraction_denominator {
  font-size: 0.6em;
  line-height: 0.6em;
  vertical-align: -0.05em;
}
</style>
<table class="gt_table">
  
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1">Marijuana</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1">Cigarette</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1">Alcohol</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1">Count</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_right">911</td></tr>
    <tr><td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_right">538</td></tr>
    <tr><td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_right">44</td></tr>
    <tr><td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_right">456</td></tr>
    <tr><td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_right">3</td></tr>
    <tr><td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_right">43</td></tr>
    <tr><td class="gt_row gt_left">yes</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_right">2</td></tr>
    <tr><td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_left">no</td>
<td class="gt_row gt_right">279</td></tr>
  </tbody>
  
  <tfoot class="gt_footnotes">
    <tr>
      <td class="gt_footnote" colspan="4"> Alcohol, Cigarette, and Marijuana Use for High School Seniors; Table 7.3 of Agresti, A (2007). An Introduction to Categorical Data Analysis.</td>
    </tr>
  </tfoot>
</table>
</div>
</div>
</div>
<p>Let’s find the maximum-likelihood estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> for the parameter <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> of our linear predictor <img src="https://latex.codecogs.com/png.latex?%5Ceta_i(%5Cbeta)">. Thankfully, the formulas look very similar to logistic regression, i.e.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20l(%5Cbeta)%20&amp;=%20%5Csum_%7Bi%20=%201%7D%5En%20%5Cbig%5By_i%20x_i%5ET%5Cbeta%20-%20%5Cexp(x_i%5ET%5Cbeta%20)%5Cbig%5D%20%5C%5C%0As(%5Cbeta)%20&amp;=%20%5Csum_%7Bi%20=%201%7D%5En%20x_i%5Cbig(y_i%20-%20%5Cexp(x_i%5ET%20%5Cbeta)%5Cbig)%0A%5Cend%7Balign*%7D%0A"></p>
<p>Again, applying Newton’s method to the score function <img src="https://latex.codecogs.com/png.latex?s"> will give us its root and therefore the ML-estimate of <img src="https://latex.codecogs.com/png.latex?%5Cbeta">.</p>
</section>
<section id="generalized-linear-models" class="level2">
<h2 class="anchored" data-anchor-id="generalized-linear-models">Generalized linear models</h2>
<p>We’ve now seen two examples of GLMs. In each case, we have assumed two different distributions and link functions. This begs two questions 🤔</p>
<ol type="1">
<li>Does this work with any distribution?</li>
<li>How in the world do we choose the link function?</li>
</ol>
<p>The secret ingredient that has been missing is a concept known as <strong>exponential families</strong>. It can answer both questions. Isn’t that just peachy?</p>
<p>Exponential families (not to be confused with the <a href="https://en.wikipedia.org/wiki/Exponential_distribution">exponential distribution</a>) are distributions whose density can be rewritten in a <strong>very</strong> special form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(y%20%7C%20%5Ctheta)%20=%20%5Cexp%5Cbigg%5C%7B%0A%20%20%5Cfrac%7By%5Ctheta%20-%20b(%5Ctheta)%7D%7B%5Cphi%7Dw%20+%20c(y,%20%5Cphi,%20w)%0A%5Cbigg%5C%7D,%0A"></p>
<p>where</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is the <strong>natural/canonical parameter</strong></li>
<li><img src="https://latex.codecogs.com/png.latex?b(%5Ctheta)"> is a twice differentiable function</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cphi"> is a dispersion parameter</li>
<li><img src="https://latex.codecogs.com/png.latex?w"> is a known weight</li>
<li><img src="https://latex.codecogs.com/png.latex?c"> is a normalization constant independent of <img src="https://latex.codecogs.com/png.latex?%5Ctheta"></li>
</ul>
<p>Honestly, this curious form is anything but intuitive. Yet, it is surprisingly versatile and the math just works. If you ask me, that’s quite mathemagical<sup>3</sup>.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th>Distribution</th>
<th><img src="https://latex.codecogs.com/png.latex?%5Ctheta"></th>
<th><img src="https://latex.codecogs.com/png.latex?b(%5Ctheta)"></th>
<th><img src="https://latex.codecogs.com/png.latex?b%5E%5Cprime(%5Ctheta)"></th>
<th><img src="https://latex.codecogs.com/png.latex?%5Cphi"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(%5Cmu,%20%5Csigma%5E2)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmu"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E2/2"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Ctheta"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BBer%7D(%5Cpi)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Clog%20(%5Cpi%20/%20(1%20-%20%5Cpi))"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Clog(1%20+%20e%5E%5Ctheta)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Be%5E%5Ctheta%7D%7B1%20+%20e%5E%5Ctheta%7D"></td>
<td>1</td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPoi%7D(%5Clambda)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Clog(%5Clambda)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cexp(%5Ctheta)"></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cexp(%5Ctheta)"></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>It probably doesn’t come as a surprise that Bernoulli and Poisson distributions are exponential families (see table or <a href="https://en.wikipedia.org/wiki/Exponential_family">Wikipedia</a> for even more exponential distributions). But what may surprise you is this:</p>
<p>The function <img src="https://latex.codecogs.com/png.latex?b"> plays an extraordinary role: Its derivative can be used as link function! That’s why we have chosen the link function the way we did. In fact, that’s the <strong>canoncial choice</strong>.</p>
<p>So, now you know GLMs’ ingredients: Exponential families and link functions.</p>
<p>Bam! We’ve made it through the math part. Now begins the programming part.</p>
</section>
<section id="implementing-glms" class="level2">
<h2 class="anchored" data-anchor-id="implementing-glms">Implementing GLMs</h2>
<p>As promised, we will implement GLMs in two different ways. First, we’ll do it the <code>{stats}</code> way.</p>
<section id="glms-with-glm." class="level3">
<h3 class="anchored" data-anchor-id="glms-with-glm.">GLMs with <code>glm()</code>.</h3>
<p>With <code>{stats}</code>, the <code>glm()</code> function is the main player to implement any GLM. Among other arguments, this function accepts</p>
<ul>
<li>a <code>formula</code> argument: This is how we tell <code>glm()</code> what variable we want to predict based on which predictors.</li>
<li>a <code>family</code> argument: This is the exponential family that we want to use (for logistic regression this will be Bernoulli or, more generally, binomial)</li>
<li>a <code>data</code> argument: This is the data.frame/tibble that contains the variables that you’ve stated in the <code>formula</code>.</li>
</ul>
<p>For our penguins example, this may look like this.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">glm.mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">glm</span>(</span>
<span id="cb3-2">  sex <span class="sc" style="color: #5E5E5E;">~</span> body_mass_g <span class="sc" style="color: #5E5E5E;">+</span> bill_length_mm <span class="sc" style="color: #5E5E5E;">+</span> species, </span>
<span id="cb3-3">  <span class="at" style="color: #657422;">family =</span> binomial, </span>
<span id="cb3-4">  <span class="at" style="color: #657422;">data =</span> penguins_data</span>
<span id="cb3-5">)</span></code></pre></div>
</div>
<p>Here, I’ve saved our fitted model into a variable <code>glm.mod</code>. For our purposes, we can treat this variable like a list that is equipped with a so-called class attribute (which influences the behavior of some functions later). Our list’s column <code>fitted.values</code> contains the probabilities the GLM predicted, e.g.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">glm.mod<span class="sc" style="color: #5E5E5E;">$</span>fitted.values[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         1          2          3          4          5          6          7 
0.69330991 0.80620808 0.12555009 0.05499928 0.55937374 0.45142835 0.99939311 
         8          9         10 
0.14437378 0.69994208 0.92478757 </code></pre>
</div>
</div>
<p>Now we can manually turn the predicted probabilities into <code>sex</code> predictions. That requires us to know whether the predicted probability refers to male or female penguins.</p>
<p>Strolling through the docs of <code>glm()</code> reveals that the second level in our response factor <code>sex</code> is considered a “success”. So that means the probability refers to male penguins (because that’s the second level of <code>sex</code>). Tricky, I know.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">threshold <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb6-2">preds <span class="ot" style="color: #003B4F;">&lt;-</span> penguins_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb6-4">    <span class="at" style="color: #657422;">prob.fit =</span> glm.mod<span class="sc" style="color: #5E5E5E;">$</span>fitted.values,</span>
<span id="cb6-5">    <span class="at" style="color: #657422;">prediction =</span> <span class="fu" style="color: #4758AB;">if_else</span>(prob.fit <span class="sc" style="color: #5E5E5E;">&gt;</span> threshold, <span class="st" style="color: #20794D;">'male'</span>, <span class="st" style="color: #20794D;">'female'</span>),</span>
<span id="cb6-6">    <span class="at" style="color: #657422;">correct =</span> <span class="fu" style="color: #4758AB;">if_else</span>(sex <span class="sc" style="color: #5E5E5E;">==</span> prediction, <span class="st" style="color: #20794D;">'correct'</span>, <span class="st" style="color: #20794D;">'incorrect'</span>)</span>
<span id="cb6-7">  )</span>
<span id="cb6-8">preds</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 333 × 7
   sex    body_mass_g species bill_length_mm prob.fit prediction correct  
   &lt;fct&gt;        &lt;int&gt; &lt;fct&gt;            &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    
 1 male          3750 Adelie            39.1   0.693  male       correct  
 2 female        3800 Adelie            39.5   0.806  male       incorrect
 3 female        3250 Adelie            40.3   0.126  female     correct  
 4 female        3450 Adelie            36.7   0.0550 female     correct  
 5 male          3650 Adelie            39.3   0.559  male       correct  
 6 female        3625 Adelie            38.9   0.451  female     correct  
 7 male          4675 Adelie            39.2   0.999  male       correct  
 8 female        3200 Adelie            41.1   0.144  female     correct  
 9 male          3800 Adelie            38.6   0.700  male       correct  
10 male          4400 Adelie            34.6   0.925  male       correct  
# … with 323 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<p>And we can also predict other probabilities for observations that have not been present in the original dataset.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">new_observations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;">body_mass_g =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4532</span>, <span class="dv" style="color: #AD0000;">5392</span>),</span>
<span id="cb8-3">  <span class="at" style="color: #657422;">bill_length_mm =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">49</span>),</span>
<span id="cb8-4">  <span class="at" style="color: #657422;">species =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Adelie'</span>, <span class="st" style="color: #20794D;">'Gentoo'</span>)</span>
<span id="cb8-5">)</span>
<span id="cb8-6"><span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb8-7">  glm.mod, </span>
<span id="cb8-8">  <span class="at" style="color: #657422;">newdata =</span> new_observations</span>
<span id="cb8-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       1        2 
6.911824 3.661797 </code></pre>
</div>
</div>
<p>Note that this gave us the value of the linear predictors. But that’s not we’re interested, right? So let’s tell <code>predict()</code> that we care about the response variable.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb10-2">  glm.mod, </span>
<span id="cb10-3">  <span class="at" style="color: #657422;">newdata =</span> new_observations,</span>
<span id="cb10-4">  <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'response'</span></span>
<span id="cb10-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        1         2 
0.9990051 0.9749570 </code></pre>
</div>
</div>
<p>Now, these look more like probabilities. And they are. These are our predicted probabilities. But we can also save the probabilities into our tibble.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">new_observations <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;">pred_prob =</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb12-4">      glm.mod,</span>
<span id="cb12-5">      <span class="at" style="color: #657422;">newdata =</span> new_observations,</span>
<span id="cb12-6">      <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'response'</span></span>
<span id="cb12-7">    )</span>
<span id="cb12-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  body_mass_g bill_length_mm species pred_prob
        &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;
1        4532             40 Adelie      0.999
2        5392             49 Gentoo      0.975</code></pre>
</div>
</div>
<p>One last thing before we move on to <code>{tidymodels}</code>. At first, it may be hard to work with <code>predict()</code> because the documentation does not feel super helpful at first. Take a look. The docs do not tell you much about arguments like <code>newdata</code> or <code>type</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-1010B979.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/14_GLMs/images/paste-1010B979.png" class="img-fluid figure-img" style="width:70.0%"></a></p>
</figure>
</div>
<p>That’s because <code>predict()</code> is actually a really versatile function. It works differently depending on what kind of model object you feed it with, e.g.&nbsp;output from <code>lm()</code> or <code>glm()</code>. That’s the part that is determined by <code>glm.mod</code>’s class attribute.</p>
<p>Now, at the end of <code>predict()</code>’s docs you will find a list that shows you all kinds of other <code>predict()</code> functions like <code>predict.glm()</code>. This is the function that works with objects of class <code>glm</code>. In the docs of the latter function you can now look up all arguments that you need.</p>
</section>
<section id="glms-with-tidymodels" class="level3">
<h3 class="anchored" data-anchor-id="glms-with-tidymodels">GLMs with <code>{tidymodels}</code></h3>
<p>Like the tidyverse, <code>{tidymodels}</code> is actually more than a single package. It is a whole ecosystem of packages. All of these packages share a design philosophy and are tailored to modelling/machine learning. Check out how many packages get attached when we call <code>{tidymodels}</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ broom        1.0.0     ✔ rsample      1.1.0
✔ dials        1.0.0     ✔ tune         1.0.0
✔ infer        1.0.2     ✔ workflows    1.0.0
✔ modeldata    1.0.0     ✔ workflowsets 1.0.0
✔ parsnip      1.0.0     ✔ yardstick    1.0.0
✔ recipes      1.0.1     </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use suppressPackageStartupMessages() to eliminate package startup messages</code></pre>
</div>
</div>
<p>Obviously, we can’t dig into everything here. So, let’s just cover the minimal amount we need for our use case. For a more detailed intro to <code>{tidymodels}</code> you can check out my <a href="https://yards.albert-rapp.de/how-to-build-a-model.html">YARDS lecture notes</a>. And for a really thorough deep dive I recommend the <a href="https://www.tmwr.org/">Tidy Modeling with R book</a>.</p>
<p>To run a logistic regression in the <code>{tidymodels}</code> framework we need to first define a <strong>model specification</strong>. These are handled by <code>{parsnip}</code>. Here, this looks like this.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">logistic_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glm"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb18-4">logistic_spec</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Logistic Regression Model Specification (classification)

Computational engine: glm </code></pre>
</div>
</div>
<p>Notice that the output is really nothing more than a description saying</p>
<ul>
<li>we’re doing a logistic regression (<code>logistic_reg()</code>).</li>
<li>we want to use the <code>stats::glm()</code> engine/function to fit the logistic regression (<code>set_engine("glm")</code>)</li>
<li>we want to do classification (and not regression) (<code>set_mode("classification")</code>)</li>
</ul>
<p>Notice that there are other engines that we could use, e.g.&nbsp;<code>"glmnet"</code> or <code>"keras"</code>. Also, specifying the mode is kind of superfluous here. But for models that can do both, classification and regression, e.g.&nbsp;<a href="https://yards.albert-rapp.de/tree-based-models.html">random forests</a>, this is necessary. That’s why I’ve shown that step here.</p>
<p>Alright, so we’ve set up our model. Time to fit it. That happens with <code>fit()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">glm.tidymod <span class="ot" style="color: #003B4F;">&lt;-</span> logistic_spec <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">fit</span>(</span>
<span id="cb20-3">    <span class="at" style="color: #657422;">formula =</span> sex <span class="sc" style="color: #5E5E5E;">~</span> body_mass_g <span class="sc" style="color: #5E5E5E;">+</span> bill_length_mm <span class="sc" style="color: #5E5E5E;">+</span> species, </span>
<span id="cb20-4">    <span class="at" style="color: #657422;">data =</span> penguins_data</span>
<span id="cb20-5">  )</span></code></pre></div>
</div>
<p>Like <code>predict()</code>, the <code>fit()</code> function works a little bit differently depending on its input object. What’s more is that can be a bit tricky to find the correct page in the docs to look up the correct arguments. What you’re actually looking for is <code>fit.model_spec()</code>. That’s because <code>logistic_spec</code> is not a <code>glm</code> object but a <code>model_spec</code> object.</p>
<p>Don’t worry about the technicalities if you’ve found that confusing. The point is that <code>fit()</code> expects a</p>
<ul>
<li>model specification</li>
<li>a formula (exactly like <code>glm()</code>)</li>
<li>data</li>
</ul>
<p>Now we can throw <code>glm.tidymod</code> into <code>predict()</code>. Beware of your objects though! In the <code>{stats}</code> way, we’ve passed a <code>glm</code> object to <code>predict</code> so really it behaves like <code>predict.glm()</code>. Now, we’re using a <code>model_fit()</code> object (that’s what <code>fit()</code> returns). So, we’ll need to look at the docs of <code>predict.model_fit()</code>.</p>
<p>Et voilà! The documentation reveals that there are arguments called <code>new_data</code> (mind the <code>_</code>) and <code>type</code>. The latter argument can deal with a lot of different inputs. But here we’re just going with <code>"prob"</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">new_observations <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb21-3">    <span class="at" style="color: #657422;">pred_prob =</span> <span class="fu" style="color: #4758AB;">predict</span>(</span>
<span id="cb21-4">      glm.tidymod,</span>
<span id="cb21-5">      <span class="at" style="color: #657422;">new_data =</span> new_observations,</span>
<span id="cb21-6">      <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'prob'</span></span>
<span id="cb21-7">    )</span>
<span id="cb21-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 4
  body_mass_g bill_length_mm species pred_prob$.pred_female $.pred_male
        &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;       &lt;dbl&gt;
1        4532             40 Adelie                0.000995       0.999
2        5392             49 Gentoo                0.0250         0.975</code></pre>
</div>
</div>
<p>Notice that this actually returns <strong>two</strong> probabilities. One for each <code>sex</code>. That’s great because we don’t have to wonder anymore what class our predicted probability refers to.</p>
<p>This is just one of many advantages working with <code>{tidymodels}</code>. You will still need some knowledge of the engine you’re using (<code>glm()</code> in this case). But <code>{tidymodels}</code> will give you a nicer interface to the engine. And you can easily switch between engines and other models because it’s all constructed from a unified interface.</p>
<p>Finally, let me mention that switching to a Poisson regression is just a matter of exchanging <code>logistic_reg()</code> for <code>poisson_reg()</code> (and changing the mode to <code>"regression"</code>). In fact, that’s how you switch to any other model, e.g.&nbsp;to random forests via <code>rand_forest()</code>.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>That’s a wrap! This guide should give you a solid understanding of both, the theoretical and practical, aspects of GLMs. If you’ve got any questions, feel free to use the comment section or send me a mail.</p>
<p>If you don’t want to stay in touch or don’t want to miss new blog posts, then don’t forget to subscribe to my newsletter below. Enjoy the rest of your day and see you next time!</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-fahrmeir2013" class="csl-entry">
Fahrmeir, Ludwig, Thomas Kneib, Stefan Lang, and Brian Marx. 2013. <em>Regression</em>. Springer Berlin Heidelberg. <a href="https://doi.org/10.1007/978-3-642-34333-9">https://doi.org/10.1007/978-3-642-34333-9</a>.
</div>
</div></section><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Of course I can’t cover everything. This is a beginner’s guide after all. For more details let me refer to the excellent book <span class="citation" data-cites="fahrmeir2013">(Fahrmeir et al. 2013)</span>.↩︎</p></li>
<li id="fn2"><p>For detailed calculations of the score function and any other formula, I recommend that you refer to <span class="citation" data-cites="fahrmeir2013">(Fahrmeir et al. 2013)</span>.↩︎</p></li>
<li id="fn3"><p>An interesting perspective on what makes exponential familes so magical can be found on <a href="https://stats.stackexchange.com/questions/284260/why-do-we-assume-the-exponential-family-in-the-glm-context/284285#284285">SE</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Statistics</category>
  <category>ML</category>
  <guid>https://albert-rapp.de/posts/14_GLMs/14_GLMS.html</guid>
  <pubDate>Thu, 11 Aug 2022 22:00:00 GMT</pubDate>
  <media:content url="https://albert-rapp.de/posts/14_GLMs/NewtonIteration_Ani.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Forget regular heat maps. Use bubbles on a grid!</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>Heat maps are super easy to understand. And even better: They can be generated in warp speed with <code>geom_tile()</code>. Combine that with <code>facet_wrap()</code> and you can even build special heat maps. That’s how I created this calendar plot I shared <a href="https://twitter.com/rappa753/status/1545729747774308354">on Twitter</a> a few days ago.</p>
<div class="grid">
<div class="g-col-8 g-start-3">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="nycflights_calendar.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/nycflights_calendar.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>In this particular case, using heat maps feels apprpropriate. Each day has the exact same ¨weight” in the data. Sure, each day may see a different amount of flights. But that’s exactly what the color gradient shows. So, there are no bad surprises here.</p>
<p>However, it’s not always this simple. Take a look at the following heat map. It tries to visualize the effect of a property’s size and it’s location (zone) on a House’s sale price.</p>
<div class="cell">

</div>
<div class="cell">

</div>
<div class="cell">

</div>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/regular_heatmap-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/regular_heatmap-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<section id="the-problem-with-heat-maps" class="level2">
<h2 class="anchored" data-anchor-id="the-problem-with-heat-maps">The Problem with heat maps</h2>
<p>Judging from this visual you could think that the information in each tile is in some sense equal. For starters, you could assume that a similar amount of information went into estimating the median. But this is not the case! In each tile, there’s a different group size. Take a look!</p>
<div class="cell">
<div class="cell-output-display">

<div id="ikjwmquned" style="overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

#ikjwmquned .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#ikjwmquned .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ikjwmquned .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#ikjwmquned .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#ikjwmquned .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ikjwmquned .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ikjwmquned .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#ikjwmquned .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#ikjwmquned .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#ikjwmquned .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#ikjwmquned .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#ikjwmquned .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#ikjwmquned .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#ikjwmquned .gt_from_md > :first-child {
  margin-top: 0;
}

#ikjwmquned .gt_from_md > :last-child {
  margin-bottom: 0;
}

#ikjwmquned .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#ikjwmquned .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#ikjwmquned .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#ikjwmquned .gt_row_group_first td {
  border-top-width: 2px;
}

#ikjwmquned .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikjwmquned .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#ikjwmquned .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#ikjwmquned .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ikjwmquned .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikjwmquned .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#ikjwmquned .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#ikjwmquned .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ikjwmquned .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ikjwmquned .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikjwmquned .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ikjwmquned .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikjwmquned .gt_left {
  text-align: left;
}

#ikjwmquned .gt_center {
  text-align: center;
}

#ikjwmquned .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#ikjwmquned .gt_font_normal {
  font-weight: normal;
}

#ikjwmquned .gt_font_bold {
  font-weight: bold;
}

#ikjwmquned .gt_font_italic {
  font-style: italic;
}

#ikjwmquned .gt_super {
  font-size: 65%;
}

#ikjwmquned .gt_two_val_uncert {
  display: inline-block;
  line-height: 1em;
  text-align: right;
  font-size: 60%;
  vertical-align: -0.25em;
  margin-left: 0.1em;
}

#ikjwmquned .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

#ikjwmquned .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#ikjwmquned .gt_slash_mark {
  font-size: 0.7em;
  line-height: 0.7em;
  vertical-align: 0.15em;
}

#ikjwmquned .gt_fraction_numerator {
  font-size: 0.6em;
  line-height: 0.6em;
  vertical-align: 0.45em;
}

#ikjwmquned .gt_fraction_denominator {
  font-size: 0.6em;
  line-height: 0.6em;
  vertical-align: -0.05em;
}
</style>
<table class="gt_table">
  
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1">lot_area</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1">ms_zoning</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1">n</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td class="gt_row gt_center">1,300 - 4,800</td>
<td class="gt_row gt_left">Floating
Village
Residential</td>
<td class="gt_row gt_right">59</td></tr>
    <tr><td class="gt_row gt_center">1,300 - 4,800</td>
<td class="gt_row gt_left">Residential
High
Density</td>
<td class="gt_row gt_right">6</td></tr>
    <tr><td class="gt_row gt_center">1,300 - 4,800</td>
<td class="gt_row gt_left">Residential
Low
Density</td>
<td class="gt_row gt_right">83</td></tr>
    <tr><td class="gt_row gt_center">1,300 - 4,800</td>
<td class="gt_row gt_left">Residential
Medium
Density</td>
<td class="gt_row gt_right">146</td></tr>
    <tr><td class="gt_row gt_center">4,800 - 8,740</td>
<td class="gt_row gt_left">Floating
Village
Residential</td>
<td class="gt_row gt_right">44</td></tr>
    <tr><td class="gt_row gt_center">4,800 - 8,740</td>
<td class="gt_row gt_left">Residential
High
Density</td>
<td class="gt_row gt_right">13</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>So, this visualization is somewhat misleading. Let’s try to fix that. Instead of a heat map, we could generate a bubble chart like this.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/bubble_grid_plot-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/bubble_grid_plot-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice how small some bubbles are. This is how you can tell that your summary statistic (in this case the median) may use a rather small sample size. And as we all know, this is not a good thing.</p>
<p>Also, the bubbles leave a lot of white space. We could use some of this additional space to make our plot more informative. For example, we could label the bubbles with the sample size or the median sale price.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Only sample size</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">With Median</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/bubble_grid_plot_w_size-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/bubble_grid_plot_w_size-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/bubble_grid_plot_with_size_and_median-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/bubble_grid_plot_with_size_and_median-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Gridded bubble charts look nice and they are an excellent way to show it all. The colors show a summary statistic and the bubbles show the corresponding sample size. Add some labels to that and everything becomes even more explicit.</p>
<p>Though, I’m still a bit torn about whether labels for sample size <strong>and</strong> medians aren’t a bit too much. What do you think? Feel free to let me know in the comments.</p>
<p>If you want to find out how to generate these plots with <code>{ggplot2}</code>, you can check out the Appendix at the end of this blog post. Simply, unfold the <code>Appendix</code> section.</p>
<p>Also, if you have any questions, let me know via mail or in the comments. And don’t forget to stay in touch via my <a href="https://alberts-newsletter.beehiiv.com/subscribe">Newsletter</a>, <a href="https://twitter.com/rappa753">Twitter</a> or my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>
</section>
<section id="how-to-generate-the-plots" class="level2">
<h2 class="anchored" data-anchor-id="how-to-generate-the-plots">How to generate the plots</h2>
<details>
<summary>
Appendix (click to unfold)
</summary>
<section id="data-preprocessing" class="level3">
<h3 class="anchored" data-anchor-id="data-preprocessing">Data preprocessing</h3>
<p>First, we need to create a data set. Here, the <code>ames</code> data set from the <code>modeldata</code> package will give us what we need.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">data</span>(ames, <span class="at" style="color: #657422;">package =</span> <span class="st" style="color: #20794D;">'modeldata'</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"></span>
<span id="cb1-4">price_by_size_and_zones <span class="ot" style="color: #003B4F;">&lt;-</span> ames <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-5">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">select</span>(sale_price, lot_area, ms_zoning) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">str_detect</span>(ms_zoning, <span class="st" style="color: #20794D;">"(A_agr|I_all|C_all)"</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">ms_zoning =</span> <span class="fu" style="color: #4758AB;">fct_drop</span>(ms_zoning)) <span class="co" style="color: #5E5E5E;"># Filter out small zones</span></span></code></pre></div>
</div>
<p>To create a regular heat map, we first need to bin the lot area.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">price_by_binned_size_and_zones <span class="ot" style="color: #003B4F;">&lt;-</span> price_by_size_and_zones <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;">lot_area =</span> <span class="fu" style="color: #4758AB;">cut</span>(</span>
<span id="cb2-4">      lot_area, </span>
<span id="cb2-5">      <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">quantile</span>(lot_area, <span class="at" style="color: #657422;">probs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.8</span>, <span class="dv" style="color: #AD0000;">1</span>)),</span>
<span id="cb2-6">      <span class="at" style="color: #657422;">include.lowest =</span> T</span>
<span id="cb2-7">    )</span>
<span id="cb2-8">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-10">    <span class="at" style="color: #657422;">ms_zoning =</span> <span class="fu" style="color: #4758AB;">str_replace_all</span>(ms_zoning, <span class="st" style="color: #20794D;">"_"</span>, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb2-11">  )</span>
<span id="cb2-12">price_by_binned_size_and_zones</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,901 × 3
   sale_price lot_area            ms_zoning                   
        &lt;int&gt; &lt;fct&gt;               &lt;chr&gt;                       
 1     215000 (1.22e+04,2.15e+05] "Residential\nLow\nDensity" 
 2     105000 (1.02e+04,1.22e+04] "Residential\nHigh\nDensity"
 3     172000 (1.22e+04,2.15e+05] "Residential\nLow\nDensity" 
 4     244000 (1.02e+04,1.22e+04] "Residential\nLow\nDensity" 
 5     189900 (1.22e+04,2.15e+05] "Residential\nLow\nDensity" 
 6     195500 (9.46e+03,1.02e+04] "Residential\nLow\nDensity" 
 7     213500 (4.8e+03,8.74e+03]  "Residential\nLow\nDensity" 
 8     191500 (4.8e+03,8.74e+03]  "Residential\nLow\nDensity" 
 9     236500 (4.8e+03,8.74e+03]  "Residential\nLow\nDensity" 
10     189000 (4.8e+03,8.74e+03]  "Residential\nLow\nDensity" 
# … with 2,891 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<p>Next, we estimate the median sale price for a given lot size and zone.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">medians_by_binned_size_and_zones <span class="ot" style="color: #003B4F;">&lt;-</span> price_by_binned_size_and_zones <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">group_by</span>(ms_zoning, lot_area) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">n</span>(),</span>
<span id="cb4-5">    <span class="at" style="color: #657422;">sale_price =</span> <span class="fu" style="color: #4758AB;">median</span>(sale_price), </span>
<span id="cb4-6">    <span class="at" style="color: #657422;">.groups =</span> <span class="st" style="color: #20794D;">'drop'</span></span>
<span id="cb4-7">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">complete</span>(lot_area, ms_zoning) </span></code></pre></div>
</div>
<p>The lot area labels will look terrible. That’s why I have transformed them with a custom function. But this is beside the point here, so you can skip this step. If you want to see the custom function, though, feel free to unfold the following code chunk.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">name_function <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(text) {</span>
<span id="cb5-2">  text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">'[ () </span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[ </span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">] ]'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;">str_split</span>(<span class="st" style="color: #20794D;">','</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">map</span>(as.numeric) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">map</span>(scales<span class="sc" style="color: #5E5E5E;">::</span>number, <span class="at" style="color: #657422;">big.mark =</span> <span class="st" style="color: #20794D;">","</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;">map_chr</span>(paste, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">' - '</span>)</span>
<span id="cb5-8">}</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;"># Better labels</span></span>
<span id="cb5-11">medians_by_binned_size_and_zones <span class="ot" style="color: #003B4F;">&lt;-</span> medians_by_binned_size_and_zones <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lot_area =</span> <span class="fu" style="color: #4758AB;">map_chr</span>(lot_area, name_function)) </span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;"># Convert labels to ordered factor</span></span>
<span id="cb5-15">medians_by_binned_size_and_zones <span class="ot" style="color: #003B4F;">&lt;-</span> medians_by_binned_size_and_zones <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb5-17">    <span class="at" style="color: #657422;">lower =</span> <span class="fu" style="color: #4758AB;">str_match</span>(lot_area, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">d+,</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">d+"</span>)[,<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb5-18">    <span class="at" style="color: #657422;">lower =</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">str_remove</span>(lower, <span class="st" style="color: #20794D;">','</span>)),</span>
<span id="cb5-19">    <span class="at" style="color: #657422;">lot_area =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(lot_area, lower)</span>
<span id="cb5-20">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-21">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>lower)</span></code></pre></div>
</details>
</div>
</section>
<section id="regular-heat-map" class="level3">
<h3 class="anchored" data-anchor-id="regular-heat-map">Regular heat map</h3>
<p>Now, we can build the regular heat map.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">medians_by_binned_size_and_zones  <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ms_zoning, <span class="at" style="color: #657422;">y =</span> lot_area, <span class="at" style="color: #657422;">fill =</span> sale_price)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_tile</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'black'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb6-6">    <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'top'</span>,</span>
<span id="cb6-7">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">'grey40'</span>)</span>
<span id="cb6-8">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb6-10">    <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">guide_colorbar</span>(</span>
<span id="cb6-11">      <span class="at" style="color: #657422;">barheight =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb6-12">      <span class="at" style="color: #657422;">barwidth =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb6-13">      <span class="at" style="color: #657422;">title.position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb6-14">    )</span>
<span id="cb6-15">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-16">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">expand =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-17">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(</span>
<span id="cb6-18">    <span class="at" style="color: #657422;">trans =</span> <span class="st" style="color: #20794D;">"log"</span>, </span>
<span id="cb6-19">    <span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_dollar</span>(),</span>
<span id="cb6-20">    <span class="at" style="color: #657422;">na.value =</span> <span class="st" style="color: #20794D;">'grey80'</span></span>
<span id="cb6-21">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-22">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb6-23">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(), </span>
<span id="cb6-24">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'Lot area (in sq.ft)'</span>, </span>
<span id="cb6-25">    <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">'Median sale price'</span>,</span>
<span id="cb6-26">    <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"Data: Ames housing data set from {modeldata}"</span></span>
<span id="cb6-27">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/regular_heatmap-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/regular_heatmap-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="bubble-chart" class="level3">
<h3 class="anchored" data-anchor-id="bubble-chart">Bubble chart</h3>
<p>Here’s how to create the bubble chart. The trick is to use <code>geom_point()</code> and map <code>size</code> to the sample size <code>n</code>. You can adjust the maximal bubble size via <code>scale_size_area()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bubble_grid_plot <span class="ot" style="color: #003B4F;">&lt;-</span> medians_by_binned_size_and_zones <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ms_zoning, <span class="at" style="color: #657422;">y =</span> lot_area)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">col =</span> sale_price, <span class="at" style="color: #657422;">fill =</span> sale_price, <span class="at" style="color: #657422;">size =</span> n), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span></span>
<span id="cb7-5">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb7-8">    <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'top'</span>,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">'grey40'</span>)</span>
<span id="cb7-10">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb7-12">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb7-13">    <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb7-14">    <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">guide_colorbar</span>(</span>
<span id="cb7-15">      <span class="at" style="color: #657422;">barheight =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb7-16">      <span class="at" style="color: #657422;">barwidth =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb7-17">      <span class="at" style="color: #657422;">title.position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb7-18">    )</span>
<span id="cb7-19">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-20">  <span class="fu" style="color: #4758AB;">scale_size_area</span>(<span class="at" style="color: #657422;">max_size =</span> <span class="dv" style="color: #AD0000;">15</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-21">  <span class="fu" style="color: #4758AB;">scale_color_viridis_c</span>(</span>
<span id="cb7-22">    <span class="at" style="color: #657422;">trans =</span> <span class="st" style="color: #20794D;">"log"</span>, </span>
<span id="cb7-23">    <span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_dollar</span>(),</span>
<span id="cb7-24">    <span class="at" style="color: #657422;">na.value =</span> <span class="st" style="color: #20794D;">'grey80'</span></span>
<span id="cb7-25">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-26">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(</span>
<span id="cb7-27">    <span class="at" style="color: #657422;">trans =</span> <span class="st" style="color: #20794D;">"log"</span>, </span>
<span id="cb7-28">    <span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_dollar</span>(),</span>
<span id="cb7-29">    <span class="at" style="color: #657422;">na.value =</span> <span class="st" style="color: #20794D;">'grey80'</span></span>
<span id="cb7-30">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-31">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'Lot area (in sq.ft)'</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">'Median sale price'</span>)</span>
<span id="cb7-32">bubble_grid_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/bubble_grid_plot-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/bubble_grid_plot-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>For additional text labels use <code>geom_text()</code>. Positioning the labels so that they do not overlap with the bubbles is a bit tricky. I’ve hard-coded the labels’ positions based on the sample size <code>n</code> with <code>case_when()</code>.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Only sample size</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">With Median</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">bubble_grid_plot_w_size <span class="ot" style="color: #003B4F;">&lt;-</span> bubble_grid_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> n), </span>
<span id="cb8-4">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb8-5">      medians_by_binned_size_and_zones<span class="sc" style="color: #5E5E5E;">$</span>n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">225</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb8-6">      medians_by_binned_size_and_zones<span class="sc" style="color: #5E5E5E;">$</span>n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.135</span>,</span>
<span id="cb8-7">      medians_by_binned_size_and_zones<span class="sc" style="color: #5E5E5E;">$</span>n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.08</span>,</span>
<span id="cb8-8">      T <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb8-9">    ), </span>
<span id="cb8-10">    <span class="at" style="color: #657422;">nudge_y =</span> <span class="fl" style="color: #AD0000;">0.05</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span>,</span>
<span id="cb8-11">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb8-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-13">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb8-14">    <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">'Data: Ames housing data set from {modeldata} | Labels represent sample size'</span></span>
<span id="cb8-15">  )</span>
<span id="cb8-16">bubble_grid_plot_w_size</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/bubble_grid_plot_w_size-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/bubble_grid_plot_w_size-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">bubble_grid_plot_w_size <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dollar</span>(sale_price, <span class="at" style="color: #657422;">scale_cut =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"k"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1000</span>), <span class="at" style="color: #657422;">accuracy =</span> <span class="fl" style="color: #AD0000;">0.1</span>)), </span>
<span id="cb9-4">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb9-5">      medians_by_binned_size_and_zones<span class="sc" style="color: #5E5E5E;">$</span>n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">225</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.2</span>, </span>
<span id="cb9-6">      medians_by_binned_size_and_zones<span class="sc" style="color: #5E5E5E;">$</span>n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.135</span>,</span>
<span id="cb9-7">      medians_by_binned_size_and_zones<span class="sc" style="color: #5E5E5E;">$</span>n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">40</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.08</span>,</span>
<span id="cb9-8">      T <span class="sc" style="color: #5E5E5E;">~</span> <span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb9-9">    ), </span>
<span id="cb9-10">    <span class="at" style="color: #657422;">nudge_y =</span> <span class="fl" style="color: #AD0000;">0.05</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span>,</span>
<span id="cb9-11">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb9-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb9-14">    <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">'Data: Ames housing data set from {modeldata} | Labels represent median and sample size'</span></span>
<span id="cb9-15">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="14_scaled_heatmaps_files/figure-html/bubble_grid_plot_with_size_and_median-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps_files/figure-html/bubble_grid_plot_with_size_and_median-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section></details>


</section>


 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/14_scaled_heatmaps.html</guid>
  <pubDate>Tue, 09 Aug 2022 22:00:00 GMT</pubDate>
  <media:content url="https://albert-rapp.de/posts/ggplot2-tips/14_scaled_heatmaps/nycflights_calendar.png" medium="image" type="image/png" height="206" width="144"/>
</item>
<item>
  <title>Alternative ways to visualize correlations</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>I recently saw a nice thread <a href="https://twitter.com/levikul09/status/1547184438492049409?s=20&amp;t=kex3HN9QijZs1eiKiD2xvQ">on Twitter</a> and I wanted to chime in. The author of said thread suggests to use bar charts instead of colored matrices to visualize correlations. Let’s try that with <code>{ggplot2}</code>. Additionally, I will suggest a few ideas of my own.</p>
<section id="using-geom_tile-to-visualize-correlation-matrices" class="level2">
<h2 class="anchored" data-anchor-id="using-geom_tile-to-visualize-correlation-matrices">Using geom_tile() to visualize correlation matrices</h2>
<p>Let’s start with the basic plot, i.e.&nbsp;we</p>
<ul>
<li>pick a data set,</li>
<li>compute correlations between variables</li>
<li>visualize correlations with <code>geom_tile()</code>.</li>
</ul>
<p>Our data set will be the Ames housing data set from <code>{modeldata}</code>. Since this data set contains many variables, we’ll just pick a few from them. Otherwise, we’ll have to work hard to visualize the correlations of MANY variables. Technically, that’s possible with large images but it won’t give us any more insights into the visualization process.</p>
<p>Also, for a real visual, we should probably relabel the variable names into something human-readable. But for simplicity, I skip that step in this demo.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">data</span>(ames, <span class="at" style="color: #657422;">package =</span> <span class="st" style="color: #20794D;">'modeldata'</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">ames_numeric <span class="ot" style="color: #003B4F;">&lt;-</span> ames <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-5">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-8">ames_numeric <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">print</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,930 × 10
  lot_frontage lot_area year_b…¹ year_…² mas_v…³ bsmt_…⁴ bsmt_…⁵ bsmt_…⁶ total…⁷
         &lt;dbl&gt;    &lt;int&gt;    &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
1          141    31770     1960    1960     112       2       0     441    1080
2           80    11622     1961    1961       0       6     144     270     882
3           81    14267     1958    1958     108       1       0     406    1329
4           93    11160     1968    1968       0       1       0    1045    2110
5           74    13830     1997    1998       0       3       0     137     928
# … with 2,925 more rows, 1 more variable: first_flr_sf &lt;int&gt;, and abbreviated
#   variable names ¹​year_built, ²​year_remod_add, ³​mas_vnr_area, ⁴​bsmt_fin_sf_1,
#   ⁵​bsmt_fin_sf_2, ⁶​bsmt_unf_sf, ⁷​total_bsmt_sf
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
<p>Next, we’re going to compute the correlation matrix with <code>cor()</code>. Then, we make the resulting matrix into a tibble (keep the row names) and then pivot the tibble to rearrange the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">correlations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cor</span>(ames_numeric) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">as_tibble</span>(<span class="at" style="color: #657422;">rownames =</span> <span class="st" style="color: #20794D;">'variable1'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'variable2'</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'correlation'</span>)</span>
<span id="cb3-4">ames_numeric <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">print</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,930 × 10
  lot_frontage lot_area year_b…¹ year_…² mas_v…³ bsmt_…⁴ bsmt_…⁵ bsmt_…⁶ total…⁷
         &lt;dbl&gt;    &lt;int&gt;    &lt;int&gt;   &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
1          141    31770     1960    1960     112       2       0     441    1080
2           80    11622     1961    1961       0       6     144     270     882
3           81    14267     1958    1958     108       1       0     406    1329
4           93    11160     1968    1968       0       1       0    1045    2110
5           74    13830     1997    1998       0       3       0     137     928
# … with 2,925 more rows, 1 more variable: first_flr_sf &lt;int&gt;, and abbreviated
#   variable names ¹​year_built, ²​year_remod_add, ³​mas_vnr_area, ⁴​bsmt_fin_sf_1,
#   ⁵​bsmt_fin_sf_2, ⁶​bsmt_unf_sf, ⁷​total_bsmt_sf
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names</code></pre>
</div>
</div>
<p>Now, this is a tidy format. It’s majestic and <code>{ggplot2}</code> will love the format. Now, visualizing the correlation matrix is only a matter of using <code>geom_tile()</code>. Unfortunately, we will have to tilt the labels of the x-axis. I usually dislike this move but with this visual I don’t think there much we can do about it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">correlations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(variable1, variable2, <span class="at" style="color: #657422;">fill =</span> correlation)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_tile</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">45</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="13_alternative_corrplots_files/figure-html/unnamed-chunk-4-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="use-geom_col-to-visualize-correlation-matrices" class="level2">
<h2 class="anchored" data-anchor-id="use-geom_col-to-visualize-correlation-matrices">Use geom_col() to visualize correlation matrices</h2>
<p>Next, let us try visualizing the correlations with bars instead of colored tiles. For that, we need to create a new variable that describes the pairs of all variables.</p>
<p>Notice that we do not want to use the same pair twice. This can happen if we use “both” pairs <code>A + B</code> and <code>B + A</code>. To avoid that, I have set all entries of the correlation matrix that are not in the lower triangle of the matrix to zero. Here’s how a sub-matrix looks so that you know how our matrix looks in principle.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">triangle_correlations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cor</span>(ames_numeric) <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">lower.tri</span>(<span class="fu" style="color: #4758AB;">cor</span>(ames_numeric))</span>
<span id="cb6-2">triangle_correlations[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               lot_frontage   lot_area year_built year_remod_add
lot_frontage     0.00000000 0.00000000  0.0000000              0
lot_area         0.13686214 0.00000000  0.0000000              0
year_built       0.02613050 0.02325850  0.0000000              0
year_remod_add   0.06950923 0.02168222  0.6120953              0</code></pre>
</div>
</div>
<p>Now we can</p>
<ul>
<li>transform the matrix to a tibble like before</li>
<li>filter out zero correlations (to avoid duplicate pairs)</li>
<li>construct pair labels</li>
<li>order pairs by their correlation</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">correlations <span class="ot" style="color: #003B4F;">&lt;-</span> triangle_correlations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">as_tibble</span>(<span class="at" style="color: #657422;">rownames =</span> <span class="st" style="color: #20794D;">'variable1'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'variable2'</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'correlation'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">abs</span>(correlation) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb8-6">    <span class="at" style="color: #657422;">pair =</span> <span class="fu" style="color: #4758AB;">paste</span>(variable1, variable2, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">' + '</span>),</span>
<span id="cb8-7">    <span class="at" style="color: #657422;">pair =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(pair, correlation)</span>
<span id="cb8-8">  )</span>
<span id="cb8-9">correlations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">print</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 45 × 4
  variable1      variable2    correlation pair                         
  &lt;chr&gt;          &lt;chr&gt;              &lt;dbl&gt; &lt;fct&gt;                        
1 lot_area       lot_frontage      0.137  lot_area + lot_frontage      
2 year_built     lot_frontage      0.0261 year_built + lot_frontage    
3 year_built     lot_area          0.0233 year_built + lot_area        
4 year_remod_add lot_frontage      0.0695 year_remod_add + lot_frontage
5 year_remod_add lot_area          0.0217 year_remod_add + lot_area    
# … with 40 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<p>This is easy to visualize with <code>geom_col()</code>. Notice that I do not use different colors for the bars. That’s because I think that it’s unnecessary in this visual. In the matrix plot, the color gradient served a purpose. Here, this purpose is negligible.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">my_col <span class="ot" style="color: #003B4F;">&lt;-</span> viridisLite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mako</span>(<span class="dv" style="color: #AD0000;">3</span>)[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb10-2">correlations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> correlation, <span class="at" style="color: #657422;">y =</span> pair)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="at" style="color: #657422;">fill =</span> my_col) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Correlation'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="13_alternative_corrplots_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<section id="move-labels-to-bars" class="level3">
<h3 class="anchored" data-anchor-id="move-labels-to-bars">Move labels to bars</h3>
<p>I think there is some room for improvement in the previous plot. For starters, I am not so happy that the reader always has to follow a line from label to bar. That’s why I would move the labels next to the bars. Then, we can also get rid of many grid lines. While we’re at it, let’s make the remaining grid lines lighter.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">nudge_x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.01</span></span>
<span id="cb11-2">text_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">2.5</span></span>
<span id="cb11-3">grid_color <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="st" style="color: #20794D;">'grey80'</span></span>
<span id="cb11-4">text_color <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb11-5"></span>
<span id="cb11-6">correlations  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> pair, <span class="at" style="color: #657422;">x =</span> correlation)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="at" style="color: #657422;">fill =</span> my_col) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb11-10">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">label =</span> pair),</span>
<span id="cb11-11">    <span class="at" style="color: #657422;">size =</span> text_size,</span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;"># Change horizontal justification based on correlation value</span></span>
<span id="cb11-13">    <span class="co" style="color: #5E5E5E;"># This moves labels to left or right of the bars</span></span>
<span id="cb11-14">    <span class="at" style="color: #657422;">hjust =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>correlation <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;"># Same trick just for moving the labels a tiny bit</span></span>
<span id="cb11-16">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>correlation <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="sc" style="color: #5E5E5E;">-</span>nudge_x, nudge_x)</span>
<span id="cb11-17">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-18">  <span class="fu" style="color: #4758AB;">scale_y_discrete</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-19">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Correlation'</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-20">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-21">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb11-22">    <span class="at" style="color: #657422;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">color =</span> grid_color)</span>
<span id="cb11-23">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="13_alternative_corrplots_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="use-lollipops-to-visualize-correlation-matrices" class="level2">
<h2 class="anchored" data-anchor-id="use-lollipops-to-visualize-correlation-matrices">Use lollipops to visualize correlation matrices</h2>
<p>Bar charts use quite a lot of ink. And I think in this case we can do with a little bit less ink. Instead of <code>geom_col()</code>, let us use <code>geom_seqment()</code> and <code>geom_point()</code>. That’s how you build a lollipop chart!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">segment_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.75</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">correlations  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> pair, <span class="at" style="color: #657422;">x =</span> correlation)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">col =</span> my_col) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">yend =</span> pair), <span class="at" style="color: #657422;">col =</span> my_col, <span class="at" style="color: #657422;">size =</span> segment_size) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">label =</span> pair),</span>
<span id="cb12-9">    <span class="at" style="color: #657422;">size =</span> text_size,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;">hjust =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>correlation <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb12-11">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>correlation <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="sc" style="color: #5E5E5E;">-</span>nudge_x, nudge_x)</span>
<span id="cb12-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-13">  <span class="fu" style="color: #4758AB;">scale_y_discrete</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-14">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Correlation'</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-16">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb12-17">    <span class="at" style="color: #657422;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">color =</span> grid_color)</span>
<span id="cb12-18">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="13_alternative_corrplots_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<section id="highlight-specific-variable-pairs" class="level3">
<h3 class="anchored" data-anchor-id="highlight-specific-variable-pairs">Highlight specific variable pairs</h3>
<p>Finally, let me give one more reason why I didn’t use a color gradient so far. That’s because I can now highlight <strong>selected</strong> variable pairs.</p>
<p>I think the text labels clutter the image quite a lot. If we need to show all the variables this cannot be avoided. But what if we only care about certain variables or certain relationships? Then, we can highlight these and grey out everything else.</p>
<p>For demo purposes, I have randomly sampled a few variable pairs. Let’s highlight these.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">highlight <span class="ot" style="color: #003B4F;">&lt;-</span> correlations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">slice_sample</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">pull</span>(pair)</span>
<span id="cb13-4"></span>
<span id="cb13-5">highlight_color <span class="ot" style="color: #003B4F;">&lt;-</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">6</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb13-6">unhighlight_color <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">correlations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> pair, <span class="at" style="color: #657422;">x =</span> correlation)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb13-11">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>pair <span class="sc" style="color: #5E5E5E;">%in%</span> highlight, highlight_color, my_col)</span>
<span id="cb13-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb13-14">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">yend =</span> pair), </span>
<span id="cb13-15">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>pair <span class="sc" style="color: #5E5E5E;">%in%</span> highlight, highlight_color, my_col),</span>
<span id="cb13-16">    <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>pair <span class="sc" style="color: #5E5E5E;">%in%</span> highlight, segment_size <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.3</span>, segment_size)</span>
<span id="cb13-17">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-18">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb13-19">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">label =</span> pair),</span>
<span id="cb13-20">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>pair <span class="sc" style="color: #5E5E5E;">%in%</span> highlight, highlight_color, unhighlight_color),</span>
<span id="cb13-21">    <span class="at" style="color: #657422;">fontface =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>pair <span class="sc" style="color: #5E5E5E;">%in%</span> highlight, <span class="st" style="color: #20794D;">'bold'</span>, <span class="st" style="color: #20794D;">'plain'</span>),</span>
<span id="cb13-22">    <span class="at" style="color: #657422;">hjust =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>correlation <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb13-23">    <span class="at" style="color: #657422;">nudge_x =</span> <span class="fu" style="color: #4758AB;">if_else</span>(correlations<span class="sc" style="color: #5E5E5E;">$</span>correlation <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="sc" style="color: #5E5E5E;">-</span>nudge_x, nudge_x),</span>
<span id="cb13-24">    <span class="at" style="color: #657422;">size =</span> text_size</span>
<span id="cb13-25">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-26">  <span class="fu" style="color: #4758AB;">scale_y_discrete</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-27">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Correlation'</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-28">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-29">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb13-30">    <span class="at" style="color: #657422;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">color =</span> grid_color)</span>
<span id="cb13-31">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="13_alternative_corrplots_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>I like to think that the last plot is a neat way to visualize correlations. What do you think? Feel free to let me know in the comments.</p>
<p>Also, if you have any questions, let me know via mail or in the comments. And don’t forget to stay in touch via my <a href="https://alberts-newsletter.beehiiv.com/subscribe">Newsletter</a>, <a href="https://twitter.com/rappa753">Twitter</a> or my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/13_alternative_corrplots/13_alternative_corrplots.html</guid>
  <pubDate>Sun, 31 Jul 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>5 hidden gems from gg-packages to level up your dataviz game</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>There are incredibly many gg-packages that extend the power of <code>{ggplot2}</code>. Many of these packages fulfill specific purposes. And to achieve their goals, most packages contain helper functions that act in the background. Thus, the helpers get no spotlight. This is unfortunate because some of them are superb.</p>
<p>That’s why we’ll do things differently today! Today is about those amazing helper functions that deserve to be in the spotlight. I call these functions hidden gems. Let’s go!</p>
<section id="bump-charts" class="level2">
<h2 class="anchored" data-anchor-id="bump-charts">Bump charts</h2>
<p>The <code>{ggbump}</code> package is designed to create bump charts (bump is a funny sound. Try saying it). This type of chart is especially useful to show rankings over time. On Twitter, you can find many of these. Here’s one from Stephan Teodosescu.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
For week 28 of <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> I looked at flights ✈️ by country in Europe. <br><br>I wanted to use the patchwork package to combine a plot of the top ranked European countries (inspired by <a href="https://twitter.com/rappa753?ref_src=twsrc%5Etfw"><span class="citation" data-cites="rappa753">@rappa753</span></a>'s viz) and seasonality of flights. <br><br>Code: <a href="https://t.co/FRkq39YMm5">https://t.co/FRkq39YMm5</a><br><br> <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> <a href="https://t.co/zHErTk0lwd">pic.twitter.com/zHErTk0lwd</a>
</p>
— Stephan Teodosescu (<span class="citation" data-cites="steodosescu">@steodosescu</span>) <a href="https://twitter.com/steodosescu/status/1549065989630832642?ref_src=twsrc%5Etfw">July 18, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>If you <a href="https://github.com/steodose/Tidy-Tuesday/blob/master/Week%2028_2022.R">take a look at Stephan’s code</a>, you will notice that it uses <code>{ggbump}</code>. And if you look even closer, you will notice that most of the heavy lifting (after computing the ranking) is done by <code>geom_bump()</code>. So, <code>geom_bump()</code> is the star of this package. And it’s really easy to use. Here’s an example from its <a href="https://www.rdocumentation.org/packages/ggbump/versions/0.1.0/topics/geom_bump">docs</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">country =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;">"India"</span>, <span class="st" style="color: #20794D;">"India"</span>, <span class="st" style="color: #20794D;">"India"</span>,</span>
<span id="cb1-4">  <span class="st" style="color: #20794D;">"Sweden"</span>, <span class="st" style="color: #20794D;">"Sweden"</span>, <span class="st" style="color: #20794D;">"Sweden"</span>,</span>
<span id="cb1-5">  <span class="st" style="color: #20794D;">"Germany"</span>, <span class="st" style="color: #20794D;">"Germany"</span>, <span class="st" style="color: #20794D;">"Germany"</span>,</span>
<span id="cb1-6">  <span class="st" style="color: #20794D;">"Finland"</span>, <span class="st" style="color: #20794D;">"Finland"</span>, <span class="st" style="color: #20794D;">"Finland"</span>),</span>
<span id="cb1-7"><span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2011</span>, <span class="dv" style="color: #AD0000;">2012</span>, <span class="dv" style="color: #AD0000;">2013</span>,</span>
<span id="cb1-8"><span class="dv" style="color: #AD0000;">2011</span>, <span class="dv" style="color: #AD0000;">2012</span>, <span class="dv" style="color: #AD0000;">2013</span>,</span>
<span id="cb1-9"><span class="dv" style="color: #AD0000;">2011</span>, <span class="dv" style="color: #AD0000;">2012</span>, <span class="dv" style="color: #AD0000;">2013</span>,</span>
<span id="cb1-10"><span class="dv" style="color: #AD0000;">2011</span>, <span class="dv" style="color: #AD0000;">2012</span>, <span class="dv" style="color: #AD0000;">2013</span>),</span>
<span id="cb1-11"><span class="at" style="color: #657422;">rank =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># USE THE DEV VERSION FROM GITHUB</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># INSTALL WITH devtools::install_github("davidsjoberg/ggbump")</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;">ggplot</span>(df, <span class="fu" style="color: #4758AB;">aes</span>(year, rank, <span class="at" style="color: #657422;">color =</span> country)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-17">  ggbump<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_bump</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-2-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Bonus for bump charts: You can spice up your visual with images. Leverage <code>{ggflags}</code> to plot flags instead of points. Here’s an example of that (with code in thread) from Rosie Griffiths.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Finally got around to doing my first <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> <br>📊✈️<a href="https://twitter.com/hashtag/RStats?src=hash&amp;ref_src=twsrc%5Etfw">#RStats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> <a href="https://twitter.com/hashtag/ggplot?src=hash&amp;ref_src=twsrc%5Etfw">#ggplot</a> <a href="https://twitter.com/hashtag/Datavisualization?src=hash&amp;ref_src=twsrc%5Etfw">#Datavisualization</a> <a href="https://t.co/UIHvmlgHeB">pic.twitter.com/UIHvmlgHeB</a>
</p>
— Dr.&nbsp;Rosie Griffiths (<span class="citation" data-cites="Rosie_Griffiths">@Rosie_Griffiths</span>) <a href="https://twitter.com/Rosie_Griffiths/status/1549722543984107527?ref_src=twsrc%5Etfw">July 20, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>But let’s not waste any more time talking about the star of the package. Today is about the underrated helpers. In this case, that award goes to <code>geom_sigmoid()</code>.</p>
<p>This function gives you the bumps of the bump charts. And their smoothness looks oddly satisfying. Check out how Georgios Karamanis used them for a stunning visual.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
For this week's <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> I plotted the arrivals to Greek airports in 2022 compared to 2019. <br><br>code: <a href="https://t.co/84f65QoFZW">https://t.co/84f65QoFZW</a><a href="https://twitter.com/hashtag/Rstats?src=hash&amp;ref_src=twsrc%5Etfw">#Rstats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> <a href="https://t.co/BCWJC1YT6N">pic.twitter.com/BCWJC1YT6N</a>
</p>
— Georgios Karamanis (<span class="citation" data-cites="geokaramanis">@geokaramanis</span>) <a href="https://twitter.com/geokaramanis/status/1547916608118480896?ref_src=twsrc%5Etfw">July 15, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>So this function packs a punch on its own. That’s hidden gem material right there. But wait! There is more.</p>
<p>Digging down even further, notice that <code>geom_sigmoid()</code> uses another helper called <code>sigmoid()</code>. This is the exact same function that I used to build a ribbon bump chart. You may have seen it on Twitter.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
As always, there's a <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> package for every occasion.<br><br>🔀 With {ggbump}, bump charts (for rankings) are easily created. <br>👷🏽 With a little bit of work, one can transform them to ribbon bump charts.<br><br>Here's a demo for this week's <a href="https://twitter.com/hashtag/tidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#tidyTuesday</a>.<br><br>Code: <a href="https://t.co/PTDbhq2rbH">https://t.co/PTDbhq2rbH</a> <a href="https://t.co/PBgkWvjC4S">pic.twitter.com/PBgkWvjC4S</a>
</p>
— Albert Rapp (<span class="citation" data-cites="rappa753">@rappa753</span>) <a href="https://twitter.com/rappa753/status/1548335653909250048?ref_src=twsrc%5Etfw">July 16, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>The crucial part in this visual’s <a href="https://github.com/AlbertRapp/PublicTidyTuesday/blob/main/2022_w28_euroflights/2022_w28_euroflights.qmd">code</a> has been computing the points of the the sigmoidal curves between rectangles. After that, it’s a piece of cake. Good ol’ <code>geom_ribbon()</code> can handle the rest for us.</p>
<p>To compute the points, <code>sigmoid()</code> was invaluable. All it needs are the start and end coordinates via <code>x_from</code>, <code>x_to</code>, <code>y_from</code> and <code>y_to</code>. Here’s the crucial step in my code (line 8). Note that I have used a bit of <a href="../09_functional_programming_ggplot/09_functional_programming_ggplot.html">functional programming magic</a> to compute the curves for each year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb2-1">lower_bounds <span class="ot" style="color: #003B4F;">&lt;-</span> state_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;">select</span>(year, percentage_flights_lower) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-4">      <span class="do" style="color: #5E5E5E;
font-style: italic;">## Coordinates of left resp. right corner of rectangles</span></span>
<span id="cb2-5">      <span class="at" style="color: #657422;">x_from =</span> year <span class="sc" style="color: #5E5E5E;">+</span> bar_width, </span>
<span id="cb2-6">      <span class="at" style="color: #657422;">x_to =</span> year <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> bar_width,</span>
<span id="cb2-7">      <span class="at" style="color: #657422;">y_from =</span> percentage_flights_lower <span class="sc" style="color: #5E5E5E;">+</span> margin_between_ribbons,</span>
<span id="cb2-8">      <span class="at" style="color: #657422;">y_to =</span> <span class="fu" style="color: #4758AB;">c</span>(percentage_flights_lower[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], percentage_flights_lower[<span class="dv" style="color: #AD0000;">7</span>]) <span class="sc" style="color: #5E5E5E;">+</span> margin_between_ribbons,</span>
<span id="cb2-9">      <span class="do" style="color: #5E5E5E;
font-style: italic;">## Compute sigmoidal function for each year</span></span>
<span id="cb2-10">      <span class="at" style="color: #657422;">sigmoid =</span> <span class="fu" style="color: #4758AB;">pmap</span>(<span class="fu" style="color: #4758AB;">list</span>(x_from, x_to, y_from, y_to), sigmoid, <span class="at" style="color: #657422;">n =</span> n_points, <span class="at" style="color: #657422;">smooth =</span> <span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb2-11">    ) </span></code></pre></div>
</div>
</section>
<section id="chicklet-charts" class="level2">
<h2 class="anchored" data-anchor-id="chicklet-charts">Chicklet charts</h2>
<p>Another great package is <code>{ggchicklet}</code>. Its main purpose is to generate chicklet charts. You can think of them as stacked rounded bar charts. Here’s a great example from Dan Oehm.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
<a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> week 29: Technology 👨‍💻<br><br>A lot of things to look at regarding technology adoption. Chose to take a quick look at Aus electricity production by type. Our reliance on fossil fuels is embarrassing but hopeful with the new govt…<a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> <a href="https://twitter.com/hashtag/DataVisualization?src=hash&amp;ref_src=twsrc%5Etfw">#DataVisualization</a> <a href="https://t.co/x5YcCOP2Yr">pic.twitter.com/x5YcCOP2Yr</a>
</p>
— Dan Oehm 🌲⛰️ (<span class="citation" data-cites="danoehm">@danoehm</span>) <a href="https://twitter.com/danoehm/status/1550412816795914240?ref_src=twsrc%5Etfw">July 22, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>But this is not the only great thing <code>{ggchicklet}</code> can do. Otherwise, why would we talk about it here? With <code>{ggchicklet}</code> you can also generate arbitrary rounded rectangles (not necessarily stacked ones). You just need to access <code>ggchicklet:::geom_rrect()</code> (three dots! This is really HIDDEN).</p>
<p>It works just like <code>ggplot2::geom_rect()</code> but add another aesthetic to include the radius <code>r</code> of the corners. You can find an in-depth explanation in <a href="../11_rounded_rectangles/11_rounded_rectangles.html">one of my old blog posts</a>. Or you can find a summary in the following thread.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
By itself, a standard <a href="https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw">#ggplot2</a> output can rarely convince anyone. <br><br>You need a story to communicate your message. And for effective storytelling, your plot has to be customized.<br><br>My newest blog post shows you how. <br><br>Find it at <a href="https://t.co/y32vlY3YMh">https://t.co/y32vlY3YMh</a><a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> 🧵🧵⬇️ <a href="https://t.co/roE17jN3gZ">pic.twitter.com/roE17jN3gZ</a>
</p>
— Albert Rapp (<span class="citation" data-cites="rappa753">@rappa753</span>) <a href="https://twitter.com/rappa753/status/1521882038688694277?ref_src=twsrc%5Etfw">May 4, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</section>
<section id="camcorder" class="level2">
<h2 class="anchored" data-anchor-id="camcorder">Camcorder</h2>
<p>Originally, <a href="https://github.com/thebioengineer/camcorder"><code>{camcorder}</code></a> is intended to be used for recording a data viz process. Basically, you can record all of your intermediate plots with <code>camcorder::gg_record()</code>. Afterwards, you can you can generate a gif from these recordings (also an in-built feature). For example, you can find a gif on the creation Georgios Karamanis’ earlier plot <a href="https://twitter.com/geokaramanis/status/1548900174432460801">on Twitter</a>.</p>
<p>So, this is the main purpose of <code>{camcorder}</code>. But the reason I list this package here is because it can be used off-label. I use <code>{camcorder}</code> for ALL my visualizations. But I rarely use it to build a gif.</p>
<p>In my opinion, the REAL advantage of using <code>camcorder::gg_record()</code> is that it fixes your canvas size. This mean that whenever you generate a plot, it is saved as a png-file with predetermined dimensions and the resulting file is displayed in the <strong>Viewer</strong> window in RStudio (not the <strong>Plots</strong> window).</p>
<p>Why is this helpful? Well, if you have ever created a custom plot and exported it with <code>ggsave()</code>, then you already know what can go wrong. Suddenly, all of your sizes can be wrong and your plot can look like a mess.</p>
<p>That’s because you usually hard-code sizes, e.g.&nbsp;<code>14pt</code>. But <code>pt</code> is not a relative unit! So it will hardly give a f***, whether you export a 10x10-image or a 20x20-image. If you fix <code>14pt</code> you will get that. Regardless of canvas size. For more information on the theory behind that take a look at <a href="https://www.christophenicault.com/post/understand_size_dimension_ggplot2/">Christiphe Nicault’s blog post</a>.</p>
<p>The solution is to start with a fixed canvas size. Only then can you safely hard-code. That’s why at the start of working of every visualization I call something like</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">camcorder<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gg_record</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;">dir =</span> <span class="st" style="color: #20794D;">'img'</span>, <span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>, <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">units =</span> <span class="st" style="color: #20794D;">'cm'</span></span>
<span id="cb3-3">)</span></code></pre></div>
</div>
<p>This will save all plots that I generate in a directory called <code>dir</code>. I can still resize my picture afterwards. But this is easier to do than guessing “good” dimensions with <code>ggsave()</code>.</p>
<p>Beware though that some packages like <code>{patchwork}</code> or <code>{ggtext}</code> can mess with <code>{camcorder}</code>. So, be sure to call <code>gg_record()</code> <strong>after</strong> you have imported them. Alternatively, just call <code>gg_record()</code> again if you add one the these packages only later. Finally, if you want to use <code>{camcorder}</code> in conjunction with <code>{showtext}</code>, then be sure to let <code>{showtext}</code> know what dpi value you chose when calling <code>gg_record()</code>. This can be done via</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">showtext<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">showtext_opts</span>(<span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>)</span></code></pre></div>
</div>
<p>Otherwise, your texts may look weird.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Note to self and that one person that was asking about weird text spacing last <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> (really couldn't find your tweet anymore).<br><br>Same problem just hit me and I solved it by setting the showtext dpi properly to e.g 300 with<br><br>showtext_opts(dpi = 300)<br><br>Some ressources below⬇️ <a href="https://t.co/64OmubG09j">pic.twitter.com/64OmubG09j</a>
</p>
— Albert Rapp (<span class="citation" data-cites="rappa753">@rappa753</span>) <a href="https://twitter.com/rappa753/status/1501230840655003650?ref_src=twsrc%5Etfw">March 8, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</section>
<section id="arc-bars" class="level2">
<h2 class="anchored" data-anchor-id="arc-bars">Arc bars</h2>
<p><code>{ggforce}</code> includes a great deal of functions for data visualization. In fact, that’s why I’ve already displayed some of them in a <a href="../05_ggforce_examples/05_ggforce_examples.html">previous blog post</a>. Many of these functions don’t follow a specific theme and that’s why it’s hard to keep track of them.</p>
<p>In an effort to help my memory, let me teach you one function from <code>{ggforce}</code> I wish I had known a couple of weeks ago. Maybe you have seen the gauge plot I have created recently. Here’s a reminder for you.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
I used the <a href="https://twitter.com/hashtag/tidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#tidyTuesday</a> pay gap data from last week to practice<br><br>1 building gauge charts with <a href="https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw">#ggplot2</a> manually <br>2 adding a custom how-to-read legend with patchwork<br><br>Code : <a href="https://t.co/4dkXbOWYoz">https://t.co/4dkXbOWYoz</a><a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://t.co/7ZkpzmtgLz">pic.twitter.com/7ZkpzmtgLz</a>
</p>
— Albert Rapp (<span class="citation" data-cites="rappa753">@rappa753</span>) <a href="https://twitter.com/rappa753/status/1544663149760110592?ref_src=twsrc%5Etfw">July 6, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Drawing these gauges was painful. I did everything by hand, i.e.&nbsp;I computed the circles’ coordinates via <a href="https://en.wikipedia.org/wiki/Polar_coordinate_system#Converting_between_polar_and_Cartesian_coordinates">Polar coordinates</a>. In hindsight, this was waaaay too much effort.</p>
<p>Just two weeks later, Nicola Rennie also built a gauge plot. But she was clever. She used <code>geom_arc_bar()</code> from <code>{ggforce}</code>. Here’s her tweet.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Data from <a href="https://twitter.com/nberpubs?ref_src=twsrc%5Etfw"><span class="citation" data-cites="nberpubs">@nberpubs</span></a> for <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> this week! I looked at changes in measles immunisations rates between 1980 and 2010. Used {ggforce} for some experimental double gauge plots!<br><br>Code: <a href="https://t.co/92H6g0iF0J">https://t.co/92H6g0iF0J</a><a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://twitter.com/hashtag/DataViz?src=hash&amp;ref_src=twsrc%5Etfw">#DataViz</a> <a href="https://t.co/fqC4kJbkUT">pic.twitter.com/fqC4kJbkUT</a>
</p>
— Nicola Rennie (<span class="citation" data-cites="nrennie35">@nrennie35</span>) <a href="https://twitter.com/nrennie35/status/1549438413794861064?ref_src=twsrc%5Etfw">July 19, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>With <code>geom_arc_bar()</code>, it is easy to draw any curved bar. God forbid, you can even create a pie chart (see also <a href="https://alberts-newsletter.beehiiv.com/p/truthful-tidytuesday-contributions">Are food plots always foul?</a>). Check out the cool examples from the <a href="https://ggforce.data-imaginist.com/reference/geom_arc_bar.html">docs</a>.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Hard edges</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Rounded edges</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Pie example</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">arcs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;">start =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> pi, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">11</span>)[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">11</span>],</span>
<span id="cb5-3">  <span class="at" style="color: #657422;">end =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> pi, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">11</span>)[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb5-4">  <span class="at" style="color: #657422;">r =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"># Behold the arcs</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;">ggplot</span>(arcs) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">  ggforce<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_arc_bar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x0 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">y0 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">r0 =</span> r <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">r =</span> r, <span class="at" style="color: #657422;">start =</span> start,</span>
<span id="cb5-10">                   <span class="at" style="color: #657422;">end =</span> end, <span class="at" style="color: #657422;">fill =</span> r))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># geom_arc_bar uses geom_shape to draw the arcs, so you have all the</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;"># possibilities of that as well, e.g. rounding of corners</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">ggplot</span>(arcs) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-4">  ggforce<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_arc_bar</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x0 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">y0 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">r0 =</span> r <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">r =</span> r, <span class="at" style="color: #657422;">start =</span> start,</span>
<span id="cb6-5">                   <span class="at" style="color: #657422;">end =</span> end, <span class="at" style="color: #657422;">fill =</span> r), <span class="at" style="color: #657422;">radius =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="st" style="color: #20794D;">'mm'</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># If you got values for a pie chart, use stat_pie</span></span>
<span id="cb7-2">states <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb7-3">  <span class="st" style="color: #20794D;">'eaten'</span>, <span class="st" style="color: #20794D;">"eaten but said you didn</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">t"</span>, <span class="st" style="color: #20794D;">'cat took it'</span>, <span class="st" style="color: #20794D;">'for tonight'</span>,</span>
<span id="cb7-4">  <span class="st" style="color: #20794D;">'will decompose slowly'</span></span>
<span id="cb7-5">)</span>
<span id="cb7-6">pie <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb7-7">  <span class="at" style="color: #657422;">state =</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">rep</span>(states, <span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">levels =</span> states),</span>
<span id="cb7-8">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Pie'</span>, <span class="st" style="color: #20794D;">'Donut'</span>), <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb7-9">  <span class="at" style="color: #657422;">r0 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.8</span>), <span class="at" style="color: #657422;">each =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb7-10">  <span class="at" style="color: #657422;">focus =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>), <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb7-11">  <span class="at" style="color: #657422;">amount =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1.5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb7-12">  <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb7-13">)</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;"># Look at the cakes</span></span>
<span id="cb7-16"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-17">  ggforce<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_arc_bar</span>(</span>
<span id="cb7-18">    <span class="at" style="color: #657422;">data =</span> pie, <span class="at" style="color: #657422;">stat =</span> <span class="st" style="color: #20794D;">'pie'</span>,</span>
<span id="cb7-19">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb7-20">      <span class="at" style="color: #657422;">x0 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">y0 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">r0 =</span> r0, <span class="at" style="color: #657422;">r =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">amount =</span> amount,</span>
<span id="cb7-21">      <span class="at" style="color: #657422;">fill =</span> state, <span class="at" style="color: #657422;">explode =</span> focus</span>
<span id="cb7-22">    )</span>
<span id="cb7-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-24">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>type, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-25">  <span class="fu" style="color: #4758AB;">coord_fixed</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-26">  ggforce<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">theme_no_axes</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-27">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="st" style="color: #20794D;">''</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'qual'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="patchwork" class="level2">
<h2 class="anchored" data-anchor-id="patchwork">Patchwork</h2>
<p>I have no doubt that you have already heard about <code>{patchwork}</code>. This package makes compositing plots super easy. If you haven’t heard about <code>{patchwork}</code>, here’s a super quick demo. Alternatively, you can check out my <a href="../04_arranging_plots/04_arranging_plots.html">blog post about it</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb8-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(mpg) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="fu" style="color: #4758AB;">aes</span>(cty, hwy))</span>
<span id="cb8-3">p <span class="sc" style="color: #5E5E5E;">+</span> p <span class="co" style="color: #5E5E5E;"># Add for side-by-side</span></span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="sc" style="color: #5E5E5E;">/</span> p <span class="co" style="color: #5E5E5E;"># Divide for stacking</span></span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-9-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-9-2.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Of course, there’s more to <code>{patchwork}</code> than that. Let me show you one more overlooked function. This function is called <code>plot_spacer()</code>. It’s great when you need <code>w h i t e   s p a c e</code>.</p>
<p>There’s really no need to cover every inch of your plot with ink. Actually, white space can give your visuals some room to breathe in. And that can make your visual so much more powerful. Try that next time you use assemble plots with <code>{patchwork}</code>. Here’s how <code>plot_spacer()</code> works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_spacer</span>() <span class="sc" style="color: #5E5E5E;">+</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.4</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="12_a_few_gg_packages_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>Alright, this concludes our short tour of hidden gems. I hope you liked them. Of course, the gg-ecosystem offers SO MUCH more. To find more packages, you can check out the <a href="https://exts.ggplot2.tidyverse.org/gallery/">extension library</a>.</p>
<p>If you have any questions, let me know via mail or in the comments. And don’t forget to stay in touch via my <a href="https://alberts-newsletter.beehiiv.com/subscribe">Newsletter</a>, <a href="https://twitter.com/rappa753">Twitter</a> or my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages.html</guid>
  <pubDate>Tue, 26 Jul 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>The ultimate guide to starting a Quarto blog</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>Blogging is great for many reasons. And with <a href="https://quarto.org/">Quarto</a>, blogging has never been easier. Within a few clicks, you can create your own Quarto blog. And the best part is: With Quarto you can customize basically everything according to your wishes.</p>
<p>Today, I want to show you how to build a blog with Quarto. This in-depth guide is the result of hours of working with Quarto’s amazingly detailed <a href="https://quarto.org/docs/reference/">documentation</a>. Hopefully, it will save you a lot of time and helps you start your own blog. Here’s what we will cover:</p>
<ol type="1">
<li><strong>Three reasons for starting a blog</strong></li>
<li><strong>How to initialize your Quarto blog</strong></li>
<li><strong>Create your own series</strong></li>
<li><strong>Let your readers interact with you</strong></li>
<li><strong>Make your blog unique with your own theme</strong></li>
<li><strong>Build a custom landing page</strong></li>
<li><strong>Make your posts ROBUST with <code>{renv}</code></strong></li>
<li><strong>Cookies, Google analytics, Quarto extensions and other miscellaneous topics</strong></li>
<li><strong>Publish your blog</strong></li>
<li><strong>Writing tips</strong></li>
</ol>
<p>Notice that this is a lot. I don’t want to brag. But this is <strong>a lot</strong>. Do yourself a favor and skip the time-intensive steps if you’re just starting out with your blog.</p>
<p>In the beginning, the most important thing is to <strong>write regularly</strong>. This is WAAAAY more important than, say, using many fancy colors in your blog. At first, you can just go with a pre-defined theme and a standard landing page.</p>
<p>Really, I cannot stress this enough: If you want to start a blog, start writing regularly first. Worry about your design later. The only way I could stress this more would be to say it <a href="https://youtu.be/fc6GiXos4U8?t=168">in Spanish</a>.</p>
<p>And if you’re not sure what steps you can skip from my detailed guide, <a href="https://twitter.com/BeaMilz">Beatriz Milz</a> got you covered. In <a href="https://beamilz.com/posts/2022-06-05-creating-a-blog-with-quarto/en/">one of her blog posts</a> she shows you how to get started with your Quarto blog in 10 steps. So, you can always start with her intro to get started quickly and then successively add parts from my guide.</p>
<p>Alright, enough chit-chat. Let’s dive in.</p>
<section id="three-reasons-for-starting-a-blog" class="level2">
<h2 class="anchored" data-anchor-id="three-reasons-for-starting-a-blog">Three reasons for starting a blog</h2>
<p>In case it is not self-evident of why you should start a blog, let me give you a few good reasons.</p>
<ul>
<li><p><strong>Learning:</strong> Writing acts as a safeguard from shallow understanding. I cannot count how many time I erroneously thought I’ve understood something. But working on a blog post often showed me that my first “understanding” was wrong. That’s why writing is such an effective tool for learning.</p></li>
<li><p><strong>Helping others:</strong> When you share your learnings, you will eventually help people who are struggling with similar problems. Don’t worry if you’re not an expert. Usually, people don’t enjoy learning from experts.<br>
Rather. people like to learn from other learners who are just a few steps ahead. That’s because experts tend to leave out details that are “obvious”. Yet, some things are only obvious once you are an expert.</p></li>
<li><p><strong>Portfolio and job opportunities:</strong> If you publish content on the internet, you can always show people what you’ve created. This is great for demonstrating your skills (e.g.&nbsp;when applying for a job). Also, from personal experience I can tell you: Writing in the open can lead to job opportunities. You never know who ends up reading your blog and wants to work with you.</p></li>
</ul>
</section>
<section id="initialize-your-blog" class="level2">
<h2 class="anchored" data-anchor-id="initialize-your-blog">Initialize your blog</h2>
<p>Once you have <a href="https://quarto.org/docs/get-started/">installed Quarto</a>, it is dead-simple to start a blog. If you don’t use RStudio, you’ll have to call</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">quarto</span> create-project myblog <span class="at" style="color: #657422;">--type</span> website:blog</span></code></pre></div>
<p>from the command line. In RStudio, you’ll have to click on the “new project”-button and the menu will let you create a new Quarto blog.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-73EA840D.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Click on ‘Quarto Blog’ to start a new blog project"><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-73EA840D.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Click on ‘Quarto Blog’ to start a new blog project</figcaption><p></p>
</figure>
</div>
<p>You should also create a git repo for your blog project (RStudio will ask you if you want that). This lets you revert changes when you break your blog. And after answering all of RStudio’s prompts, you can render your blog with <code>Render Website</code> from RStudio’s <code>Build</code> tab.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-0E83F78C.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="This is what the default blog looks like."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-0E83F78C.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">This is what the default blog looks like.</figcaption><p></p>
</figure>
</div>
<section id="first-simple-changes" class="level3">
<h3 class="anchored" data-anchor-id="first-simple-changes">First simple changes</h3>
<p>First, let us make the about page into a landing page. Use it to introduce your blog to your readers instead of flooding them with a list of blog posts. To do so, rename two files:</p>
<ol type="1">
<li>Rename <code>index.qmd</code> to <code>blog.qmd</code></li>
<li>Rename <code>about.qmd</code> to <code>index.qmd</code></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-A0440BBB.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Your previous about.qmd file becomes your landing page now. The navbar doesn’t look right. We’ll change that next."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-A0440BBB.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Your previous about.qmd file becomes your landing page now. The navbar doesn’t look right. We’ll change that next.</figcaption><p></p>
</figure>
</div>
<p>The next easy changes happen in the <code>_quarto.yml</code> file. There, we will mostly change some general info about our blog and stuff in the navbar. Most of the steps are self-explanatory that’s why I only list the steps I think are necessary.</p>
<ol type="1">
<li>Name your blog via <code>website</code> &gt; <code>title</code></li>
<li>Set a <code>site-url</code> for your blog (this is important for RSS feeds later. If you don’t have a URL yet, you can skip this step for now).</li>
<li>Add a description</li>
<li>Change reference of <code>about.qmd</code> and link to <code>blog.qmd</code></li>
<li>Link your GitHub profile etc.</li>
<li>Set <code>theme: theme.scss</code>. This will be used for custom styling later. But you can also set <code>theme</code> to <a href="https://quarto.org/docs/output-formats/html-themes.html">one of Quarto’s pre-defined themes</a>.</li>
</ol>
<p>You can also take a look at my <code>_quarto.yml</code> file:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;">project</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> website</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">website</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Albert Rapp"</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb2-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">site-url</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://albert-rapp.de</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"This is Albert Rapp's personal Blog."</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">navbar</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">right</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Blog</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> blog.qmd </span></span>
<span id="cb2-12"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">icon</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> github</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://github.com/AlbertRapp</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">icon</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> twitter</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://twitter.com/rappa753</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">icon</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> youtube</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://www.youtube.com/user/Alfrodo123</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;">#########################</span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;"># You can ignore this part in the first step</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">icon</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> rss</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> blog.xml</span></span>
<span id="cb2-22"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Ressources</span></span>
<span id="cb2-23"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">menu</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb2-24"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> DataViz Portfolio</span></span>
<span id="cb2-25"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> dataviz_portfolio.html</span></span>
<span id="cb2-26"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> YARDS</span></span>
<span id="cb2-27"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://yards.albert-rapp.de/</span></span>
<span id="cb2-28"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> R Weekly</span></span>
<span id="cb2-29"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://rweekly.org/</span></span>
<span id="cb2-30"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> R Bloggers</span></span>
<span id="cb2-31"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://www.r-bloggers.com/</span></span>
<span id="cb2-32"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">text</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Archive</span></span>
<span id="cb2-33"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">href</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> archive.qmd</span></span>
<span id="cb2-34"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">google-analytics</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> &lt;Insert your ID here&gt;</span></span>
<span id="cb2-35"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">cookie-consent</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb2-36"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">twitter-card</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb2-37"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> thumbnail_blog.png</span></span>
<span id="cb2-38"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">card-style</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> summary_large_image</span></span>
<span id="cb2-39"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">creator</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"@rappa753"</span></span>
<span id="cb2-40"></span>
<span id="cb2-41"><span class="fu" style="color: #4758AB;">filters</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-42"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> code-filename</span></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;">######################### </span></span>
<span id="cb2-44"></span>
<span id="cb2-45"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-46"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb2-47"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> theme.scss</span></span></code></pre></div>
</div>
</section>
<section id="create-your-first-blog-post" class="level3">
<h3 class="anchored" data-anchor-id="create-your-first-blog-post">Create your first blog post</h3>
<p>You can create a new blog post by creating a new <code>.qmd</code>-file in the <code>posts</code> directory. But I recommend that you create a new sub-directory in <code>posts</code> for each new blog post. So, starting a new blog post is just a matter of</p>
<ol type="1">
<li>Creating a new directory, say, <code>posts/new_blog_post</code>.</li>
<li>Create a blank <code>.qmd</code>-file in this new directory, e.g <code>posts/new_blog_post/post.qmd</code>.</li>
<li>For demo purposes, you can now fill the new file’s YAML header with a few basic properties and fill it with a bit of text, code chunks, math parts etc. If you wish, uou can use the <a href="https://github.com/AlbertRapp/quarto_bottomup_blog/blob/master/posts/new/new_post.qmd">dummy file I used</a>.</li>
</ol>
<p>If you’ve followed these steps, you can render your new blog post by clicking <code>Render Website</code> in RStudio’s <code>Build</code> tab. This will render all <code>.qmd</code>-files that have not been rendered before. If you want to make changes to a blog post, then you will have to render the respective <code>.qmd</code>-file manually.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-BE004E13.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="This is the dummy blog post I used to try out new features from Quarto. Later on, I used it to see how new themes look."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-BE004E13.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">This is the dummy blog post I used to try out new features from Quarto. Later on, I used it to see how new themes look.</figcaption><p></p>
</figure>
</div>
</section>
<section id="changing-metadata" class="level3">
<h3 class="anchored" data-anchor-id="changing-metadata">Changing metadata</h3>
<p>In general, it’s good that you don’t have to re-render everything when you write a new post. The <code>posts/_metadata.yml</code> file ensures that. Its main purpose is to set global options for all you blog posts in the <code>posts</code> directory.</p>
<p>By default, this file sets <code>freeze: true</code>. That’s the reason why you have re-render blog posts manually. In <code>_metadata.yml</code>, we can define more YAML options for all blog posts. Most of the changes I applied in this file are self-explanatory. Thus, I leave you with my <code>_metadata.yml</code> file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>posts/_metadata.yml</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="posts/_metadata.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Options specified here will apply to all posts in this folder</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># freeze computational output</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">freeze</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Enable banner style title blocks</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;"># Author name of all blog posts</span></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;">author</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">'Albert Rapp'</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># Table of content settings</span></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;">toc-depth</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> article</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;">#########################</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;"># You can skip this part in the first step</span></span>
<span id="cb3-20"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">include-after-body</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ../footer.html</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="fu" style="color: #4758AB;">comments</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb3-25"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">utterances</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb3-26"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">repo</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;">  AlbertRapp/blogComments </span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;">#########################</span></span></code></pre></div>
</div>
</section>
</section>
<section id="create-your-own-series" class="level2">
<h2 class="anchored" data-anchor-id="create-your-own-series">Create your own series</h2>
<p>Creating a series (like my <a href="../../ggplot-series.html">ggplot2 series</a>) is great because it bundles similar content into one thread. However, we need to understand listing pages before we can create our own series.</p>
<section id="listing-pages-including-rss-feeds" class="level3">
<h3 class="anchored" data-anchor-id="listing-pages-including-rss-feeds">Listing pages (including RSS feeds)</h3>
<p>The file <code>blog.qmd</code> is a listing page. It determines what blog posts will be listed on our <code>Blog</code> page. The important stuff happens in this file’s YAML header. Here’s how my header looks.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>blog.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="blog.qmd" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts/**/*.qmd</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"date desc"</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> default</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">filter-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">fields</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">date</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> title</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> reading-time</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> description</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> categories</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">feed</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb4-11"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> full</span></span>
<span id="cb4-12"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb4-13"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
</div>
<p>Let me briefly describe a few of these options:</p>
<ul>
<li><p><code>contents: posts/**/*.qmd</code> means that all <code>.qmd</code>-files from the <code>posts</code> directory (and sub-directories) will be included in this listing page. If your <code>posts</code> directory will only contain <code>.qmd</code>-files, then you may as well just write <code>contents: posts</code>. In my case, though, some directories contain <code>.md</code>-files that I don’t want to list.</p></li>
<li><p>If you wish, enable sorting &amp; filtering via <code>sort-ui: true</code> and <code>filter-ui: true</code>. The default sorting is set via <code>sort</code>.</p></li>
<li><p>I don’t like the title block banner. So I set the corresponding option to false.</p></li>
<li><p>More importantly, I want to display a post’s reading time instead of the author (I am the only author anyway). By changing the <code>fields</code> options, I can make that happen. In the <a href="https://quarto.org/docs/websites/website-listings.html#listing-fields">Quarto’s docs</a> you can find more options for <code>fields</code>.</p></li>
<li><p><code>feed: true</code> instructs this listing page to generate an RSS-feed. This works only if we have set the <code>site-url</code> in our <code>_quarto.yml</code> file. If we have enabled RSS feeds, then this listing page will generate a feed that will be saved in the file <code>blog.xml</code> (because the generating file is <code>blog.qmd</code>). That’s why I have linked the RSS icon in our <code>_quarto.yml</code> file to <code>blog.xml</code>.</p></li>
</ul>
</section>
<section id="creating-an-archive" class="level3">
<h3 class="anchored" data-anchor-id="creating-an-archive">Creating an archive</h3>
<p>Now that we understand listing pages we can create more of them. For example, let us create an archive. This is nothing but a listing page that lists all blog posts without a description.</p>
<p>For this archive I have created a new file <code>archive.qmd</code> in my blog’s main directory and filled it as follows. Notice that <code>page-layout: full</code>. This means that there is no additional side margin for the category labels.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>archive.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="archive.qmd" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Archive"</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> full</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts/**/*.qmd</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> default</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">fields</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">date</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> title</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">'date desc'</span></span>
<span id="cb5-9"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
</div>
</section>
<section id="new-sub-directory-for-series" class="level3">
<h3 class="anchored" data-anchor-id="new-sub-directory-for-series">New sub-directory for series</h3>
<p>Finally, we can create new listing pages for blog posts that belong to a series. For this to work, all posts that belong to a series must reside in a single new sub-directory of <code>posts</code>. For my blog, I have created a sub-directory <code>posts/ggplot2-tips</code>. And the corresponding listing page is generated by <code>ggplot-series.qmd</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>ggplot-series.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="ggplot-series.qmd" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Series: ggplot2-tips"</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts/ggplot2-tips</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"date desc"</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> default</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb6-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">filter-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb6-10"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">fields</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">date</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> title</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> reading-time</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> description</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb6-11"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> full</span></span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb6-13"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
</div>
<p>Now, we have to link to our new listing pages somewhere. I chose to link to my archive in the navbar (see <code>_quarto.yml</code>). And my ggplot2 series found a home above the list of all other blog posts. I made this happen by modifying <code>blog.qmd</code> with regular Markdown magic. This could look as follows:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>blog.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="blog.qmd" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts/**/*.qmd</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"date desc"</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> default</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb7-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">filter-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb7-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">fields</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">date</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> title</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> reading-time</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> description</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> categories</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb7-10"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">feed</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> full</span></span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb7-13"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;"># Series</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;">##### [ggplot2-series](ggplot-series.html)</span></span>
<span id="cb7-18"><span class="at" style="color: #657422;">This series contains a great deal of tips, tricks and packages </span></span>
<span id="cb7-19"><span class="at" style="color: #657422;">that you can use to level up your ggplot game.</span></span></code></pre></div>
</div>
<p>In reality, my blog listings page looks a little bit different because I use two columns (<a href="../../blog.html">as you can see for yourself</a>) but we’ll come to that shortly.</p>
</section>
</section>
<section id="interact-with-your-audience" class="level2">
<h2 class="anchored" data-anchor-id="interact-with-your-audience">Interact with your audience</h2>
<p>Did you really publish a blog post if no one reads it? Let’s face it. The best content in the world won’t save you from going unnoticed if readers cannot keep in touch. Luckily, we have already taken the first steps to let your audience connect to you.</p>
<p>For starters, your newly created RSS-feed can notify readers whenever you post something new. Also, you can submit your newly created RSS-feed to feed-aggregators like <a href="https://rweekly.org/">Rweekly</a> or <a href="https://www.r-bloggers.com/">Rbloggers</a>. This will increase your reach in an automated fashion. More importantly, Rweekly and Rbloggers are great places to show your content to the R community.</p>
<section id="comment-sections" class="level3">
<h3 class="anchored" data-anchor-id="comment-sections">Comment sections</h3>
<p>Next, let us add a comment section. This let’s your readers, well, comment on your superb content. My go-to tool for that is <a href="https://utteranc.es/">utterances</a>. As it works via GitHub, you’ll need to create a separate public repo on GitHub. This repo will be home to your blog’s comments. But first, you need to install utterances on your newly created repo. Follow <a href="https://github.com/apps/utterances/installations/new">this link</a> to do so.</p>
<p>Clearly, we want a comment section below every blog post but not below every page (e.g.&nbsp;our landing page). Therefore, a good place to include utterances is in <code>posts/_metadata.yml</code>. You have already seen the code necessary for that earlier. But for your convenience, here it is again.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>posts/_metadata.yml</strong></pre>
</div>
<div class="sourceCode" id="cb8" data-filename="posts/_metadata.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;">comments</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb8-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">utterances</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb8-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">repo</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;">  AlbertRapp/blogComments</span></span></code></pre></div>
</div>
<p>Beware that the RStudio viewer may not display the comments. Open your blog in an external browser to see if everything worked.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-A3799506.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Check that your comment section appears under your blog posts."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-A3799506.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Check that your comment section appears under your blog posts.</figcaption><p></p>
</figure>
</div>
</section>
<section id="newsletter" class="level3">
<h3 class="anchored" data-anchor-id="newsletter">Newsletter</h3>
<p>Another popular way to engage with your readers is via newsletters. The idea is simple:</p>
<ol type="1">
<li>Readers sign up via email</li>
<li>You regularly inform your subscribers about new content. Personally, I also use <a href="https://alberts-newsletter.beehiiv.com/subscribe">my newsletter</a> to share thoughts on topics that interest me (and hopefully my readers).</li>
</ol>
<p>Thankfully, you don’t have to send the mails manually. There are many free providers that can help with the logistics. And most of these services provide HTML snippets for registration too. That’s fantastic because you can place this snippet anywhere you like. In my case, <a href="https://www.beehiiv.com/">Beehiiv</a> provided the following snippet.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb9-1"><span class="kw" style="color: #003B4F;">&lt;iframe</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"beehiiv-form"</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true"</span> <span class="er" style="color: #AD0000;">data-test-id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"beehiiv-embed"</span> <span class="er" style="color: #AD0000;">frameborder</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"0"</span> <span class="er" style="color: #AD0000;">scrolling</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"no"</span> <span class="er" style="color: #AD0000;">style</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px; width: 90%;"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/iframe&gt;</span></span></code></pre></div>
<p>Let’s put it somewhere easy first. Let us use Quarto’s column syntax for this. In case you don’t know it, here’s a demo.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Output</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb10-1">:::: {.columns}</span>
<span id="cb10-2"></span>
<span id="cb10-3"></span>
<span id="cb10-4">::: {.column width="50%"}</span>
<span id="cb10-5">### Column 1</span>
<span id="cb10-6">This is written in column 1</span>
<span id="cb10-7">:::</span>
<span id="cb10-8"></span>
<span id="cb10-9">::: {.column width="50%"}</span>
<span id="cb10-10">### Column 2</span>
<span id="cb10-11">This is written in column 2</span>
<span id="cb10-12">:::</span>
<span id="cb10-13"></span>
<span id="cb10-14">:::: </span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="columns">
<div class="column" style="width:50%;">
<section id="column-1" class="level3">
<h3 class="anchored" data-anchor-id="column-1">Column 1</h3>
<p>This is written in column 1</p>
</section>
</div><div class="column" style="width:50%;">
<section id="column-2" class="level3">
<h3 class="anchored" data-anchor-id="column-2">Column 2</h3>
<p>This is written in column 2</p>
</section>
</div>
</div>
</div>
</div>
</div>
<p>Now we can use this to put our registration snippet at the top of the blog listings page. For example, we could modify <code>blog.qmd</code> as follows.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>blog.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="blog.qmd" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts/**/*.qmd</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"date desc"</span></span>
<span id="cb11-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> default</span></span>
<span id="cb11-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">sort-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">filter-ui</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb11-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">fields</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">date</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> title</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> reading-time</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> description</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> categories</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb11-10"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">feed</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> full</span></span>
<span id="cb11-12"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb11-13"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="at" style="color: #657422;">::</span><span class="fu" style="color: #4758AB;">:</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">.columns</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="at" style="color: #657422;">:</span><span class="fu" style="color: #4758AB;">:</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">.column width=</span><span class="st" style="color: #20794D;">"40%"</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;"># Series</span></span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;">##### [ggplot2-series](ggplot-series.html)</span></span>
<span id="cb11-21"><span class="at" style="color: #657422;">This series contains a great deal of tips, tricks and packages </span></span>
<span id="cb11-22"><span class="at" style="color: #657422;">that you can use to level up your ggplot game.</span></span>
<span id="cb11-23"><span class="at" style="color: #657422;">:</span><span class="fu" style="color: #4758AB;">:</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="at" style="color: #657422;">:</span><span class="fu" style="color: #4758AB;">:</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">{</span><span class="at" style="color: #657422;">.column width=</span><span class="st" style="color: #20794D;">"60%"</span><span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;"># Subscribe</span></span>
<span id="cb11-27"><span class="at" style="color: #657422;">&lt;iframe id="beehiiv-form" src="https</span><span class="fu" style="color: #4758AB;">://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true" data-test-id="beehiiv-embed" frameborder="0" scrolling="no" style="margin</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 0; border-radius: 0px !important; background-color: transparent; height: 75px; width: 90%;"&gt;&lt;/iframe&gt;</span></span>
<span id="cb11-28"><span class="at" style="color: #657422;">:</span><span class="fu" style="color: #4758AB;">:</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-29"></span>
<span id="cb11-30"><span class="at" style="color: #657422;">::</span><span class="fu" style="color: #4758AB;">:</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-ED5A9347.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Output of previous change to blog.qmd"><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-ED5A9347.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Output of previous change to blog.qmd</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-a-footer-below-blog-posts" class="level3">
<h3 class="anchored" data-anchor-id="add-a-footer-below-blog-posts">Add a footer below blog posts</h3>
<p>Now, we’re going to do something harder. We will include something at the end of every blog post (before the comments). That’s the perfect spot for</p>
<ul>
<li><p>Newsletter registrations,</p></li>
<li><p>“Share on”-buttons,</p></li>
<li><p>“Buy me coffee”-buttons or</p></li>
<li><p>whatever else you fancy.</p></li>
</ul>
<p>For example, this could look like my current footer.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-E257B6FC.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="My current footer"><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-E257B6FC.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">My current footer</figcaption><p></p>
</figure>
</div>
<p>To include something at the end of posts, I’ve found <code>format</code> &gt; <code>html</code> &gt; <code>include-after-body</code> helpful. That’s the part you have seen earlier in my <code>_metadata.yml</code> file. You don’t know which part I’m talking about? Well, it’s easy to forget. But don’t worry. I got you. Here’s the part I mean.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>posts/_metadata.yml</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="posts/_metadata.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb12-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb12-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">include-after-body</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ../footer.html</span></span></code></pre></div>
</div>
<p>Of course, this assumes that you have whipped together a <code>footer.html</code> file in the main directory. If you don’t know HTML, then you can always use code from a <code>.qmd</code>-file’s output (more on finding HTML-code later). For my blog, I have created the following simple HTML-file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>footer.html</strong></pre>
</div>
<div class="sourceCode" id="cb13" data-filename="footer.html" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb13-1"><span class="kw" style="color: #003B4F;">&lt;div&gt;</span></span>
<span id="cb13-2"><span class="kw" style="color: #003B4F;">&lt;hr&gt;</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">&lt;h3&gt;</span> Stay in touch <span class="kw" style="color: #003B4F;">&lt;/h3&gt;</span></span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;">&lt;p&gt;</span> If you enjoyed this post, then don't miss out on any future posts by subscribing to my email newsletter. <span class="kw" style="color: #003B4F;">&lt;/p&gt;</span></span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="kw" style="color: #003B4F;">&lt;iframe</span> <span class="er" style="color: #AD0000;">id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"beehiiv-form"</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true"</span> <span class="er" style="color: #AD0000;">data-test-id</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"beehiiv-embed"</span> <span class="er" style="color: #AD0000;">frameborder</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"0"</span> <span class="er" style="color: #AD0000;">scrolling</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"no"</span> <span class="er" style="color: #AD0000;">style</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"margin: 0; border-radius: 0px !important; background-color: transparent; height: 55px;"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/iframe&gt;</span></span>
<span id="cb13-9"></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="kw" style="color: #003B4F;">&lt;h3&gt;</span> Support my work with a coffee <span class="kw" style="color: #003B4F;">&lt;/h3&gt;</span></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="kw" style="color: #003B4F;">&lt;script</span><span class="ot" style="color: #003B4F;"> type=</span><span class="st" style="color: #20794D;">"text/javascript"</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js"</span> <span class="er" style="color: #AD0000;">data-name</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"bmc-button"</span> <span class="er" style="color: #AD0000;">data-slug</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"rappa753"</span> <span class="er" style="color: #AD0000;">data-color</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"#06436e"</span> <span class="er" style="color: #AD0000;">data-emoji</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"☕"</span>  <span class="er" style="color: #AD0000;">data-font</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Lato"</span> <span class="er" style="color: #AD0000;">data-text</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"Support me"</span> <span class="er" style="color: #AD0000;">data-outline-color</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"#ffffff"</span> <span class="er" style="color: #AD0000;">data-font-color</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"#ffffff"</span> <span class="er" style="color: #AD0000;">data-coffee-color</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"#FFDD00"</span> <span class="er" style="color: #AD0000;">data-height</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"40px"</span> <span class="kw" style="color: #003B4F;">&gt;&lt;/script&gt;</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="kw" style="color: #003B4F;">&lt;h3&gt;</span> Share <span class="kw" style="color: #003B4F;">&lt;/h3&gt;</span></span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="kw" style="color: #003B4F;">&lt;a</span> <span class="er" style="color: #AD0000;">href</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"https://twitter.com/share?ref_src=twsrc%5Etfw"</span> <span class="er" style="color: #AD0000;">class</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"twitter-share-button"</span> <span class="er" style="color: #AD0000;">data-size</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"large"</span> <span class="er" style="color: #AD0000;">data-hashtags</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"#rstats"</span> <span class="er" style="color: #AD0000;">data-show-count</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"false"</span><span class="kw" style="color: #003B4F;">&gt;</span>Tweet<span class="kw" style="color: #003B4F;">&lt;/a&gt;&lt;script</span> <span class="er" style="color: #AD0000;">async</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"https://platform.twitter.com/widgets.js"</span> <span class="er" style="color: #AD0000;">charset</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"utf-8"</span><span class="kw" style="color: #003B4F;">&gt;&lt;/script&gt;</span></span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="kw" style="color: #003B4F;">&lt;hr&gt;</span></span>
<span id="cb13-20"><span class="kw" style="color: #003B4F;">&lt;/div&gt;</span></span></code></pre></div>
</div>
<p>Note that the code for all the widgets were provided from the respective service. I certainly didn’t code that stuff myself. You know, I’m not an HTML expert.</p>
</section>
</section>
<section id="style-your-blog" class="level2">
<h2 class="anchored" data-anchor-id="style-your-blog">Style your blog</h2>
<p>At some point, you will likely want to customize your blog’s visual appearance. This will include changing colors, fonts and sizes of all sorts of things.</p>
<p>And same as the internet, Quarto runs on HTML and CSS. These two languages are the major players that style your blog. Luckily, you don’t have to know a lot about them to style your blog.</p>
<p>That’s because Quarto already generates a whole lot of HTML and CSS code when you render your blog. Consequently, it takes only a little peaking behind the HTML/CSS curtain to find out what values need tweaking.</p>
<p>I know, this sounds quite complicated. But it isn’t. I don’t know a whole lot about HTML and CSS but I have customized this blog, haven’t I? In fact, working on this blog has been a fun way to learn more about these two languages. To help you do the same, I have created a video that walks you through the process of</p>
<ol type="1">
<li>Learning a minimal amount of HMTL/CSS to understand what’s going on,</li>
<li>Finding HTML/CSS snippets that you want to tweak and</li>
<li>Making the changes in your blog</li>
</ol>
<p>You can find the video on YouTube.</p>
<iframe width="100%" height="315" src="https://www.youtube.com/embed/ErRX8plZpQE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>If videos are not your thing, here’s the high-level summary:</p>
<p>In <code>quarto.yml</code>, we have set <code>theme: theme.scss</code>. Thus, all visual elements of this blog are governed by this SCSS-file. But it doesn’t exist yet. That’s why everything is set to default values. So, create <code>theme.scss</code> yourself by creating an empty text file and renaming it to <code>theme.scss</code>.</p>
<p>Quarto uses a framework called <a href="https://getbootstrap.com/">Bootstrap</a>. In this framework, you can change most parts of your blog by changing a variable’s value. For instance, there is a variable called <code>$primary</code> (variables use dollar signs in SCSS). It governs the main color of your blog. And you can change it to any color you like.</p>
<p>Similarly, your text color is governed by <code>$body-color</code> and your text font is determined by <code>$font-family-base</code>. Quarto lists the most common variables <a href="https://quarto.org/docs/output-formats/html-themes.html#sass-variables">in their docs</a>. For the full list of variables you can check out <a href="https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss">Bootstrap’s Github page</a>. Here are the variables I have set at the beginning of my <code>theme.scss</code> file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>theme.scss</strong></pre>
</div>
<div class="sourceCode" id="cb14" data-filename="theme.scss" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">/*-- scss:defaults --*/</span></span>
<span id="cb14-2">$primary<span class="in" style="color: #5E5E5E;">:  #06436e !default</span>;</span>
<span id="cb14-3">$font-family-base<span class="in" style="color: #5E5E5E;">:  'Source</span> Sans Pro'<span class="op" style="color: #5E5E5E;">,</span>  'Lato'<span class="op" style="color: #5E5E5E;">,</span> 'Merriweather'<span class="op" style="color: #5E5E5E;">,</span> 'Roboto Regular'<span class="op" style="color: #5E5E5E;">,</span> 'Cabin Regular' !default;</span>
<span id="cb14-4">$body-color<span class="in" style="color: #5E5E5E;">: $gray-700</span> !default;</span>
<span id="cb14-5">$headings-font-family<span class="in" style="color: #5E5E5E;">:  'Prata</span>'<span class="op" style="color: #5E5E5E;">,</span> 'Roboto'<span class="op" style="color: #5E5E5E;">,</span> 'Playfair Display'<span class="op" style="color: #5E5E5E;">,</span> 'Montserrat'    !default;</span></code></pre></div>
</div>
<p>Notice that my file starts with <code>/*-- scss:defaults --*/</code>. This is just something an SCSS-file expects. Also, make sure to use multiple fonts. As not every computer has every font installed, it’s good to offer multiple alternatives for your reader’s computer.</p>
<p>Consequently, when you want to style your blog, you can stroll through the list of variables. Once you have found a variable that you want to change (most variable names are quite self-explanatory), just throw that into your scss-file.</p>
<section id="scss-rules" class="level3">
<h3 class="anchored" data-anchor-id="scss-rules">SCSS-Rules</h3>
<p>Unfortunately, not everything can be changed with Bootstrap variables. In this case, you will need to take a look at your blog’s source code. To do so, open your blog in a browser of your choice. Then, right-click anywhere and press “Inspect”. This will open the developer mode of your browser.</p>
<p>Now, you can see your blog’s source code. This view can be quite daunting. But don’t worry. You can ignore most of it. The only thing you need is the most specific description of the part you want to tweak.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-5AD5F4B6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="On the left you see the website you’ve opened. On the right you see the HTML- (top) and CSS-code (bottom). As you move your cursor through the HTML-code, your browser shows you the corresponding part of the website."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-5AD5F4B6.png" class="img-fluid figure-img" style="width:100.0%"></a></p>
<p></p><figcaption class="figure-caption">On the left you see the website you’ve opened. On the right you see the HTML- (top) and CSS-code (bottom). As you move your cursor through the HTML-code, your browser shows you the corresponding part of the website.</figcaption><p></p>
</figure>
</div>
<p>You see, in HTML and CSS everything consists of (nested) tags, classes and IDs. All of these are indicated by a different symbol:</p>
<ul>
<li><p><code>&lt;...&gt;</code> stands for <strong>tag</strong>, e.g.&nbsp;<code>&lt;div&gt; &lt;/div&gt;</code> (This is a section)</p></li>
<li><p><code>.</code> stands for <strong>class</strong>, e.g.&nbsp;<code>.grid</code> (This is grid class object)</p></li>
<li><p><code>#</code> stands for <strong>ID</strong>, e.g.&nbsp;<code>#my_about_page</code> (This is a name that you can access in your CSS code)</p></li>
</ul>
<p>As you move your cursor through the HTML code, your browser will show you what element in your blog corresponds to the code you’re currently hovering over. This helps you to find the HTML code responsible for the part that you want to tweak. Once you have found the desired code section, the CSS-code will also show you a mix of tags, classes and IDs that describe this element.</p>
<p>For example, each blog title is described by</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb15-1"><span class="pp" style="color: #AD0000;">#title-block-header</span><span class="fu" style="color: #4758AB;">.quarto-title-block.default</span> <span class="fu" style="color: #4758AB;">.quarto-title</span> <span class="fu" style="color: #4758AB;">.title</span></span></code></pre></div>
<p>Just copy this from your browser’s developer page and put it into your SCSS-file. Then, add <code>{}</code> and describe how you want to style the element. This could look like so.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>theme.scss</strong></pre>
</div>
<div class="sourceCode" id="cb16" data-filename="theme.scss" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb16-1"><span class="co" style="color: #5E5E5E;">/*-- scss:rules --*/</span></span>
<span id="cb16-2"><span class="pp" style="color: #AD0000;">#title-block-header</span><span class="fu" style="color: #4758AB;">.quarto-title-block.default</span> <span class="fu" style="color: #4758AB;">.quarto-title</span> <span class="fu" style="color: #4758AB;">.title</span> {</span>
<span id="cb16-3">  <span class="kw" style="color: #003B4F;">font-family</span>: <span class="st" style="color: #20794D;">"Oleo Script"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Libre Baskerville"</span><span class="op" style="color: #5E5E5E;">,</span> $headings-font-family<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-4">  <span class="kw" style="color: #003B4F;">font-size</span>: $font-size-base * <span class="dv" style="color: #AD0000;">2.5</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb16-5">}</span></code></pre></div>
</div>
<p>Here I have chosen to use different fonts for blog titles (if possible) and make the font larger. I tried to avoid hard-coding the font size with something like <code>14pt</code>. Instead, I have taken the Bootstrap variable <code>$font-size-base</code> and scaled it. Finally, notice that SCSS-rules - like the one we have just defined - need to be written after <code>/*-- scss:rules --*/</code> in your SCSS-file.</p>
<p>So, now you have learned a way to style your blog. You can basically change everything you like this way. And you don’t need to know much about HTML/CSS for that. You just need some patience strolling through the code.</p>
<p>Of course, you will need to know the keywords like <code>font-family</code>, <code>font-size</code>, etc. But you will stumble across the most common keywords in the HTML code anyway. Alternatively, a quick web search can help. And if you want, you can take a look at my <a href="../../theme.scss"><code>theme.scss</code> file</a>.</p>
<p>This file also includes a few <code>@media (min-width: ...px)</code> calls that styles the blog differently on small screens (depending on the amount of pixels). You can ignore this part for now.</p>
</section>
<section id="light-and-dark-modes" class="level3">
<h3 class="anchored" data-anchor-id="light-and-dark-modes">Light and dark modes</h3>
<p>Are you a fan of dark modes? Me too! Though, at the time of writing I haven’t gotten around to add a dark mode to this blog. But the steps to include a dark mode are easy. You just have to modify your <code>_quarto.yml</code> file as follows.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb17" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb17-4"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">light</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> theme.scss</span></span>
<span id="cb17-5"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">dark</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> theme-dark.scss</span></span></code></pre></div>
</div>
<p>This will add a dark mode toggle to your navbar. And now you can style the dark mode in the same way as before by creating a new scss-file for it.</p>
</section>
</section>
<section id="build-your-own-landing-page" class="level2">
<h2 class="anchored" data-anchor-id="build-your-own-landing-page">Build your own landing page</h2>
<p>My own landing page is custom built and here I’ll show you how you can do the same. But there is absolutely no reason against <a href="https://quarto.org/docs/websites/website-about.html">using one of the built-in templates</a> (especially if you’re just starting your blogging career).</p>
<p>Building my landing page will require a little bit more knowledge about HTML and CSS. Don’t be alarmed, though. You can easily follow along if you’ve understood how to work with classes and IDs (as described earlier or <a href="https://www.youtube.com/watch?v=ErRX8plZpQE">in my video</a>).</p>
<p>First, we need to set up <code>index.qmd</code>. This file determines what your blog’s landing page looks like. Delete all content from this file and replace it with</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb18" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="pp" style="color: #AD0000;">---</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">page-layout</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> full</span></span>
<span id="cb18-3"><span class="pp" style="color: #AD0000;">---</span></span></code></pre></div>
</div>
<p>Second, set up a grid system. Quarto uses the <a href="https://getbootstrap.com/docs/5.1/layout/css-grid/">CSS-grid system</a>. We can make use of that in <code>index.qmd</code> via</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb19" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb19-1"><span class="in" style="color: #5E5E5E;">::: {.grid</span>}</span>
<span id="cb19-2">CONTENT</span>
<span id="cb19-3"><span class="in" style="color: #5E5E5E;">:::</span></span></code></pre></div>
</div>
<p>Recall that the dot (<code>.</code>) in CSS stands for class. So, the previous code means quarto will render your qmd-file into an html-file that contains a section (a <code>div</code> in HTML-speak) that is of class <code>grid</code>. We will fill this div with columns next.</p>
<p>Adding columns is done by adding more <code>div</code>s. In this case, these <code>div</code>s are of the class <code>g-col-*</code>. Here, <code>*</code> describes how many columns the <code>div</code> should fill (out of 12 columns). The actual content is written with regular Markdown. This could look like so:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb20" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb20-1"><span class="in" style="color: #5E5E5E;">::: {.grid</span>}</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="in" style="color: #5E5E5E;">::: {.g-col-6</span>}</span>
<span id="cb20-4">!<span class="ex" style="color: null;">[]</span>(profile2<span class="fu" style="color: #4758AB;">.jpg</span>)</span>
<span id="cb20-5"><span class="in" style="color: #5E5E5E;">:::</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="in" style="color: #5E5E5E;">::: {.g-col-6</span>}</span>
<span id="cb20-8"># Hi<span class="op" style="color: #5E5E5E;">,</span> I'm Albert Rapp<span class="fu" style="color: #4758AB;">.</span></span>
<span id="cb20-9">I'm a mathematics PhD students with a passion for R<span class="op" style="color: #5E5E5E;">,</span> data visualization<span class="op" style="color: #5E5E5E;">,</span> Shiny and statistics/machine learning<span class="fu" style="color: #4758AB;">.</span> On this blog<span class="op" style="color: #5E5E5E;">,</span> I share and teach what I learn<span class="fu" style="color: #4758AB;">.</span></span>
<span id="cb20-10"></span>
<span id="cb20-11">To get started<span class="op" style="color: #5E5E5E;">,</span> you can check out my most popular content below<span class="fu" style="color: #4758AB;">.</span> You can find me on <span class="ex" style="color: null;">[Twitter]</span>(https<span class="in" style="color: #5E5E5E;">://twitter</span><span class="fu" style="color: #4758AB;">.com</span>/rappa753) or</span>
<span id="cb20-12"><span class="ex" style="color: null;">[GitHub]</span>(https<span class="in" style="color: #5E5E5E;">://github</span><span class="fu" style="color: #4758AB;">.com</span>/AlbertRapp) and </span>
<span id="cb20-13"><span class="ex" style="color: null;">[YouTube]</span>(https<span class="in" style="color: #5E5E5E;">://www</span><span class="fu" style="color: #4758AB;">.youtube.com</span>/user/Alfrodo123)<span class="fu" style="color: #4758AB;">.</span> </span>
<span id="cb20-14">Feel free to reach out to me via <span class="ex" style="color: null;">[mail]</span>(mailto<span class="in" style="color: #5E5E5E;">:blog</span><span class="im" style="color: #00769E;">@albert-rapp</span>.de) <span class="kw" style="color: #003B4F;">and</span> subscribe to my email newsletter.</span>
<span id="cb20-15"></span>
<span id="cb20-16"></span>
<span id="cb20-17">&lt;iframe id=<span class="st" style="color: #20794D;">"beehiiv-form"</span> src=<span class="st" style="color: #20794D;">"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true"</span> data-test-id=<span class="st" style="color: #20794D;">"beehiiv-embed"</span> frameborder=<span class="st" style="color: #20794D;">"0"</span> scrolling=<span class="st" style="color: #20794D;">"no"</span> style=<span class="st" style="color: #20794D;">"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px"</span>&gt;&lt;/iframe&gt;</span>
<span id="cb20-18">:::</span></code></pre></div>
</div>
<p>This code will create the following landing page.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-79318471.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-79318471.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
</figure>
</div>
<section id="add-reactivity" class="level3">
<h3 class="anchored" data-anchor-id="add-reactivity">Add reactivity</h3>
<p>Our new landing page will look decent on large screens. But we should test what it looks like on small screens too.</p>
<p>However, there’s no need to take out your phone. Use your browser and activate its responsive mode (<code>ctrl</code>+<code>shift</code>+<code>M</code> in Firefox). This way, you can see what your website would look like on phones or tablets.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-1E3D81FD.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Mobile view of the landing page we’ve just built."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-1E3D81FD.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Mobile view of the landing page we’ve just built.</figcaption><p></p>
</figure>
</div>
<p>If you’ve checked the view on phones, then you may notice that splitting the screen in two won’t fly. In this case, it’s better to put sections <strong>below</strong> each other. We can make that happen by adding <code>g-col-md-*</code> classes to our previous divs (and making the other classes full-width).</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb21" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb21-1"><span class="in" style="color: #5E5E5E;">::: {.grid</span>}</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="in" style="color: #5E5E5E;">::: {.g-col-12</span> <span class="fu" style="color: #4758AB;">.g-col-md-6</span>}</span>
<span id="cb21-4">!<span class="ex" style="color: null;">[]</span>(profile2<span class="fu" style="color: #4758AB;">.jpg</span>)</span>
<span id="cb21-5"><span class="in" style="color: #5E5E5E;">:::</span></span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="in" style="color: #5E5E5E;">::: {.g-col-12</span> <span class="fu" style="color: #4758AB;">.g-col-md-6</span>}</span>
<span id="cb21-8"># Hi<span class="op" style="color: #5E5E5E;">,</span> I'm Albert Rapp<span class="fu" style="color: #4758AB;">.</span></span>
<span id="cb21-9">I'm a mathematics PhD students with a passion for R<span class="op" style="color: #5E5E5E;">,</span> data visualization<span class="op" style="color: #5E5E5E;">,</span> Shiny and statistics/machine learning<span class="fu" style="color: #4758AB;">.</span> On this blog<span class="op" style="color: #5E5E5E;">,</span> I share and teach what I learn<span class="fu" style="color: #4758AB;">.</span></span>
<span id="cb21-10"></span>
<span id="cb21-11">To get started<span class="op" style="color: #5E5E5E;">,</span> you can check out my most popular content below<span class="fu" style="color: #4758AB;">.</span> You can find me on <span class="ex" style="color: null;">[Twitter]</span>(https<span class="in" style="color: #5E5E5E;">://twitter</span><span class="fu" style="color: #4758AB;">.com</span>/rappa753) or</span>
<span id="cb21-12"><span class="ex" style="color: null;">[GitHub]</span>(https<span class="in" style="color: #5E5E5E;">://github</span><span class="fu" style="color: #4758AB;">.com</span>/AlbertRapp) and </span>
<span id="cb21-13"><span class="ex" style="color: null;">[YouTube]</span>(https<span class="in" style="color: #5E5E5E;">://www</span><span class="fu" style="color: #4758AB;">.youtube.com</span>/user/Alfrodo123)<span class="fu" style="color: #4758AB;">.</span> </span>
<span id="cb21-14">Feel free to reach out to me via <span class="ex" style="color: null;">[mail]</span>(mailto<span class="in" style="color: #5E5E5E;">:blog</span><span class="im" style="color: #00769E;">@albert-rapp</span>.de) <span class="kw" style="color: #003B4F;">and</span> subscribe to my email newsletter.</span>
<span id="cb21-15"></span>
<span id="cb21-16"></span>
<span id="cb21-17">&lt;iframe id=<span class="st" style="color: #20794D;">"beehiiv-form"</span> src=<span class="st" style="color: #20794D;">"https://embeds.beehiiv.com/9232d2a2-6e85-4beb-b8ed-1de94e9e4f01?slim=true"</span> data-test-id=<span class="st" style="color: #20794D;">"beehiiv-embed"</span> frameborder=<span class="st" style="color: #20794D;">"0"</span> scrolling=<span class="st" style="color: #20794D;">"no"</span> style=<span class="st" style="color: #20794D;">"margin: 0; border-radius: 0px !important; background-color: transparent; height: 75px"</span>&gt;&lt;/iframe&gt;</span>
<span id="cb21-18">:::</span></code></pre></div>
</div>
<p>Here, <code>.g-col-12 .g-col-md-6</code> means that the <code>div</code> will use 12 columns (full width) by default. But on screens of at least medium width (&gt;=768px), the <code>div</code> will only take 6 columns. Congrats, you’ve now used responsive design. 🥳</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-BA9A601E.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="Use responsive design to make your landing page look good on small screens. I hope you’re not sick of my face yet 😆"><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-BA9A601E.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Use responsive design to make your landing page look good on small screens. I hope you’re not sick of my face yet 😆</figcaption><p></p>
</figure>
</div>
<p>Next, we should use our landing page to highlight our best content. Think of this as a getting started guide for your readers. Here, I want to use centered columns of width 5. And to ensure that the columns are centered let us offset the first block by one column (on larger than medium screens).</p>
<p>This is accomplished by adding yet another class to the <code>div</code>, namely <code>g-start-md-*</code>. Here, <code>*</code>️ is the start column. And seeing this in action may look like this:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb22" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb22-1">::: {.g-col-12 .g-col-md-5 .g-start-md-2}</span>
<span id="cb22-2"># Data Visualization</span>
<span id="cb22-3"></span>
<span id="cb22-4">- Blog post 1</span>
<span id="cb22-5">- Blog post 2</span>
<span id="cb22-6">- Blog post 3</span>
<span id="cb22-7">:::</span>
<span id="cb22-8"></span>
<span id="cb22-9">::: {.g-col-12 .g-col-md-5}</span>
<span id="cb22-10"># Stats/ML</span>
<span id="cb22-11"></span>
<span id="cb22-12">- This div...</span>
<span id="cb22-13">- ...required...</span>
<span id="cb22-14">- ...no offset (it's still in the first row)</span>
<span id="cb22-15"></span>
<span id="cb22-16">:::</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/paste-036A33EA.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="Output of previous code chunk. Notice that the first column doesn’t start all the way to the left."><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-036A33EA.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
<p></p><figcaption class="figure-caption">Output of previous code chunk. Notice that the first column doesn’t start all the way to the left.</figcaption><p></p>
</figure>
</div>
<p>Finally, you can always customize the appearance of a grid element by adding more custom classes (with <code>.</code>) or IDs (with <code>#</code>). Afterwards, you can target that class or ID in your SCSS file. This way, I aligned my bio with the bottom of the picture.</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">HTML Code</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Content of theme.scss</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>index.qmd</strong></pre>
</div>
<div class="sourceCode" id="cb23" data-filename="index.qmd" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb23-1"><span class="in" style="color: #5E5E5E;">::: {.g-col-12</span> <span class="fu" style="color: #4758AB;">.g-col-md-6</span> <span class="pp" style="color: #AD0000;">#about-me-text</span>}</span>
<span id="cb23-2">!<span class="ex" style="color: null;">[]</span>(profile2<span class="fu" style="color: #4758AB;">.jpg</span>)</span>
<span id="cb23-3"><span class="in" style="color: #5E5E5E;">:::</span></span></code></pre></div>
</div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>theme.scss</strong></pre>
</div>
<div class="sourceCode" id="cb24" data-filename="theme.scss" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb24-1"><span class="pp" style="color: #AD0000;">#about-me-text</span> {</span>
<span id="cb24-2">  <span class="kw" style="color: #003B4F;">align-items</span>: end<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-3">  <span class="kw" style="color: #003B4F;">display</span>: <span class="dv" style="color: #AD0000;">grid</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb24-4">}</span></code></pre></div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="make-posts-robust-with-renv" class="level2">
<h2 class="anchored" data-anchor-id="make-posts-robust-with-renv">Make posts robust with {renv}</h2>
<p>Imagine that you have written a really cool blog post. And not just any cool blog post. I mean a SUPER DUPER cool blog post. Did you imagine that? Good. That’s your future when you start a blog. But don’t get too excited yet! Here’s the drama of this fairy tale.</p>
<p>Unfortunately, your super cool blog post uses version <code>1.2.4.</code> of <code>{ggplot2}</code>. This is unfortunate because right now we’re at version <code>3.3.6</code>. And a lot has changed since your blog post was rendered last time.</p>
<p>What’s worse is that you won’t be able to render your blog anymore if you ever need to re-render all blog posts. This can happen, for example, if you move your blog to a different format, e.g.&nbsp;Quarto.<sup>1</sup></p>
<p>Luckily, it’s possible to tell R which package versions it should use for your blog posts. To do so, you need to control the versions with <a href="https://rstudio.github.io/renv/articles/renv.html">{renv}</a>. This is a package like any other package and you can install it with <code>install.packages('renv')</code>.</p>
<p>Once you have installed <code>{renv}</code>, you can use it within your blog project. Actually, it is quite simple to set up. Here’s how <code>{renv}</code>’s docs describe the workflow.</p>
<blockquote class="blockquote">
<ol type="1">
<li><p>Call <a href="https://rstudio.github.io/renv/reference/init.html"><code>renv::init()</code></a> to initialize a new project-local environment with a private R library,</p></li>
<li><p>Work in the project as normal, installing and removing new R packages as they are needed in the project,</p></li>
<li><p>Call <a href="https://rstudio.github.io/renv/reference/snapshot.html"><code>renv::snapshot()</code></a> to save the state of the project library to the lockfile (called <code>renv.lock</code>),</p></li>
<li><p>Continue working on your project, installing and updating R packages as needed.</p></li>
<li><p>Call <a href="https://rstudio.github.io/renv/reference/snapshot.html"><code>renv::snapshot()</code></a> again to save the state of your project library if your attempts to update R packages were successful, or call <a href="https://rstudio.github.io/renv/reference/restore.html"><code>renv::restore()</code></a> to revert to the previous state as encoded in the lockfile if your attempts to update packages introduced some new problems.</p></li>
</ol>
</blockquote>
<p>So, if you’ve just started your blog project, then <code>renv:init()</code> will set you up with a clean slate. This means that whenever you want to use a package that you have not used before <strong>in this project</strong>, you will need to install the package for this project (via <code>install.packages()</code>). Yes, this is true even if you have used, say, <code>{ggplot2}</code> in other projects.</p>
<p>In case you’re running into installation problems with <code>{renv}</code>, you’ll need to change your download method for new packages. Simply add the following line to your <code>.Renviron</code> file. Either find this file on your computer manually or open it by calling <code>usethis::edit_r_environ()</code> (if necessary from a not <code>{renv}</code>-controlled project).</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"> <span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="at" style="color: #657422;">RENV_DOWNLOAD_FILE_METHOD =</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">"download.file.method"</span>))</span></code></pre></div>
<p>Whenever you have installed or updated packages in this project, then call <code>renv::snapshot()</code>. This will save all package information <strong>including version numbers</strong> into a so-called lock file <code>renv.lock</code> (which will appear in your projects main directory). Now, here’s what you need to do to make <strong>each of your blog posts</strong> robust against version changes.</p>
<ol type="1">
<li><p>After finishing anew blog post, call <code>renv::snapshot()</code>. This will update your <code>renv.lock</code> file <strong>of your blog project.</strong></p></li>
<li><p>Take this updated <code>renv.lock</code> file and copy it into the directory of your newly finished blog post.</p></li>
<li><p>In your new blog post, add the following code chunk at the top of your blog post’s <code>qmd</code>-file (after the YAML header, of course).</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;">#| echo: false</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;">#| results: 'hide'</span></span>
<span id="cb26-3">renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(<span class="at" style="color: #657422;">lockfile =</span> <span class="st" style="color: #20794D;">"renv.lock"</span>)</span></code></pre></div></li>
</ol>
<p>That’s it. You have successfully saved your blog post from dying by version change. Whenever your blog post needs to be re-rendered, this first code chunk will instruct R to use the package versions that are defined in this post’s lock-file.</p>
<p>But let me warn you that this is not a perfect solution. Your blog posts are still not invincible. For example, <code>{renv}</code> does not prevent problems when you have written your blog post on a Windows system and want to re-render it on Ubuntu. Possibly, some packages (e.g.&nbsp;<code>{keyring}</code>) behave differently on a different OS.</p>
</section>
<section id="cookies-analytics-extensions-and-more-miscellaneous-stuff" class="level2">
<h2 class="anchored" data-anchor-id="cookies-analytics-extensions-and-more-miscellaneous-stuff">Cookies, analytics, extensions and more miscellaneous stuff</h2>
<p>There are many, many more cool features that Quarto has in store for your blog. Let me briefly mention a few more gems.</p>
<ul>
<li><p><strong>Analytics:</strong> You’re probably curious about how much attention your blog attracts. To find out, you can measure your website’s traffic with <a href="https://analytics.google.com">Google analytics</a>. Simply register with Google and you will get a tracking ID. This ID can be added in your <code>_quarto.yml</code> file via <code>google-analytics</code>. For more information, check out the <a href="https://quarto.org/docs/websites/website-tools.html#google-analytics">Quarto docs</a>.</p></li>
<li><p><strong>Cookie consent:</strong> It is rude and more importantly illegal to track your readers with cookies without their consent. So it is paramount that you ask your readers for permission if you use cookies. This can be done via a simple, yet ABSOLUTELY ANNOYING, pop-up window that asks for consent. Activate this window via <code>cookie-consent: true</code> in <code>_quarto.yml</code>.</p></li>
<li><p><strong>Social card:</strong> A great place to share your blog posts is Twitter. But to get the most out of your promo tweets, your links should probably generate a <a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards">Twitter card</a>. Once again, you can enable this feature in your <code>_quarto.yml</code> file. And for custom styling of your Twitter card, please refer to the <a href="https://quarto.org/docs/websites/website-tools.html#twitter-cards">Quarto docs</a>. Note that it takes some time (days) until Twitter registers your changed Twitter card information.</p></li>
<li><p><strong>Extensions:</strong> Quarto’s functionality can be leveled up with <a href="https://quarto.org/docs/extensions/">Extensions</a>. For example, the <code>code-filename</code> extension helped me to include a file name at the top of many of this post’s code chunks. If you want to use the <code>code-filename</code> extensions as well, then proceed as follows. Of course, this works with any other extension as well.</p>
<ol type="1">
<li><p>Make sure that your Quarto version is up-to-date. Extensions are a fairly new feature.</p></li>
<li><p>Install <code>code-filename</code> locally for your blog project: You will need to open a terminal at your blog’s working directory and execute</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;">quarto</span> install extension quarto-ext/code-filename</span></code></pre></div></li>
<li><p>Notice that there is a new directory <code>_extensions</code> in your blog’s directory now. (This is not really a step that you have to do but still it’s nice to notice changes).</p></li>
<li><p>Add the new extension to your <code>_quarto.yml</code> file to activate it.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>_quarto.yml</strong></pre>
</div>
<div class="sourceCode" id="cb28" data-filename="_quarto.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb28-1"><span class="fu" style="color: #4758AB;">filters</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb28-2"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> code-filename</span></span></code></pre></div>
</div></li>
<li><p>Enjoy your new feature. You can use it like</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb29-1"><span class="at" style="color: #657422;">``` {.yaml filename=_quarto.yml}</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;">filters</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb29-3"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> code-filename</span></span>
<span id="cb29-4"><span class="at" style="color: #657422;">```</span></span></code></pre></div></li>
</ol></li>
<li><p><strong>PDF Output:</strong> On Twitter, I was asked if my guide can include some info on Quarto’s PDF output options. In this context, this reminds me that a reader once emailed me and asked whether I can provide a PDF-file for one of my blog posts. So, I guess, some people may be interested in having PDF- as well as HTML-versions of your blog.<br>
In principle, you could add an additional format to, say, your <code>_metadata.yml</code> file. In my case, this could look like</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre> <strong>posts/_metadata.yml</strong></pre>
</div>
<div class="sourceCode" id="cb30" data-filename="posts/_metadata.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb30-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb30-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb30-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">include-after-body</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ../footer.html</span></span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;">pdf</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb30-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span></code></pre></div>
</div>
<p>Unfortunately, I haven’t found a button or shortcut to render <strong>both</strong> outputs simultaneously in RStudio. But with the command line (which you can use in RStudio), it is simple. You’ll just have to call</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="ex" style="color: null;">quarto</span> render <span class="at" style="color: #657422;">--to</span> all</span></code></pre></div>
<p>This will render all of your blog posts to both HTML and PDF. Now what’s cool is that a reader can easily access the PDF version by changing a post’s link e.g.&nbsp;from <code>site-url/post_XY.html</code> to <code>site-url/post_XY.pdf</code>.<br>
Of course, all of that will only work if your blog posts contain static elements that work in a PDF. Possibly, this can be cirumvented and <a href="https://quarto.org/docs/books/book-output.html#format-options">Quarto’s docs on book formats</a> (it’s a more pressing issue for books) may have some info on that. Personally, I avoid PDFs in my blog.</p></li>
<li><p><strong>Adding ressources:</strong> Sometimes you want to add a few static materials to your blog post. For example, I’ve included multiple <code>app.R</code> files in a <a href="../06_shiny_app_learnings.html">blog post about Shiny</a>. In order to link to these, they need to be included as a Ressource to the blog post.<br>
In this case, all files were located in a sub-directory called <code>DummyApp</code>. Thus, I could include all files in the YAML header via</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb32-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb32-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb32-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">resources</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb32-4"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> DummyApp</span></span></code></pre></div>
<p>Then, I can link to the files via their path. The same trick works, when you want to include an audio file to your blog post. Make sure that the audio file, say <code>audio.mp3</code>, is in your post’s directory and then add some html magic like so:</p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">HTML-code</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">YAML-header</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb33-1"><span class="kw" style="color: #003B4F;">&lt;figure&gt;</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;">&lt;figcaption&gt;</span>Click to listen<span class="kw" style="color: #003B4F;">&lt;/figcaption&gt;</span></span>
<span id="cb33-3"><span class="kw" style="color: #003B4F;">&lt;audio</span> <span class="er" style="color: #AD0000;">controls</span> <span class="er" style="color: #AD0000;">src</span><span class="ot" style="color: #003B4F;">=</span><span class="st" style="color: #20794D;">"audio.mp3"</span><span class="kw" style="color: #003B4F;">&gt;</span></span>
<span id="cb33-4">        Your browser does not support the</span>
<span id="cb33-5">        <span class="kw" style="color: #003B4F;">&lt;code&gt;</span>audio<span class="kw" style="color: #003B4F;">&lt;/code&gt;</span> element.</span>
<span id="cb33-6"><span class="kw" style="color: #003B4F;">&lt;/audio&gt;</span></span>
<span id="cb33-7"><span class="kw" style="color: #003B4F;">&lt;/figure&gt;</span></span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb34-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb34-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb34-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">resources</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb34-4"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> audio.mp3</span></span></code></pre></div>
</div>
</div>
</div></li>
<li><p><strong>Links from your old blog:</strong> If you already had a blog, then you may wish that your old hyperlinks continue to work. For example, I have linked to my blog post about rounded rectangles in <a href="https://twitter.com/rappa753/status/1521882068887777281">this tweet</a>. Back then, my blog post lived at</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb35-1"><span class="at" style="color: #657422;">https://albert-rapp.de/post/2022-05-01-use-grobs-to-get-rounded-corners/</span></span></code></pre></div>
<p>Everything after <code>.de/</code> reflects the directory structure of my <strong>old blog</strong>. But this Quarto blog has a different structure. Now, this blog post lives at</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb36-1"><span class="at" style="color: #657422;">https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html</span></span></code></pre></div>
<p>Therefore, the old link will not work anymore. Thankfully, we can save our old link via <a href="https://quarto.org/docs/websites/website-navigation.html#redirects">redirects</a>. All we have to do is add an <strong>alias</strong> in the YAML header of the blog post like so</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb37-1"><span class="fu" style="color: #4758AB;">aliases</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb37-2"><span class="co" style="color: #5E5E5E;">  # Move from post's directory to root via ../../../</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;">  # Then add structure from old blog</span></span>
<span id="cb37-4"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> ../../../post/2022-05-01-use-grobs-to-get-rounded-corners/index.html</span></span></code></pre></div></li>
<li><p><strong>Hide sections:</strong> Using the chunk option <code>code-fold</code> you can hide code in a dropdown menu like this.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</details>
</div>
<p>If you take a look at the resulting HTML-code, you will notice that this is really just a combination of two HTML-tags <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code>. Thus, folding is not just restricted to code chunks. If you want to e.g. fold an entire section, you can do it manually with HTML.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb39-1"><span class="kw" style="color: #003B4F;">&lt;details&gt;</span></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;">&lt;summary&gt;</span> Appendix <span class="kw" style="color: #003B4F;">&lt;/summary&gt;</span></span>
<span id="cb39-3"></span>
<span id="cb39-4">## Appendix </span>
<span id="cb39-5">I can fill this with regular Markdown. This is **bold**. This is *italic*.</span>
<span id="cb39-6"></span>
<span id="cb39-7">Also, code chunks work. </span>
<span id="cb39-8"></span>
<span id="cb39-9">```{.r}</span>
<span id="cb39-10">library(ggplot2)</span>
<span id="cb39-11">mpg |&gt;</span>
<span id="cb39-12">  ggplot(aes(hwy, cty)) +</span>
<span id="cb39-13">  geom_jitter()</span>
<span id="cb39-14">#``` </span>
<span id="cb39-15">(Remove # and . in {.r}. It's only here for the demo. </span>
<span id="cb39-16">Without it, this is a nested code block.</span>
<span id="cb39-17">And this does not render well.) </span>
<span id="cb39-18"><span class="kw" style="color: #003B4F;">&lt;/details&gt;</span></span></code></pre></div>
<details>
<summary>
<p>Appendix</p>
</summary>
<h2 id="appendix" class="anchored">Appendix</h2>
<p>I can fill this with regular Markdown. This is <strong>bold</strong>. This is <em>italic</em>.</p>
<p>Also, code chunks work.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb40-2">mpg <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(hwy, cty)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb40-4">  <span class="fu" style="color: #4758AB;">geom_jitter</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="13_quarto_blog_writing_guide_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</details></li>
</ul>
</section>
<section id="publish-your-blog-online" class="level2">
<h2 class="anchored" data-anchor-id="publish-your-blog-online">Publish your blog online</h2>
<p>My preferred publisher is <a href="https://www.netlify.com/">Netlify</a>. It’s really easy to set up to publish with them. So, let me describe how that works. Mainly, you have two choices once you have registered with Netlify.</p>
<ol type="1">
<li>Give Netlify access to the GitHub repository that your blog lives in. Once access is granted, Netlify will deploy the most recent version of your blog whenever you push changes to your repository.</li>
<li>Alternatively, you can use the command line. To do so, open a new terminal and set its working directory to your blog’s working directory. Then, you only need to call <code>quarto publish netlify</code> and follow the instructions on the terminal.</li>
</ol>
<p>You can use the latter method for publishing at other services as well. For more information, let me refer you to <a href="https://quarto.org/docs/output-formats/html-publishing.html">Quarto’s docs</a>. Also, let me mention that Netlify will give you a Netlify URL, e.g. <code>tourmaline-faloodeh-4b36ef.netlify.com</code>. However, I think it’s advisable to buy a custom domain and link it to the Netlify URL (Netlify provides help on that).</p>
</section>
<section id="writing-tips" class="level2">
<h2 class="anchored" data-anchor-id="writing-tips">Writing tips</h2>
<p>I don’t consider my writing particularly good and I am sure that I use a fair share of imperfect grammar. But a small language barrier shouldn’t stop me or you from publishing a blog. And before I leave you, let me share a few pearls of writing wisdom that I found helpful.</p>
<ul>
<li><p><strong>Consistency</strong> <strong>is key</strong>: Blogging is like any other any new habit: It takes time until it sticks. That’s why it is really important that you try to post something regularly. If you have trouble overcoming your weaker self I can recommend the book <a href="https://amzn.to/3aYm5NX">Atomic Habits by James Clear</a>. It contains TONS of great strategies to make a new habit stick.</p></li>
<li><p><strong>Perfectionism is the enemy:</strong> One major obstacle that can stop you from writing regularly is perfectionism. Don’t worry if your blog post is perfect, or original, or super exciting or whatever. It is maddingly easy to waste hours “polishing” a blog post to perfection. So, if you catch yourself polishing a lot. Then maybe think about just hitting publish.</p></li>
<li><p><strong>Expect the indifference:</strong> When you publish a blog post, you never know if people will be excited about what you wrote. Chances are that they won’t be. In fact, if you just got started, then count on it! This may sound harsh but it’s actually great. Use this knowledge to counter your need for perfectionism. This can help you to work on your consistency until eventually people care about what you write.</p></li>
<li><p><strong>Get feedback on your writing:</strong> Nothing makes writing more boring than not getting any feedback. I recommend that you advertise your posts on Rweekly and Twitter. Depending on how people engage with your post (or not), you will have feedback about how much your community cares about the topic you chose. Eventually, you will hit on a topic that people care about. Then, it can be incredibly fun to double down on this topic or engage in conversations about it.</p></li>
</ul>
<p>For more tips, you can check out <a href="https://twitter.com/david_perell">David Perell</a>’s or <a href="https://twitter.com/dickiebush">Dickie Bush</a>’s work. I learned most of the above writing tips from them.</p>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>Phew! This is the longest and most in-depth guide that I ever wrote. And this was also the scariest post I ever wrote. When I started on this Quarto endeavor almost two months ago, I had literally ZERO knowledge about</p>
<ul>
<li><p>HTML/CSS</p></li>
<li><p>Responsive design</p></li>
<li><p>Version control with <code>{renv}</code></p></li>
</ul>
<p>and many other small things I’ve learned since then. Thus, I see this guide as a culmination of everything I’ve learned and I am oddly proud about it.</p>
<p>I hope that you enjoyed this guide and that it serves you well. Please reach out to me if you run into any trouble with what I wrote. I am more than happy to improve my guide so that it can help more people.</p>
<p>And don’t forget to stay in touch via my <a href="https://alberts-newsletter.beehiiv.com/subscribe">Newsletter</a>, <a href="https://twitter.com/rappa753">Twitter</a> or my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes, this is exactly what happened to me. I was young and foolish.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html</guid>
  <pubDate>Sat, 23 Jul 2022 22:00:00 GMT</pubDate>
  <media:content url="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/images/paste-73EA840D.png" medium="image" type="image/png" height="102" width="144"/>
</item>
<item>
  <title>How to embed a Shiny app into your blog posts</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/12_embedding_shiny_app/12_embedding_shiny_app.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>Today’s a short blog post. It’s mainly for sharing a cool trick I just learned.</p>
<p>Here’s a simple template to incorporate your Shiny app into an HTML file. For instance, you can incorporate your shiny app into your blog post like I do here. Simply exchange the src argument by your Shiny app’s URL and then you’re good to go. Here, I use the app that I have <a href="../08_drawing_ggplot_interactively/08_drawing_ggplot_interactively.html">shown you a couple of months ago</a>.</p>
<pre><code>&lt;iframe src="https://rappa.shinyapps.io/interactive-ggplot" data-external="1" width="925px" height="800px"&gt;
&lt;/iframe&gt;</code></pre>
<p>From what I could tell, this is same code that <code>knitr::include_app()</code> drops. But including the <code>iframe</code> manually let’s you adjust the width <strong>and</strong> height of your frame. Beware that you will have to choose the dimensions large enough for your Shiny app.</p>
<p>UPDATE: Originally, I had demonstrated the above code chunk here. But that causes unnecessary traffic on my shinyapps.io account, so I removed the demo.</p>



 ]]></description>
  <category>Shiny</category>
  <category>Shorts</category>
  <guid>https://albert-rapp.de/posts/12_embedding_shiny_app/12_embedding_shiny_app.html</guid>
  <pubDate>Sun, 08 May 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Use {lubridate} and {rtweet} to analyze your Twitter timeline</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>This week, I am oddly proud to announce that I have reached 1000 followers on <a href="https://twitter.com/rappa753">Twitter</a>. Check out the visualization that I have created for this joyous occasion.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="final_viz.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/11_track_twitter_followers/final_viz.png" class="img-fluid figure-img" width="1754"></a></p>
</figure>
</div>
</div>
</div>
<p>To me, my rising follower count and the somewhat regular mails that I receive are a sign that people like to read my blog. And to thank you all for following my work, let me give you a quick intro to the packages <code>rtweet</code> and <code>lubridate</code>. These were instrumental in creating the above visual.</p>
<section id="working-with-rtweet" class="level2">
<h2 class="anchored" data-anchor-id="working-with-rtweet">Working with rtweet</h2>
<p>At the end of February 2022, I wondered how my follower count evolves over time. Unfortunately, this is not something Twitter shows you by default. The Analytics page only shows me the change within my last 28 days. To overcome this drawback, I consulted the <code>rtweet</code> package which is a fabulous package that lets you interact with Twitter’s API through R.</p>
<p>In my case, I only do rudimentary work with it and track my followers over time. For this to work, I have set up an R script that runs every hour to download a list of my followers. Each hour, the list’s length tells me how many followers I have.</p>
<p>If you want to do the same, install the package first. Make sure to install the development version from GitHub, though.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"rOpenSci/rtweet"</span>)</span></code></pre></div>
</div>
<section id="basic-functionalities" class="level3">
<h3 class="anchored" data-anchor-id="basic-functionalities">Basic functionalities</h3>
<p><code>rtweet</code> comes with a lot of convenient function. Most of these start with <code>get_</code>. For instance, there are</p>
<ul>
<li><code>get_followers()</code>: This is the function to get a list of an account’s followers.</li>
<li><code>get_timeline()</code>: This gives you the a user’s timeline like tweets, replies and mentions.</li>
<li><code>get_retweets()</code>: This gives you the most recent retweets of a given tweet.</li>
</ul>
<p>My aforementioned R script just runs <code>get_followers()</code> and computes the number of rows of the resulting tibble.</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(rtweet)</span>
<span id="cb2-2">tib <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_followers</span>(<span class="st" style="color: #20794D;">'rappa753'</span>)</span>
<span id="cb2-3">tib</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,207 × 2
   from_id             to_id   
   &lt;chr&gt;               &lt;chr&gt;   
 1 1447053543786090504 rappa753
 2 254563418           rappa753
 3 382843130           rappa753
 4 1543220302296977408 rappa753
 5 1673477562          rappa753
 6 1308732763726589954 rappa753
 7 1549153427061501952 rappa753
 8 1387151657507692545 rappa753
 9 1374557861309775872 rappa753
10 1479882642413793284 rappa753
# … with 2,197 more rows
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">nrow</span>(tib)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2207</code></pre>
</div>
</div>
<p>For my above visualization, I used <code>get_timeline()</code> to extract my five most popular tweets. Here, I ranked the popularity by the count of likes resp. “favorites” as <code>rtweet</code> likes to call it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb6-2">tl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_timeline</span>(<span class="st" style="color: #20794D;">'rappa753'</span>, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb6-3">tl_slice <span class="ot" style="color: #003B4F;">&lt;-</span> tl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">slice_max</span>(favorite_count, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">select</span>(created_at, full_text, favorite_count, retweet_count) </span>
<span id="cb6-6">tl_slice</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
  created_at          full_text                                  favor…¹ retwe…²
  &lt;dttm&gt;              &lt;chr&gt;                                        &lt;int&gt;   &lt;int&gt;
1 2022-06-18 15:46:22 "Ever heard of logistic regression? Or Po…    1460     231
2 2022-07-10 16:18:10 "The #rstats ecosystem makes splitting a …     660      95
3 2022-03-05 21:56:33 "The fun thing about getting better at #g…     507      82
4 2022-07-09 13:21:04 "Creating calendar plots with #rstats is …     419      53
5 2022-02-19 18:32:23 "Ever wanted to use colors in #ggplot2 mo…     347      56
# … with abbreviated variable names ¹​favorite_count, ²​retweet_count</code></pre>
</div>
</div>
<p>Notice that I tweeted two of these before I started tracking my followers. Consequently, I ignored them for my visualization.</p>
<p>Unfortunately, the <code>rtweet</code> package cannot do everything. For example, the snapshot functionality <code>tweet_shot()</code> does not work anymore. I think that’s because the Twitter API changed.</p>
<p>This bothered me during the <a href="https://twitter.com/30DayChartChall">30 day chart challenge</a> in April because I wanted to automatically extract great visualizations from Twitter. But as <code>tweet_shot()</code> was not working, I had to call Twitter’s API manually without <code>rtweet</code>. If you’re curious about how that works, check out my <a href="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html">corresponding blog post</a>. There, I’ve also explained how to set up a script that gets executed, say, every hour automatically.</p>
</section>
<section id="setting-up-a-twitter-app" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-a-twitter-app">Setting up a Twitter app</h3>
<p>This pretty much explains how <code>rtweet</code> works. In general, it is really easy to use. And if you only want to use it only occasionally, there is not much more to it.</p>
<p>However, if you want to use the package more often - as in calling the API every hour - then you need to set up a Twitter app. You can read up on how that works in the “Preparations” section of the <a href="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html">above blog post</a>. Once you’ve got that down, your <code>rtweet</code> calls can be authenticated through your Twitter app like so.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">auth <span class="ot" style="color: #003B4F;">&lt;-</span> rtweet<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rtweet_app</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;">bearer_token =</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'twitter-bearer-token'</span>, <span class="at" style="color: #657422;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb8-3">)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">auth_as</span>(auth)</span></code></pre></div>
</div>
<p>Here, I have used the <code>keyring</code> package to hide the bearer token of my Twitter app. If that doesn’t mean anything to you, let me once again refer to the <a href="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html">above blog post</a>. The important thing is that after these lines ran your <code>rtweet</code> calls get funneled through your own Twitter app.</p>
</section>
</section>
<section id="working-with-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="working-with-lubridate">Working with lubridate</h2>
<p>As you saw above, the timeline that we extracted and saved in <code>rtweet</code> contains time data. Here it is once again.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">tl_slice</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
  created_at          full_text                                  favor…¹ retwe…²
  &lt;dttm&gt;              &lt;chr&gt;                                        &lt;int&gt;   &lt;int&gt;
1 2022-06-18 15:46:22 "Ever heard of logistic regression? Or Po…    1460     231
2 2022-07-10 16:18:10 "The #rstats ecosystem makes splitting a …     660      95
3 2022-03-05 21:56:33 "The fun thing about getting better at #g…     507      82
4 2022-07-09 13:21:04 "Creating calendar plots with #rstats is …     419      53
5 2022-02-19 18:32:23 "Ever wanted to use colors in #ggplot2 mo…     347      56
# … with abbreviated variable names ¹​favorite_count, ²​retweet_count</code></pre>
</div>
</div>
<p>Sadly, working with times and dates is rarely pleasant. But we can make our life a bit easier by using the <code>lubridate</code> package which was made for that. To show you how it works, it is probably best to show you a couple of use cases.</p>
<p>All of these will be taken from what I had to deal with to create my celebratory visualization. But I simplified it to minimal examples for this blog post. More use cases can be found in the <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/lubridate.pdf">lubridate cheatsheet</a> or the <a href="https://bookdown.org/Tazinho/Tidyverse-Cookbook/dates-and-times.html">tidyverse cookbook ressource</a> by Malte Grosser.</p>
<section id="parse-dates-and-times" class="level3">
<h3 class="anchored" data-anchor-id="parse-dates-and-times">Parse dates and times</h3>
<p><strong>EDIT July 13, 2022:</strong> After moving my blog to quarto, <code>{rtweet}</code> updated its default output format. Now, parsing dates and times is not necessary anymore. I leave this section in here because the code may still be helpful in other situations.</p>
<p>First, I needed to convert the <code>created_at</code> column from <code>character</code> to <code>datetime</code> format. The easiest way to do that gets rid of <code>+0000</code> in the character vector and then parses the vector into the right format via <code>parse_date_time()</code>. But there is a catch. Check out what happens if I try this on my computer.</p>
<div class="cell" data-mesage="false">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb11-2">tl_slice <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">created_at =</span> <span class="fu" style="color: #4758AB;">parse_date_time</span>(</span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;">str_remove</span>(created_at, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">+0000'</span>), <span class="co" style="color: #5E5E5E;"># remove the +0000 </span></span>
<span id="cb11-5">    <span class="at" style="color: #657422;">orders =</span> <span class="st" style="color: #20794D;">'a b d H:M:S Y'</span></span>
<span id="cb11-6">  ))</span></code></pre></div>
</div>
<p>See how all values in <code>created_at</code> are <code>NA</code> now? That’s a problem. And we will solve it very soon. But first, let me explain how the function call works.</p>
<p>The <code>orders</code> argument specifies how the vector <code>created_at</code> (without <code>+0000</code>) is to be understood. We clarify that <code>created_at</code> contains (in the order of appearance)</p>
<ol type="1">
<li>abbreviated week day names (<code>a</code>)</li>
<li>abbreviated month names (<code>b</code>)</li>
<li>the day of the month as decimals (<code>d</code>)</li>
<li>and so on</li>
</ol>
<p>Where do these abbreviations <code>a</code>, <code>b</code>, <code>d</code>, etc. come from? They are defined in the help page of <code>parse_date_time()</code>. You can find them in the section “Details”. But why does the code not work? Why do we always get an <code>NA</code>? For once, my computer is truly the problem. Or rather, its settings.</p>
<p>By default, my computer is set to German. But even if RStudio or R’s error messages are set to English, my computer’s so-called “locale” may be still be set to German. That’s a problem because abbreviations like “Sat” and “Wed” refer to the <strong>English</strong> words “Saturday” and “Wednesday”. So, we need to make sure that <code>parse_date_time()</code> understands that it needs to use an English locale. Then, everything works out.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">parsed_highlights <span class="ot" style="color: #003B4F;">&lt;-</span> tl_slice <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">created_at =</span> <span class="fu" style="color: #4758AB;">parse_date_time</span>(</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">str_remove</span>(created_at, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">+0000'</span>), <span class="co" style="color: #5E5E5E;"># remove the +0000 </span></span>
<span id="cb12-4">    <span class="at" style="color: #657422;">orders =</span> <span class="st" style="color: #20794D;">'a b d H:M:S Y'</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;">locale =</span> <span class="st" style="color: #20794D;">"en_US.UTF-8"</span></span>
<span id="cb12-6">  ))</span>
<span id="cb12-7">parsed_highlights</span></code></pre></div>
</div>
<div class="cell">

</div>
<p>We are now ready to send this data to ggplot. Since <code>created_at</code> is formatted in datetime now, ggplot will understand what it means when we map <code>x = created_at</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">parsed_highlights <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(created_at, favorite_count)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_track_twitter_followers_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="using-scale_x_datetime-and-locale" class="level3">
<h3 class="anchored" data-anchor-id="using-scale_x_datetime-and-locale">Using scale_x_date(time) and locale</h3>
<p>Did you see that the x-axis uses German abbreviations and doesn’t show what year we’re in? That’s not great. Let’s change that. As is always the case when we want to format the axes we will need a <code>scale_*()</code> function. Here, what we need is <code>scale_x_datetime()</code>.</p>
<p>But this won’t solve our German locale problem. The easiest way to solve that tricky ordeal is to change the locale globally via <code>Sys.setlocale()</code>. Don’t worry, though. The locale will reset after restarting R. No permanent “damage” here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">Sys.setlocale</span>(<span class="st" style="color: #20794D;">"LC_ALL"</span>,<span class="st" style="color: #20794D;">"en_US.UTF-8"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=de_DE.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=de_DE.UTF-8;LC_IDENTIFICATION=C"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_highlights <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(created_at, favorite_count)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;">scale_x_datetime</span>(</span>
<span id="cb16-5">    <span class="at" style="color: #657422;">date_breaks =</span> <span class="st" style="color: #20794D;">'2 months'</span>, <span class="co" style="color: #5E5E5E;"># break every two months</span></span>
<span id="cb16-6">    <span class="at" style="color: #657422;">date_labels =</span> <span class="st" style="color: #20794D;">'%b %Y'</span></span>
<span id="cb16-7">  )</span>
<span id="cb16-8">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_track_twitter_followers_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice that we have once again used the same abbreviation as for <code>parse_date_time()</code>. This time, though, they have to be preceded by <code>%</code>. Don’t ask me why. It is just the way it is.</p>
</section>
<section id="create-new-dates" class="level3">
<h3 class="anchored" data-anchor-id="create-new-dates">Create new dates</h3>
<p>Let us add a rectangle to our previous plot via an annotation. This is similar to what I needed to do when adding my “mysterious wonderland” to my plot.</p>
<p>Since the <code>x</code> aesthetic is formatted to datetime, we have to specify dates for the <code>xmin</code> and <code>xmax</code> aesthetic of our annotation. Therefore, we need to create dates manually. In this case, <code>make_datetime()</code> is the way to go. If we’re dealing only with dates (without times), then <code>make_date()</code> is a useful pendant. Both functions are quite straightforward.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;">'rect'</span>,</span>
<span id="cb17-4">    <span class="at" style="color: #657422;">xmin =</span> <span class="fu" style="color: #4758AB;">make_datetime</span>(<span class="at" style="color: #657422;">year =</span> <span class="dv" style="color: #AD0000;">2021</span>, <span class="at" style="color: #657422;">month =</span> <span class="dv" style="color: #AD0000;">11</span>, <span class="at" style="color: #657422;">day =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">hour =</span> <span class="dv" style="color: #AD0000;">12</span>),</span>
<span id="cb17-5">    <span class="at" style="color: #657422;">xmax =</span> <span class="fu" style="color: #4758AB;">make_datetime</span>(<span class="at" style="color: #657422;">year =</span> <span class="dv" style="color: #AD0000;">2021</span>, <span class="at" style="color: #657422;">month =</span> <span class="dv" style="color: #AD0000;">9</span>), </span>
<span id="cb17-6">    <span class="at" style="color: #657422;">ymin =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb17-7">    <span class="at" style="color: #657422;">ymax =</span> <span class="dv" style="color: #AD0000;">273</span>,</span>
<span id="cb17-8">    <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb17-9">  )</span>
<span id="cb17-10">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_track_twitter_followers_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="filter-with-intervals" class="level3">
<h3 class="anchored" data-anchor-id="filter-with-intervals">Filter with intervals</h3>
<p>Maybe we want to highlight a part of our line. To do so, we could filter our data to check whether certain date ranges correspond to parts that we want to highlight. Usually when we want to check if a value <code>x</code> is within a certain set of <code>objects</code> we use <code>x %in% objects</code>.</p>
<p>To do the same with dates, we need to create an interval with <code>interval()</code> first. Then, we can use that in <code>filter()</code> in conjunction with <code>%within%</code> instead of <code>%in%</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">my_interval <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">interval</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;">start =</span> <span class="fu" style="color: #4758AB;">make_date</span>(<span class="at" style="color: #657422;">year =</span> <span class="dv" style="color: #AD0000;">2022</span>, <span class="at" style="color: #657422;">month =</span> <span class="dv" style="color: #AD0000;">2</span>), </span>
<span id="cb18-3">  <span class="at" style="color: #657422;">end =</span> <span class="fu" style="color: #4758AB;">make_date</span>(<span class="at" style="color: #657422;">year =</span> <span class="dv" style="color: #AD0000;">2022</span>, <span class="at" style="color: #657422;">month =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">day =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb18-4">)</span>
<span id="cb18-5"></span>
<span id="cb18-6">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;">geom_line</span>(</span>
<span id="cb18-8">    <span class="at" style="color: #657422;">data =</span> parsed_highlights <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(created_at <span class="sc" style="color: #5E5E5E;">%within%</span> my_interval),</span>
<span id="cb18-9">    <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">'red'</span>,</span>
<span id="cb18-10">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb18-11">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_track_twitter_followers_files/figure-html/unnamed-chunk-15-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="calculations-with-times" class="level3">
<h3 class="anchored" data-anchor-id="calculations-with-times">Calculations with times</h3>
<p>Say that you want to highlight the first five days after a certain date. (That’s exactly what I did in my plot.) Then, you can simply add <code>days(5)</code> to this date. There are similar functions like <code>minutes()</code>, <code>hours()</code> and so on. Let me show you how that may look in a visualization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;">'rect'</span>,</span>
<span id="cb19-4">    <span class="at" style="color: #657422;">xmin =</span> parsed_highlights[[<span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>]] <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">hours</span>(<span class="dv" style="color: #AD0000;">24</span>),</span>
<span id="cb19-5">    <span class="at" style="color: #657422;">xmax =</span> parsed_highlights[[<span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>]] <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">days</span>(<span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb19-6">    <span class="at" style="color: #657422;">ymin =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="cn" style="color: #8f5902;">Inf</span>,</span>
<span id="cb19-7">    <span class="at" style="color: #657422;">ymax =</span> <span class="cn" style="color: #8f5902;">Inf</span>,</span>
<span id="cb19-8">    <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.25</span>,</span>
<span id="cb19-9">    <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">'blue'</span></span>
<span id="cb19-10">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_track_twitter_followers_files/figure-html/unnamed-chunk-16-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>This was a short intro to <code>lubridate</code> and <code>rtweet</code>. Naturally, the evolution of my follower count contained a lot more steps. In the end, though, these steps were merely a collection of</p>
<ul>
<li>techniques you know from my two previous storytelling with ggplot posts (see <a href="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html">here</a> and <a href="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html">here</a>) plus</li>
<li>data wrangling using times and dates with the functions that I just showed you.</li>
</ul>
<p>Once again, thank you all for your support. And if you liked this post and don’t follow my work yet, then consider following me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <category>API</category>
  <guid>https://albert-rapp.de/posts/11_track_twitter_followers/11_track_twitter_followers.html</guid>
  <pubDate>Thu, 05 May 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Storytelling in ggplot using rounded rectangles</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>A standard ggplot output can rarely convey a powerful message. For effective data visualization you need to customize your plot. <a href="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html">A couple of weeks ago</a>, I showed you how.</p>
<p>In this blog post, I will rebuild another great data viz from scratch. If you have read my original blog post, then you won’t have to learn many new tricks. Most of the techniques that I use can be found there. This is also why I save explanations only for the parts that are new. This should keep this blog post a bit shorter. You’re welcome.</p>
<p>Nevertheless, in today’s installment of my <a href="https://albert-rapp.de/ggplot-series.html">ggplot2 series</a> I will teach you something truly special. I will teach you how to create…*drum roll*…rounded rectangles. Sounds exciting, doesn’t it? Well, maybe not. But it looks great. Check out what we’ll build today.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="final_remake.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/final_remake.png" class="img-fluid figure-img" width="944"></a></p>
</figure>
</div>
</div>
</div>
<p>This plot comes to you via another excellent entry of the <a href="https://www.storytellingwithdata.com/blog/bar-charts-and-dot-plots-and-line-graphs-oh-my">storytelling with data (SWD) blog</a>. To draw rectangles with rounded rectangles we can leverage the <a href="https://github.com/hrbrmstr/ggchicklet">ggchicklet package</a>. Though, for some mysterious reason, the <code>geom_*</code> that we need is hidden in that package. Therefore, we will have to dig it out. That’s the easy way to do it. And honestly, this is probably also the practical way to do it.</p>
<p>However, every now and then I want to do things the hard way. So, my dear reader, this is why I will also show you how to go from rectangles to rounded rectangles the hard way. But only after showing you the easy way first, of course. Only then, in the second part of this blog post, will I take the sadistically-inclined among you on a tour to the world of grobs.</p>
<p>Grobs, you say? <a href="https://www.youtube.com/watch?v=71GWS3ccmvI">Is that an instrument</a>? No, Patrick, it is an <strong>gr</strong>aphical <strong>ob</strong>ject. Under the hood, we can transform a ggplot to a list of graphical objects. And with a few hacks, we can adjust that list. This way, the list will contain not <code>rectGrobs</code> but <code>roundrectGrobs</code>. Then, we can put everything back together, close the hood and enjoy our round rectangles. Now, enough intro, let’s go.</p>
<section id="basic-plot" class="level2">
<h2 class="anchored" data-anchor-id="basic-plot">Basic plot</h2>
<p>First, let us recreate the “bad” plot that the above SWD blog post remodels. In the end, we will work on the remodeled data viz too. As always, though, there is something to be learnt from <a href="https://www.allisonhorst.com/post/do-your-worst/">creating an ugly plot</a>. So, here’s the beast that we will build.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="before_plot.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Source: Storytelling with data (SWD) blog"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/before_plot.png" class="img-fluid figure-img" style="width:100.0%"></a></p>
<p></p><figcaption class="figure-caption">Source: <a href="https://www.storytellingwithdata.com/blog/bar-charts-and-dot-plots-and-line-graphs-oh-my">Storytelling with data (SWD) blog</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<section id="read-data" class="level3">
<h3 class="anchored" data-anchor-id="read-data">Read data</h3>
<p>I didn’t find the underlying data and had to guess the values from the plot. Thus, I probably didn’t get the values exactly right. But for our purposes this should suffice. If you want, you can download the European csv-file that I created <a href="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/ratios.csv">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Use read_csv2 because it's an European file</span></span>
<span id="cb1-3">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv2</span>(<span class="st" style="color: #20794D;">'ratios.csv'</span>)</span></code></pre></div>
</div>
</section>
<section id="compute-averages" class="level3">
<h3 class="anchored" data-anchor-id="compute-averages">Compute averages</h3>
<p>Let me point out that taking the average of the ratios may not necessarily give an appropriate result (in a statistical kind of sense). But, once again, this should not bother us as we only want to learn how to plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">avgs <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-4">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb2-5">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'ratio'</span></span>
<span id="cb2-6">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;">group_by</span>(type) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">ratio =</span> <span class="fu" style="color: #4758AB;">mean</span>(ratio)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">location =</span> <span class="st" style="color: #20794D;">'REGION AVERAGE'</span>)</span>
<span id="cb2-10">avgs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  type               ratio location      
  &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;         
1 inventory_turnover  9.78 REGION AVERAGE
2 store_lower         7.11 REGION AVERAGE
3 store_upper        12.1  REGION AVERAGE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">### Combine with data </span></span>
<span id="cb4-2">dat_longer <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb4-6">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'ratio'</span></span>
<span id="cb4-7">  ) </span>
<span id="cb4-8">dat_longer_with_avgs <span class="ot" style="color: #003B4F;">&lt;-</span> dat_longer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">bind_rows</span>(avgs)</span></code></pre></div>
</div>
</section>
<section id="create-bars" class="level3">
<h3 class="anchored" data-anchor-id="create-bars">Create bars</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Colors we will use throughout this blog post</span></span>
<span id="cb5-2">color_palette <span class="ot" style="color: #003B4F;">&lt;-</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"># Make sure that bars are in the same order as in the data set</span></span>
<span id="cb5-5">dat_factored <span class="ot" style="color: #003B4F;">&lt;-</span> dat_longer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">location =</span> <span class="fu" style="color: #4758AB;">factor</span>(location, <span class="at" style="color: #657422;">levels =</span> dat<span class="sc" style="color: #5E5E5E;">$</span>location)) </span>
<span id="cb5-7"></span>
<span id="cb5-8">p <span class="ot" style="color: #003B4F;">&lt;-</span> dat_factored <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(location, ratio)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb5-11">    <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'inventory_turnover'</span>),</span>
<span id="cb5-12">    <span class="at" style="color: #657422;">fill =</span> color_palette[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb5-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-14">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb5-15">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="turn-labels-and-get-rid-of-axis-text" class="level3">
<h3 class="anchored" data-anchor-id="turn-labels-and-get-rid-of-axis-text">Turn labels and get rid of axis text</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb6-4">    <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">50</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-5">  )</span>
<span id="cb6-6">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="remove-expansion-to-get-x-labels-closer-to-the-bars" class="level3">
<h3 class="anchored" data-anchor-id="remove-expansion-to-get-x-labels-closer-to-the-bars">Remove expansion to get x-labels closer to the bars</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">30</span>), <span class="at" style="color: #657422;">expand =</span> F)</span>
<span id="cb7-2">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="remove-other-grid-lines" class="level3">
<h3 class="anchored" data-anchor-id="remove-other-grid-lines">Remove other grid lines</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;">panel.grid.major.x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb8-5">    <span class="at" style="color: #657422;">panel.grid.major.y =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">'black'</span>, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb8-6">  )</span>
<span id="cb8-7">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="format-y-axis" class="level3">
<h3 class="anchored" data-anchor-id="format-y-axis">Format y-axis</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb9-4">    <span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">label_comma</span>(<span class="at" style="color: #657422;">accuracy =</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb9-5">  )</span>
<span id="cb9-6">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-points" class="level3">
<h3 class="anchored" data-anchor-id="add-points">Add points</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'store_lower'</span>),</span>
<span id="cb10-4">    <span class="at" style="color: #657422;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb10-5">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb10-6">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'store_upper'</span>),</span>
<span id="cb10-9">    <span class="at" style="color: #657422;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">3</span>],</span>
<span id="cb10-10">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb10-11">  ) </span>
<span id="cb10-12">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-average-lines" class="level3">
<h3 class="anchored" data-anchor-id="add-average-lines">Add average lines</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">geom_hline</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;">yintercept =</span> avgs[[<span class="dv" style="color: #AD0000;">3</span>, <span class="st" style="color: #20794D;">'ratio'</span>]], </span>
<span id="cb11-4">    <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span>, </span>
<span id="cb11-5">    <span class="at" style="color: #657422;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">3</span>]</span>
<span id="cb11-6">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">geom_hline</span>(</span>
<span id="cb11-8">    <span class="at" style="color: #657422;">yintercept =</span> avgs[[<span class="dv" style="color: #AD0000;">2</span>, <span class="st" style="color: #20794D;">'ratio'</span>]], </span>
<span id="cb11-9">    <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span>, </span>
<span id="cb11-10">    <span class="at" style="color: #657422;">col =</span> color_palette[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb11-11">  )</span>
<span id="cb11-12">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-text-labels" class="level3">
<h3 class="anchored" data-anchor-id="add-text-labels">Add text labels</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat_factored, type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'inventory_turnover'</span>),</span>
<span id="cb12-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">comma</span>(ratio, <span class="at" style="color: #657422;">accuarcy =</span> <span class="fl" style="color: #AD0000;">0.1</span>)),</span>
<span id="cb12-5">    <span class="at" style="color: #657422;">nudge_y =</span> <span class="fl" style="color: #AD0000;">0.8</span>,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">2.5</span></span>
<span id="cb12-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="improved-plot" class="level2">
<h2 class="anchored" data-anchor-id="improved-plot">Improved plot</h2>
<p>Now, let us begin building the improved plot. First, let us get the long labels onto the y-axis and use regular rectangles before we worry about the rounded rectangles.</p>
<section id="flip-axes-and-use-rectangles-to-show-upper-and-lower-bounds." class="level3">
<h3 class="anchored" data-anchor-id="flip-axes-and-use-rectangles-to-show-upper-and-lower-bounds.">Flip axes and use rectangles to show upper and lower bounds.</h3>
<p>Unfortunately, <code>geom_rect()</code> does not work as intended.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">dat_with_avgs <span class="ot" style="color: #003B4F;">&lt;-</span> dat_longer_with_avgs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;">names_from =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb13-4">    <span class="at" style="color: #657422;">values_from =</span> <span class="st" style="color: #20794D;">'ratio'</span></span>
<span id="cb13-5">  ) </span>
<span id="cb13-6"></span>
<span id="cb13-7">dat_with_avgs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">geom_rect</span>(</span>
<span id="cb13-10">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb13-11">      <span class="at" style="color: #657422;">xmin =</span> store_lower, </span>
<span id="cb13-12">      <span class="at" style="color: #657422;">xmax =</span> store_upper, </span>
<span id="cb13-13">      <span class="at" style="color: #657422;">ymin =</span> location, </span>
<span id="cb13-14">      <span class="at" style="color: #657422;">ymax =</span> location</span>
<span id="cb13-15">    )</span>
<span id="cb13-16">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Instead, let us create a new numeric column containing a location’s rank based on its <code>inventory_turnover</code>. This is done with <code>row_number()</code>. While we’re at it, let us create a new tibble that also contains information on the colors each geom will use. Then, we can map to these new columns in ggplot and make sure that the values are used as is by setting <code>scale_*_identity()</code>. This is one convenient way to control the aesthetics of each geom <a href="http://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot.html#how-do-i-manually-set-aesthetics-with-aes-and-scale__identity">without functional programming</a>. With the image from above in mind, we know that our final plot will need</p>
<ul>
<li>different <code>col</code>, <code>fill</code> and <code>size</code> values in <code>geom_point()</code></li>
<li>different <code>fill</code> and <code>alpha</code> values in <code>geom_rect()</code></li>
</ul>
<p>Here’s what this tibble looks like.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">bar_height <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.4</span> </span>
<span id="cb14-2">no_highlight_col <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey70'</span></span>
<span id="cb14-3">average_highlight_col <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb14-4">below_highlight <span class="ot" style="color: #003B4F;">&lt;-</span> color_palette[<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb14-5"></span>
<span id="cb14-6">sorted_dat <span class="ot" style="color: #003B4F;">&lt;-</span> dat_with_avgs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">num =</span> <span class="fu" style="color: #4758AB;">row_number</span>(inventory_turnover)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-8">  <span class="co" style="color: #5E5E5E;"># Sort so that everything is in order of rank</span></span>
<span id="cb14-9">  <span class="co" style="color: #5E5E5E;"># Important for text labels later on</span></span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(num)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-11">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb14-12">    <span class="at" style="color: #657422;">rect_color =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb14-13">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower <span class="sc" style="color: #5E5E5E;">~</span> below_highlight,</span>
<span id="cb14-14">      location <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'REGION AVERAGE'</span> <span class="sc" style="color: #5E5E5E;">~</span> average_highlight_col,</span>
<span id="cb14-15">      T <span class="sc" style="color: #5E5E5E;">~</span> no_highlight_col</span>
<span id="cb14-16">    ),</span>
<span id="cb14-17">    <span class="at" style="color: #657422;">rect_alpha =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-18">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-19">      <span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb14-20">      <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb14-21">    ),</span>
<span id="cb14-22">    <span class="at" style="color: #657422;">point_color =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-23">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-24">      below_highlight,</span>
<span id="cb14-25">      <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb14-26">    ),</span>
<span id="cb14-27">    <span class="at" style="color: #657422;">point_fill =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-28">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-29">      below_highlight,</span>
<span id="cb14-30">      <span class="st" style="color: #20794D;">'white'</span></span>
<span id="cb14-31">    ),</span>
<span id="cb14-32">    <span class="at" style="color: #657422;">point_size =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb14-33">      inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower,</span>
<span id="cb14-34">      <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb14-35">      <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb14-36">    )</span>
<span id="cb14-37">  )</span>
<span id="cb14-38">sorted_dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 24 × 10
   locat…¹ inven…² store…³ store…⁴   num rect_…⁵ rect_…⁶ point…⁷ point…⁸ point…⁹
   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;
 1 Castle…    14.7    24.3    20      24 #009E73     0.5 #009E73 #009E73       3
 2 Wellsv…    13.6     7.6     2.5    23 grey70      1   black   white         2
 3 Basin …    12.7     8       4.5    22 grey70      1   black   white         2
 4 Atlant…    12.3    12.8     7.8    21 grey70      1   black   white         2
 5 Neverl…    12.1    18      13.4    20 #009E73     0.5 #009E73 #009E73       3
 6 Bluffi…    11.7     4.2     3      19 grey70      1   black   white         2
 7 Bikini…    11.6    12.5     7.8    18 grey70      1   black   white         2
 8 Metrop…    11.3    24      11.3    17 grey70      1   black   white         2
 9 Hill V…    11      22       7.5    16 grey70      1   black   white         2
10 Venusv…    10.4    15.5    12.3    15 #009E73     0.5 #009E73 #009E73       3
# … with 14 more rows, and abbreviated variable names ¹​location,
#   ²​inventory_turnover, ³​store_upper, ⁴​store_lower, ⁵​rect_color, ⁶​rect_alpha,
#   ⁷​point_color, ⁸​point_fill, ⁹​point_size
# ℹ Use `print(n = ...)` to see more rows</code></pre>
</div>
</div>
<p>Now, we can create our plot. Notice that I set <code>shape = 21</code> in <code>geom_point()</code> to use both the <code>fill</code> and <code>col</code> aesthetic.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">sorted_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_rect</span>(</span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb16-5">      <span class="at" style="color: #657422;">xmin =</span> store_lower, </span>
<span id="cb16-6">      <span class="at" style="color: #657422;">xmax =</span> store_upper, </span>
<span id="cb16-7">      <span class="at" style="color: #657422;">ymin =</span> num <span class="sc" style="color: #5E5E5E;">-</span> bar_height, </span>
<span id="cb16-8">      <span class="at" style="color: #657422;">ymax =</span> num <span class="sc" style="color: #5E5E5E;">+</span> bar_height, </span>
<span id="cb16-9">      <span class="at" style="color: #657422;">fill =</span> rect_color,</span>
<span id="cb16-10">      <span class="at" style="color: #657422;">alpha =</span> rect_alpha</span>
<span id="cb16-11">    ),</span>
<span id="cb16-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb16-14">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb16-15">      <span class="at" style="color: #657422;">x =</span> inventory_turnover,</span>
<span id="cb16-16">      <span class="at" style="color: #657422;">y =</span> num,</span>
<span id="cb16-17">      <span class="at" style="color: #657422;">fill =</span> point_fill,</span>
<span id="cb16-18">      <span class="at" style="color: #657422;">col =</span> point_color,</span>
<span id="cb16-19">      <span class="at" style="color: #657422;">size =</span> point_size</span>
<span id="cb16-20">    ),</span>
<span id="cb16-21">    <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb16-22">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb16-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-24">  <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-25">  <span class="fu" style="color: #4758AB;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-26">  <span class="fu" style="color: #4758AB;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-27">  <span class="fu" style="color: #4758AB;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-28">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-16-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="use-ggchicklet-for-rounded-rectangles" class="level3">
<h3 class="anchored" data-anchor-id="use-ggchicklet-for-rounded-rectangles">Use ggchicklet for rounded rectangles</h3>
<p>The whole point of this blog post is to use rounded rectangles. So let’s do that. The <a href="https://github.com/hrbrmstr/ggchicklet">ggchicklet package</a> has a geom called <code>geom_rrect()</code>. It works just like <code>geom_rect()</code> but accepts another value <code>r</code> which is used to determine the radius of the rounded rectangles. Unfortunately, this geom is not an exported function of this package. This means that if you write <code>ggchicklet::</code> (e.g.&nbsp;in RStudio) and press <code>TAB</code> you won’t see <code>geom_rrect()</code>. Thus, you have to access the internal function via <code>:::</code> (three colons).</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> sorted_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-3">  ggchicklet<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">geom_rrect</span>(</span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb17-5">      <span class="at" style="color: #657422;">xmin =</span> store_lower, </span>
<span id="cb17-6">      <span class="at" style="color: #657422;">xmax =</span> store_upper, </span>
<span id="cb17-7">      <span class="at" style="color: #657422;">ymin =</span> num <span class="sc" style="color: #5E5E5E;">-</span> bar_height, </span>
<span id="cb17-8">      <span class="at" style="color: #657422;">ymax =</span> num <span class="sc" style="color: #5E5E5E;">+</span> bar_height, </span>
<span id="cb17-9">      <span class="at" style="color: #657422;">fill =</span> rect_color,</span>
<span id="cb17-10">      <span class="at" style="color: #657422;">alpha =</span> rect_alpha</span>
<span id="cb17-11">    ),</span>
<span id="cb17-12">    <span class="co" style="color: #5E5E5E;"># Use relative npc unit (values between 0 and 1)</span></span>
<span id="cb17-13">    <span class="co" style="color: #5E5E5E;"># This ensures that radius is not too large for your canvas</span></span>
<span id="cb17-14">    <span class="at" style="color: #657422;">r =</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'npc'</span>)</span>
<span id="cb17-15">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-16">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb17-17">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb17-18">      <span class="at" style="color: #657422;">x =</span> inventory_turnover,</span>
<span id="cb17-19">      <span class="at" style="color: #657422;">y =</span> num,</span>
<span id="cb17-20">      <span class="at" style="color: #657422;">fill =</span> point_fill,</span>
<span id="cb17-21">      <span class="at" style="color: #657422;">col =</span> point_color,</span>
<span id="cb17-22">      <span class="at" style="color: #657422;">size =</span> point_size</span>
<span id="cb17-23">    ),</span>
<span id="cb17-24">    <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb17-25">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb17-26">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-27">  <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-28">  <span class="fu" style="color: #4758AB;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-29">  <span class="fu" style="color: #4758AB;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-30">  <span class="fu" style="color: #4758AB;">scale_alpha_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-31">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb17-32">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-17-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="remove-grid-lines-move-axis-and-add-some-text-elements" class="level3">
<h3 class="anchored" data-anchor-id="remove-grid-lines-move-axis-and-add-some-text-elements">Remove grid lines, move axis and add some text elements</h3>
<p>We will set the y-axis labels manually later on. Otherwise, we cannot change its colors one-by-one. For now, let’s get rid of superfluous grid lines, move the x-axis and add a title.</p>
<p>Notice that I draw the axis line manually with a segment annotation. This seems weird, I know. Unfortunately, it cannot be helped because I still need room for the y-axis labels. And if I do not plot the axis line manually, then the axis line will start all the way to the left. Make sure that you set <code>clip = 'off'</code> in <code>coord_cartesian()</code> for the annotation to be displayed.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">title_lab <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'Review stores with turnover ratios that are below their</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">forecasted range'</span></span>
<span id="cb18-2">title_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">14</span></span>
<span id="cb18-3">axis_label_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">8</span></span>
<span id="cb18-4">text_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">18</span></span>
<span id="cb18-5">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb18-7">    <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb18-8">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb18-9">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-10">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(</span>
<span id="cb18-11">    <span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">25</span>), </span>
<span id="cb18-12">    <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.75</span>, <span class="fl" style="color: #AD0000;">24.75</span>),  </span>
<span id="cb18-13">    <span class="at" style="color: #657422;">expand =</span> F,</span>
<span id="cb18-14">    <span class="at" style="color: #657422;">clip =</span> <span class="st" style="color: #20794D;">'off'</span></span>
<span id="cb18-15">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-16">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb18-17">    <span class="st" style="color: #20794D;">'segment'</span>,</span>
<span id="cb18-18">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb18-19">    <span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">25</span>,</span>
<span id="cb18-20">    <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">24.75</span>,</span>
<span id="cb18-21">    <span class="at" style="color: #657422;">yend =</span> <span class="fl" style="color: #AD0000;">24.75</span>,</span>
<span id="cb18-22">    <span class="at" style="color: #657422;">col =</span> no_highlight_col,</span>
<span id="cb18-23">    <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb18-24">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-25">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb18-26">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'INVENTORY TURNOVER RATIO'</span>,</span>
<span id="cb18-27">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb18-28">    <span class="at" style="color: #657422;">title =</span> title_lab</span>
<span id="cb18-29">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-30">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb18-31">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb18-32">      <span class="at" style="color: #657422;">size =</span> text_size,</span>
<span id="cb18-33">      <span class="at" style="color: #657422;">color =</span> average_highlight_col</span>
<span id="cb18-34">    ),</span>
<span id="cb18-35">    <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb18-36">    <span class="at" style="color: #657422;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb18-37">    <span class="at" style="color: #657422;">axis.title.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb18-38">      <span class="at" style="color: #657422;">size =</span> axis_label_size,</span>
<span id="cb18-39">      <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.21</span>,</span>
<span id="cb18-40">      <span class="at" style="color: #657422;">color =</span> no_highlight_col</span>
<span id="cb18-41">    ),</span>
<span id="cb18-42">    <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb18-43">      <span class="at" style="color: #657422;">size =</span> axis_label_size,</span>
<span id="cb18-44">      <span class="at" style="color: #657422;">color =</span> no_highlight_col</span>
<span id="cb18-45">    ),</span>
<span id="cb18-46">    <span class="at" style="color: #657422;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">color =</span> no_highlight_col, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.25</span>),</span>
<span id="cb18-47">    <span class="at" style="color: #657422;">axis.text.y =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb18-48">    <span class="at" style="color: #657422;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()</span>
<span id="cb18-49">  )</span>
<span id="cb18-50">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-18-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-y-axis-labels" class="level3">
<h3 class="anchored" data-anchor-id="add-y-axis-labels">Add y-axis labels</h3>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">y_axis_text_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb19-2">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb19-5">      <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb19-6">      <span class="at" style="color: #657422;">y =</span> num,</span>
<span id="cb19-7">      <span class="at" style="color: #657422;">label =</span> location,</span>
<span id="cb19-8">      <span class="at" style="color: #657422;">col =</span> no_highlight_col,</span>
<span id="cb19-9">      <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb19-10">      <span class="at" style="color: #657422;">size =</span> y_axis_text_size</span>
<span id="cb19-11">    )</span>
<span id="cb19-12">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-19-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="highlight-words" class="level3">
<h3 class="anchored" data-anchor-id="highlight-words">Highlight words</h3>
<p>Let us turn to text highlights. For that we will need <code>ggtext</code>. This will let us use <code>geom_richtext()</code> instead of <code>geom_text()</code>. Notice that I have note saved the last <code>geom_text()</code> modification in <code>p</code>. Otherwise, we would get two overlapping layers of text. You can highlight single words as demonstrated in my <a href="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html">blog post about effective use of colors</a>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb20-2">sorted_dat_with_new_labels <span class="ot" style="color: #003B4F;">&lt;-</span> sorted_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">location_label =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb20-4">    inventory_turnover <span class="sc" style="color: #5E5E5E;">&lt;</span> store_lower <span class="sc" style="color: #5E5E5E;">~</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb20-5">      <span class="st" style="color: #20794D;">'&lt;span style = "color:{below_highlight}"&gt;**{location}**&lt;/span&gt;'</span></span>
<span id="cb20-6">    ),</span>
<span id="cb20-7">    location <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'REGION AVERAGE'</span> <span class="sc" style="color: #5E5E5E;">~</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb20-8">      <span class="st" style="color: #20794D;">'&lt;span style = "color:{average_highlight_col}"&gt;**{location}**&lt;/span&gt;'</span></span>
<span id="cb20-9">    ),</span>
<span id="cb20-10">    T <span class="sc" style="color: #5E5E5E;">~</span> location</span>
<span id="cb20-11">  ))</span>
<span id="cb20-12"></span>
<span id="cb20-13">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-14">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(</span>
<span id="cb20-15">    <span class="at" style="color: #657422;">data =</span> sorted_dat_with_new_labels,</span>
<span id="cb20-16">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb20-17">      <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb20-18">      <span class="at" style="color: #657422;">y =</span> num,</span>
<span id="cb20-19">      <span class="at" style="color: #657422;">label =</span> location_label,</span>
<span id="cb20-20">      <span class="at" style="color: #657422;">col =</span> no_highlight_col,</span>
<span id="cb20-21">      <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb20-22">      <span class="at" style="color: #657422;">size =</span> y_axis_text_size</span>
<span id="cb20-23">    ),</span>
<span id="cb20-24">    <span class="at" style="color: #657422;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>,</span>
<span id="cb20-25">    <span class="at" style="color: #657422;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb20-26">  )</span>
<span id="cb20-27">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-20-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Fantastic! Next, we only have to highlight words in our call to action. Make sure that <code>plot.title</code> in <code>theme()</code> is an <code>element_markdown()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">title_lab_adjusted <span class="ot" style="color: #003B4F;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb21-2">  <span class="st" style="color: #20794D;">"Review stores with **turnover ratios** that are &lt;span style = 'color:{below_highlight}'&gt;below their&lt;/span&gt;&lt;br&gt;&lt;span style = 'color:#7fceb9;'&gt;**forecasted range**&lt;/span&gt;"</span></span>
<span id="cb21-3">)</span>
<span id="cb21-4"></span>
<span id="cb21-5">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> title_lab_adjusted) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-7">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb21-8">    <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(),</span>
<span id="cb21-9">    <span class="at" style="color: #657422;">panel.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">color =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb21-10">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-21-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>There you go. This concludes the easy way to draw rounded rectangles with <code>ggplot2</code> and <code>ggchicklet</code>. Now, I am well aware that this is probably the moment when many readers will drop out. So, let me do some shameless self-promotion before everyone’s gone.</p>
<p>If you enjoyed this post, follow me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribe to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. For reaching out to me, feel free to hit the comments or send me a mail. I am always happy to see people commenting on my work.</p>
</section>
</section>
<section id="rounded-rectangles-with-grobs" class="level2">
<h2 class="anchored" data-anchor-id="rounded-rectangles-with-grobs">Rounded rectangles with grobs</h2>
<p>Alright, this is where the hacking begins. In this last part of the blog post, I will show you to how transform rectangles to rounded rectangles. In principle, you could then create our SWD plot using <code>geom_rect()</code> and transform the rectangles afterwards. No additional package needed.</p>
<section id="simple-example-with-one-bar" class="level3">
<h3 class="anchored" data-anchor-id="simple-example-with-one-bar">Simple example with one bar</h3>
<p>Let me demonstrate a quick hack when there is only one bar in the plot. Unfortunately, this does not work with more than one bar. Still, this should get you acquainted with grobs. First, create a simple dummy plot.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb22-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2008</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(year)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb22-7">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-22-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Next, we can turn this plot into a so-called <code>TableGrob</code>. From what I understand, it is a highly nested list that contains all the graphical objects (grobs) that are part of our plot <code>p</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">l <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplotGrob</span>(p)</span>
<span id="cb23-2">l</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>TableGrob (12 x 9) "layout": 18 grobs
    z         cells       name                                          grob
1   0 ( 1-12, 1- 9) background       zeroGrob[plot.background..zeroGrob.831]
2   5 ( 6- 6, 4- 4)     spacer                                zeroGrob[NULL]
3   7 ( 7- 7, 4- 4)     axis-l           absoluteGrob[GRID.absoluteGrob.820]
4   3 ( 8- 8, 4- 4)     spacer                                zeroGrob[NULL]
5   6 ( 6- 6, 5- 5)     axis-t                                zeroGrob[NULL]
6   1 ( 7- 7, 5- 5)      panel                      gTree[panel-1.gTree.814]
7   9 ( 8- 8, 5- 5)     axis-b           absoluteGrob[GRID.absoluteGrob.817]
8   4 ( 6- 6, 6- 6)     spacer                                zeroGrob[NULL]
9   8 ( 7- 7, 6- 6)     axis-r                                zeroGrob[NULL]
10  2 ( 8- 8, 6- 6)     spacer                                zeroGrob[NULL]
11 10 ( 5- 5, 5- 5)     xlab-t                                zeroGrob[NULL]
12 11 ( 9- 9, 5- 5)     xlab-b titleGrob[axis.title.x.bottom..titleGrob.823]
13 12 ( 7- 7, 3- 3)     ylab-l   titleGrob[axis.title.y.left..titleGrob.826]
14 13 ( 7- 7, 7- 7)     ylab-r                                zeroGrob[NULL]
15 14 ( 4- 4, 5- 5)   subtitle         zeroGrob[plot.subtitle..zeroGrob.828]
16 15 ( 3- 3, 5- 5)      title            zeroGrob[plot.title..zeroGrob.827]
17 16 (10-10, 5- 5)    caption          zeroGrob[plot.caption..zeroGrob.830]
18 17 ( 2- 2, 2- 2)        tag              zeroGrob[plot.tag..zeroGrob.829]</code></pre>
</div>
</div>
<p>In this case, calling <code>l</code> gave us an overview of plot parts. We will want to change stuff in the panel. Thus, let us extract the grobs from the sixth list entry of <code>l</code>. As we have seen in the table, this will give us a <code>gTree</code>. That’s another nested list. And it contains an interesting sublist called <code>children</code>. That’s where the grobs of this <code>gTree</code> are stored.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">grobs <span class="ot" style="color: #003B4F;">&lt;-</span> l<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]]</span>
<span id="cb25-2">grobs<span class="sc" style="color: #5E5E5E;">$</span>children</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(gTree[grill.gTree.812], zeroGrob[NULL], rect[geom_rect.rect.800], zeroGrob[NULL], zeroGrob[panel.border..zeroGrob.801]) </code></pre>
</div>
</div>
<p>Here, the <code>rect</code> grob is what we want to access. Thus, let us take a look what we can find there.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># str() helps us to unmask the complicated list structure</span></span>
<span id="cb27-2">grobs<span class="sc" style="color: #5E5E5E;">$</span>children[[<span class="dv" style="color: #AD0000;">3</span>]] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 10
 $ x     : 'simpleUnit' num 0.0455native
  ..- attr(*, "unit")= int 4
 $ y     : 'simpleUnit' num 0.955native
  ..- attr(*, "unit")= int 4
 $ width : 'simpleUnit' num 0.909native
  ..- attr(*, "unit")= int 4
 $ height: 'simpleUnit' num 0.909native
  ..- attr(*, "unit")= int 4
 $ just  : chr [1:2] "left" "top"
 $ hjust : NULL
 $ vjust : NULL
 $ name  : chr "geom_rect.rect.800"
 $ gp    :List of 6
  ..$ col     : logi NA
  ..$ fill    : chr "#595959FF"
  ..$ lwd     : num 1.42
  ..$ lty     : num 1
  ..$ linejoin: chr "mitre"
  ..$ lineend : chr "square"
  ..- attr(*, "class")= chr "gpar"
 $ vp    : NULL
 - attr(*, "class")= chr [1:3] "rect" "grob" "gDesc"</code></pre>
</div>
</div>
<p>This is a grob. It can be build using <code>grid::rectGrob()</code>. Basically, what you see here is a specification of everything from <code>x</code> and <code>y</code> position to graphical properties (<code>gp</code>) of this rectangular grob.</p>
<p>There is also a function <code>grid::roundrectGrob()</code>. As you may have guessed, it builds the rounded rectangle grobs that we so desperately crave. From <code>grid::roundrectGrob()</code>’s documentation, we know that we will have to specify another variable <code>r</code> to determine the radius of the rounded rectangles. So, here’s what we could do now.</p>
<ol type="1">
<li>Extract <code>x</code>, <code>y</code>, <code>gp</code> and so on from <code>grobs$children[[3]]</code>.</li>
<li>Add another argument <code>r</code>.</li>
<li>Pass all of these arguments to <code>grid::roundrectGrob()</code></li>
<li>Exchange <code>grobs$children[[3]]</code> with our newly built <code>roundrectGrob</code></li>
</ol>
<p>This is what we will have to do at some point. But in this simple plot, I want to show you a different hack. Did you notice the <code>class</code> <a href="https://adv-r.hadley.nz/vectors-chap.html#attributes">attributes</a> of <code>grobs$children[[3]]</code>? Somewhere in there it says <code>- attr(*, "class")= chr [1:3] "rect" "grob" "gDesc"</code>. And we can access and change that information through <code>attr()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">attr</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">'class'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rect"  "grob"  "gDesc"</code></pre>
</div>
</div>
<p>Now, a really basic hack is to</p>
<ol type="1">
<li>change the class attribute from <code>rect</code> to <code>roundrect</code>.</li>
<li>stick another argument <code>r</code> into the list</li>
<li>put everything back together as if nothing happened</li>
</ol>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Change class attribute of grobs$children[3][[1]] from rect to roundrect</span></span>
<span id="cb31-2">current_attr <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">attr</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">'class'</span>)</span>
<span id="cb31-3">new_attr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_replace</span>(current_attr, <span class="st" style="color: #20794D;">'rect'</span>, <span class="st" style="color: #20794D;">'roundrect'</span>)</span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;">attr</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]], <span class="st" style="color: #20794D;">'class'</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> new_attr</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;"># Add r argument for grid::roundrectGrob()</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;"># We need to add a "unit"</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;"># Here I use the relative unit npc</span></span>
<span id="cb31-9">grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>][[<span class="dv" style="color: #AD0000;">1</span>]]<span class="sc" style="color: #5E5E5E;">$</span>r <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'npc'</span>)</span>
<span id="cb31-10"></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;"># Copy original list and change grobs in place</span></span>
<span id="cb31-12">l_new <span class="ot" style="color: #003B4F;">&lt;-</span> l</span>
<span id="cb31-13">l_new<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> grobs</span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;"># Draw grobs via grid::grid.draw()</span></span>
<span id="cb31-16">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.newpage</span>()</span>
<span id="cb31-17">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.draw</span>(l_new)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-27-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="dealing-with-multiple-bars" class="level3">
<h3 class="anchored" data-anchor-id="dealing-with-multiple-bars">Dealing with multiple bars</h3>
<p>The previous hack works if we plot only one bar. However, if there are multiple <code>x</code> arguments, then <code>grid::roundrectGrob()</code> will error. It seems like that function is not vectorized. So, we will build the rounded rectangles ourselves with functional programming. First let’s take a look at the plot that we want to modify.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(class, <span class="at" style="color: #657422;">fill =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span>
<span id="cb32-5">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-28-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Now, let’s find out what arguments <code>grid::roundrectGrob()</code> accepts and extract as many of these from <code>grobs$children[3]</code> as possible.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">l <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplotGrob</span>(p)</span>
<span id="cb33-2">grobs <span class="ot" style="color: #003B4F;">&lt;-</span> l<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]]</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;"># What arguments does roundrectGrob need?</span></span>
<span id="cb33-5">arg_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">args</span>(grid<span class="sc" style="color: #5E5E5E;">::</span>roundrectGrob) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.list</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">names</span>()</span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;"># Somehow last one is NULL</span></span>
<span id="cb33-7">arg_names <span class="ot" style="color: #003B4F;">&lt;-</span> arg_names[<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">length</span>(arg_names)]</span>
<span id="cb33-8">arg_names</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "x"             "y"             "width"         "height"       
 [5] "default.units" "r"             "just"          "name"         
 [9] "gp"            "vp"           </code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Extract the arguments roundrectGrob needs from grobs$children[3]</span></span>
<span id="cb35-2">extracted_args <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">map</span>(arg_names, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">pluck</span>(grobs<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>], <span class="dv" style="color: #AD0000;">1</span>, .)) </span>
<span id="cb35-3"><span class="fu" style="color: #4758AB;">names</span>(extracted_args) <span class="ot" style="color: #003B4F;">&lt;-</span> arg_names</span>
<span id="cb35-4">extracted_args <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>List of 10
 $ x            : 'simpleUnit' num [1:7] 0.0208native 0.16native 0.299native 0.438native 0.576native ...
  ..- attr(*, "unit")= int 4
 $ y            : 'simpleUnit' num [1:7] 0.119native 0.735native 0.647native 0.207native 0.529native ...
  ..- attr(*, "unit")= int 4
 $ width        : 'simpleUnit' num [1:7] 0.125native 0.125native 0.125native 0.125native 0.125native 0.125native 0.125native
  ..- attr(*, "unit")= int 4
 $ height       : 'simpleUnit' num [1:7] 0.0733native 0.689native 0.601native 0.161native 0.484native ...
  ..- attr(*, "unit")= int 4
 $ default.units: NULL
 $ r            : NULL
 $ just         : chr [1:2] "left" "top"
 $ name         : chr "geom_rect.rect.911"
 $ gp           :List of 6
  ..$ col     : logi [1:7] NA NA NA NA NA NA ...
  ..$ fill    : chr [1:7] "#F8766D" "#C49A00" "#53B400" "#00C094" ...
  ..$ lwd     : num [1:7] 1.42 1.42 1.42 1.42 1.42 ...
  ..$ lty     : num [1:7] 1 1 1 1 1 1 1
  ..$ linejoin: chr "mitre"
  ..$ lineend : chr "square"
  ..- attr(*, "class")= chr "gpar"
 $ vp           : NULL</code></pre>
</div>
</div>
<p>As you can can see, in our vector <code>extracted_args</code> the components <code>x</code>, <code>y</code> and so on are vectors of length 7 (since we have 7 bars in <code>p</code>). As I said before, this works because it is a <code>rectGrob</code>. But, with a <code>roundrectGrob</code> this would cause errors.</p>
<p>Next, let us make sure that we know how many rectangles we need to change. Also, we will need to specify the radius <code>r</code>, and the graphical parameters <code>gp</code> should always have the same amount of arguments.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## How many rectangles are there?</span></span>
<span id="cb37-2">n_rects <span class="ot" style="color: #003B4F;">&lt;-</span> extracted_args<span class="sc" style="color: #5E5E5E;">$</span>x <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">length</span>()</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Add radius r</span></span>
<span id="cb37-5">extracted_args<span class="sc" style="color: #5E5E5E;">$</span>r <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unit</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="fl" style="color: #AD0000;">0.25</span>, n_rects), <span class="st" style="color: #20794D;">'npc'</span>)</span>
<span id="cb37-6"></span>
<span id="cb37-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Make sure that all list components in gp have equally many values</span></span>
<span id="cb37-8">extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>linejoin <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>linejoin, n_rects)</span>
<span id="cb37-9">extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>lineend <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(extracted_args<span class="sc" style="color: #5E5E5E;">$</span>gp<span class="sc" style="color: #5E5E5E;">$</span>lineend, n_rects)</span></code></pre></div>
</div>
<p>Now comes the tedious part. We have to split up <code>extracted_args</code> into multiple nested lists. Unfortunately, the <code>purrr</code> package does not provide a function that works the way we want. That’s because we need many custom steps here. For instance, for the columns <code>x</code> and <code>y</code> we have to always extract a single value out of <code>extracted_args</code>. But with the columns <code>just</code> and <code>name</code> we need to extract the whole vector. Also, we have to adjust the names to ensure that they are unique.</p>
<p>In this blog post, we will get the tedious stuff out of the way with the following helper functions. Feel free to ignore them, if you only care about the general idea.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Write function that does splitting for each rectangle</span></span>
<span id="cb38-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Found no suitable purrr function that works in my case</span></span>
<span id="cb38-3">extract_value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(list, arg, rect) {</span>
<span id="cb38-4">  x <span class="ot" style="color: #003B4F;">&lt;-</span> list[[arg]]</span>
<span id="cb38-5">  <span class="co" style="color: #5E5E5E;"># name and just need do be treated different</span></span>
<span id="cb38-6">  <span class="co" style="color: #5E5E5E;"># In all cases just pick the i-th entry of list[[arg]]</span></span>
<span id="cb38-7">  <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span>(arg <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'name'</span>, <span class="st" style="color: #20794D;">'just'</span>))) <span class="fu" style="color: #4758AB;">return</span>(x[rect])</span>
<span id="cb38-8">  </span>
<span id="cb38-9">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## There is only one name, so extract that and modify id</span></span>
<span id="cb38-10">  <span class="cf" style="color: #003B4F;">if</span> (arg <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'name'</span>) {</span>
<span id="cb38-11">    <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">paste0</span>(x,  rect))</span>
<span id="cb38-12">  }</span>
<span id="cb38-13">  </span>
<span id="cb38-14">  <span class="co" style="color: #5E5E5E;"># 'just' is two part vector and should always be the same</span></span>
<span id="cb38-15">  <span class="cf" style="color: #003B4F;">if</span> (arg <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'just'</span>) <span class="fu" style="color: #4758AB;">return</span>(x)</span>
<span id="cb38-16">}</span>
<span id="cb38-17"></span>
<span id="cb38-18">split_my_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(list, n_rects) {</span>
<span id="cb38-19">  combinations <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb38-20">    <span class="at" style="color: #657422;">rect =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_rects,</span>
<span id="cb38-21">    <span class="at" style="color: #657422;">arg =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">names</span>(list))</span>
<span id="cb38-22">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-23">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(arg)) </span>
<span id="cb38-24">  </span>
<span id="cb38-25">  flattened_list <span class="ot" style="color: #003B4F;">&lt;-</span> combinations <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-26">    <span class="fu" style="color: #4758AB;">pmap</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">extract_value</span>(list, ..<span class="dv" style="color: #AD0000;">2</span>, ..<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb38-27">  </span>
<span id="cb38-28">  <span class="fu" style="color: #4758AB;">names</span>(flattened_list) <span class="ot" style="color: #003B4F;">&lt;-</span> combinations<span class="sc" style="color: #5E5E5E;">$</span>arg</span>
<span id="cb38-29">  <span class="fu" style="color: #4758AB;">split</span>(flattened_list, combinations<span class="sc" style="color: #5E5E5E;">$</span>rect)</span>
<span id="cb38-30">}</span></code></pre></div>
</div>
<p>Finally, we can split <code>extracted_args</code> into sub-lists. Each of these is then used to call <code>grid::roundrectGrob()</code> with <code>do.call()</code>. Then, we have to replace the same part in our list <code>grobs</code> as we did before. However, since we have multiple grobs now that need to be put into a single location. Therefore, we have to bundle the grobs into one object. This is done via <code>grid::grobTree()</code> and <code>do.call()</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">list_of_arglists <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">split_my_list</span>(extracted_args, n_rects)</span>
<span id="cb39-2">list_of_grobs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">map</span>(list_of_arglists, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">do.call</span>(grid<span class="sc" style="color: #5E5E5E;">::</span>roundrectGrob, .)) </span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;"># Build new list of grobs by replacing one part in old list</span></span>
<span id="cb39-5">grobs_new <span class="ot" style="color: #003B4F;">&lt;-</span> grobs</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;"># save one list argument into children[3]</span></span>
<span id="cb39-8">grobs_new<span class="sc" style="color: #5E5E5E;">$</span>children[<span class="dv" style="color: #AD0000;">3</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(grid<span class="sc" style="color: #5E5E5E;">::</span>grobTree, list_of_grobs) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb39-9">l_new <span class="ot" style="color: #003B4F;">&lt;-</span> l</span>
<span id="cb39-10">l_new<span class="sc" style="color: #5E5E5E;">$</span>grobs[[<span class="dv" style="color: #AD0000;">6</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> grobs_new</span>
<span id="cb39-11"></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;"># Draw Plot</span></span>
<span id="cb39-13">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.newpage</span>()</span>
<span id="cb39-14">grid<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">grid.draw</span>(l_new)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="11_rounded_rectangles_files/figure-html/unnamed-chunk-32-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21"><img src="https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Woooow! Marvel at our glorious rounded rectangles! Thanks to our excellent programming skills we made it through the grob jungle. In practice, it is probably easier to use <code>geom_chicklet()</code>. But still, this was a somewhat fun exercise and helped to demystify grobs (at least to some extend).</p>
<p>That’s it for today. If you’ve made it this far, then you already know that you should follow me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribe to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. So, I expect you to be here next time. There’s no way out anymore. So long!</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/11_rounded_rectangles/11_rounded_rectangles.html</guid>
  <pubDate>Tue, 03 May 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>6 Lessons that I learned from teaching R to non-programmers</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>Last week, I gave a short workshop teaching R to Economics students without prior programming experience. <a href="https://twitter.com/rappa753/status/1516497080201904129">On Twitter</a>, I shared six lessons that I wish I had learnt before. This blog post is a more detailed account of my experience. Additionally, I incorporated many excellent suggestions from others on Twitter into this blog post.</p>
<section id="do-less" class="level2">
<h2 class="anchored" data-anchor-id="do-less">Do less</h2>
<p>The first and most important lesson is that I have to plan to do less. This is probably the trickiest part for me. Usually, I like to create an ambitious curriculum for my students. For example, in my semester-long <a href="https://yards.albert-rapp.de/">YARDS course</a> for mathematicians, I introduce many topics like</p>
<ul>
<li>data viz and wrangling with <code>ggplot2</code> and <code>dplyr</code>,</li>
<li>if-conditions and for-loops (yes, I think everyone should be familiar with for-loops),</li>
<li>model building with <code>tidymodels</code>,</li>
<li>functional programming with <code>purrr</code>,</li>
<li>creating and sharing content with <code>Rmarkdown</code> and</li>
<li>interactive web apps with <code>shiny</code>.</li>
</ul>
<p>In that course, students already came with at least a basic understanding of programming. Most of the time, I only had to lay out a few code examples. Then, I quickly made students work on assignments. As students already knew how to read code and debug, they knew how to get themselves unstuck. This was nice as it enabled my ambitious curriculum. Though, I never fully appreciated how much easier this made teaching.</p>
<section id="scaling-down-for-the-workshop" class="level3">
<h3 class="anchored" data-anchor-id="scaling-down-for-the-workshop">Scaling down for the workshop</h3>
<p>Of course, I knew that I needed to scale down in a 4x3h workshop. And I thought I did that. But I was in for a surprise because there was a crucial issue:</p>
<blockquote class="blockquote">
<p>Things that are obvious to someone with programming experience are not obvious to non-programmers at all.</p>
</blockquote>
<p>Let’s go through an example. Imagine students already had seen the following fictitious code chunks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">filter</span>(dat, year <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1995</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> dat) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> y))</span></code></pre></div>
</div>
<p>In one exercise, the students were supposed to plot not the whole data set <code>dat</code> but a filtered version of it. So, I thought that - having seen the code chunks and heard explanations - students would “intuitively” know to combine the chunks like so</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">filter</span>(dat, year <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1994</span>)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb3-2">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> y))</span></code></pre></div>
</div>
<p>But this was not the case. Students were so unfamiliar with code that they were hesitant to “stick together” the two building blocks. Unfortunately, I did not anticipate this. And without any programming experience, students will get stuck in even more unexpected places. Therefore, be sure to have time for detours. And the only way I see how that’s possible is to plan to do less.</p>
</section>
</section>
<section id="teach-through-typing" class="level2">
<h2 class="anchored" data-anchor-id="teach-through-typing">Teach through typing</h2>
<p>So, providing students with building blocks was not enough. At least in their learning stage it wasn’t. Students were just too unfamiliar with code. Fortunately, it turns out that it does not take a huge effort to familiarize students with code. Think: What’s the fastest way to learn to write code? Well, write a lot of code.</p>
<p>And that’s exactly what I tried with them. Instead of doing demos where only I typed code, I made students type along. And I know this sounds silly. But to my surprise, it helped. It helped a lot!</p>
<p>In the end, students had the same building block as if I had done the demo alone. Yet, students were more willing to experiment with the code they have written themselves. In my book, that’s a huge step on anyone’s programming journey.</p>
<section id="make-time-for-typing" class="level3">
<h3 class="anchored" data-anchor-id="make-time-for-typing">Make time for typing</h3>
<p>On Twitter, <a href="https://twitter.com/kotton_king/status/1516540525050056705">Trader Vix</a> disagreed with this typing along approach. It is a fair point to say that not everyone can type “sufficiently” fast. Subsequently, some students may fall behind. In this case, I argued that even more students struggled without this typing approach. This way though, students were not falling behind. Instead, they didn’t know how to get started.</p>
<p>Of course, you will have to make time for students to type. Once again: Plan to do less as students will be slower than you are. Also, make sure to ask students if they can execute the code. This can even have additional benefits. In one case, the students couldn’t execute the code we typed. From their description, I could tell that they forgot quotes as in <code>x == 'text'</code>. Thus, typing together can also generate teachable moments.</p>
</section>
</section>
<section id="start-with-ggplot" class="level2">
<h2 class="anchored" data-anchor-id="start-with-ggplot">Start with ggplot</h2>
<p>Some say vector manipulation should be the first thing to teach. I didn’t and this was one of the few things I wouldn’t change. My non-statistically inclined students seemed to find visual results more engaging than number/vector crunching. And once students can create graphics, the nice thing is that you can always refer back to that for motivation. Let me elaborate.</p>
<p>Shockingly, data wrangling does not have value in itself. I know that as mathematicians/statisticians/number crunchers it is hard to imagine that. However, incorporating a calculated value in a visualizations can generate insights. And many people find that more valuable. Take a look at two examples that use this idea. Both consider the <code>ames</code> data from <code>{modeldata}</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">data</span>(ames, <span class="at" style="color: #657422;">package =</span> <span class="st" style="color: #20794D;">'modeldata'</span>)</span>
<span id="cb4-3">dat <span class="ot" style="color: #003B4F;">&lt;-</span> ames <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-4">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">select</span>(lot_area, sale_price, neighborhood)</span>
<span id="cb4-6">dat</span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## # A tibble: 2,930 × 3</span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">##    lot_area sale_price neighborhood</span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
font-style: italic;">##       &lt;int&gt;      &lt;int&gt; &lt;fct&gt;       </span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  1    31770     215000 North_Ames  </span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  2    11622     105000 North_Ames  </span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  3    14267     172000 North_Ames  </span></span>
<span id="cb4-13"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  4    11160     244000 North_Ames  </span></span>
<span id="cb4-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  5    13830     189900 Gilbert     </span></span>
<span id="cb4-15"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  6     9978     195500 Gilbert     </span></span>
<span id="cb4-16"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  7     4920     213500 Stone_Brook </span></span>
<span id="cb4-17"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  8     5005     191500 Stone_Brook </span></span>
<span id="cb4-18"><span class="do" style="color: #5E5E5E;
font-style: italic;">##  9     5389     236500 Stone_Brook </span></span>
<span id="cb4-19"><span class="do" style="color: #5E5E5E;
font-style: italic;">## 10     7500     189000 Gilbert     </span></span>
<span id="cb4-20"><span class="do" style="color: #5E5E5E;
font-style: italic;">## # … with 2,920 more rows</span></span>
<span id="cb4-21"><span class="do" style="color: #5E5E5E;
font-style: italic;">## # ℹ Use `print(n = ...)` to see more rows</span></span></code></pre></div>
</div>
<section id="slice-for-highlighting" class="level3">
<h3 class="anchored" data-anchor-id="slice-for-highlighting">Slice for highlighting</h3>
<p>Why would you want to extract specific rows from a data set? Here, we use it to highlight specific houses.</p>
<p>How do we do that? We extract the rows and throw that into another point layer.</p>
<p>Now, come up with an artificial story why house 1, 5, 7 and 10 may be important. Bam! You now have a visual motivation for why slicing data is a neat technique to master.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;">aes</span>(lot_area, sale_price)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'grey80'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">slice</span>(dat, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="summaries-for-context" class="level3">
<h3 class="anchored" data-anchor-id="summaries-for-context">Summaries for context</h3>
<p>The same can be done to motivate vector calculations. Why is it good to extract a vector and compute its median? To put your other data into context. Let’s try that out for the sale prices in <code>dat</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> dat<span class="sc" style="color: #5E5E5E;">$</span>sale_price</span>
<span id="cb6-2">med <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">median</span>(x)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.25</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> med, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Sale price'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>For a more elaborate case, you can do the same for each neighborhood.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">summaries <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">group_by</span>(neighborhood) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">med =</span> <span class="fu" style="color: #4758AB;">median</span>(sale_price))</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> sale_price, <span class="at" style="color: #657422;">y =</span> neighborhood)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> summaries, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> med), <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="is-ggplot-too-hard" class="level2">
<h2 class="anchored" data-anchor-id="is-ggplot-too-hard">Is ggplot too hard?</h2>
<p>So, why didn’t I use the <code>plot()</code> function instead of ggplot? That’s because most people (including myself) would agree that ggplot’s defaults are visually more pleasing. But the more pressing question is: Was ggplot too hard for the students? Let’s take a step back on this one.</p>
<section id="every-new-syntax-is-confusing" class="level3">
<h3 class="anchored" data-anchor-id="every-new-syntax-is-confusing">Every new syntax is confusing</h3>
<p>Take a look at the following quote.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
When teaching, be careful not to mix up "I learned this a long time ago" with "This is simple"<a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a>
</p>
— David Robinson (<span class="citation" data-cites="drob">@drob</span>) <a href="https://twitter.com/drob/status/722806375005302785?ref_src=twsrc%5Etfw">April 20, 2016</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>In the same spirit, let me say:</p>
<blockquote class="blockquote">
<p>When teaching, be careful not to mix up “I learned this only fairly recently” with “This is pretty advanced stuff and better not taught early on”.</p>
</blockquote>
<p>Personally, I have encountered ggplot and the tidyverse only late in my programming game. Therefore, I have refrained from teaching it to students for some time. Honestly though, this was also due to my own lack of wanting to learn new “complicated” syntax. As David Robinson states in his insightful <a href="http://varianceexplained.org/r/teach-tidyverse/">“Teach the tidyverse to beginners”</a> essay:</p>
<p><em>“…all programming syntax is confusing for non-programmers.”</em></p>
<p>In my case, I was not a non-programmer. But ggplot has its own ecosystem with its own syntax. Thus, it is easy to say that ggplot is way too hard for beginners. But the truth is:</p>
<blockquote class="blockquote">
<p>Every syntax is confusing to the uninitiated.</p>
</blockquote>
</section>
<section id="so-did-students-cope-with-ggplot-or-not" class="level3">
<h3 class="anchored" data-anchor-id="so-did-students-cope-with-ggplot-or-not">So, did students cope with ggplot or not?</h3>
<p>Coming back to my students, this long-winded detour explains why they did surprisingly well with ggplot. Sure, the intricacies of <code>aes()</code> are probably not fully understood after this workshop. But having no prior experience in programming whatsoever, they were surprisingly willing to accept that <code>aes()</code> is just a necessary fact of <del>life</del> ggplot.</p>
<p>As a mathematician, I like to compare this to integral notation $ \int_0^1 f(x)\, \mathrm{d}x $. In high school, I did not fully grasp the meaning of $ \mathrm{d}x $. But I accepted its presence and treated it like a delimiter for what’s inside and outside the integral. Clearly, this is far from understanding the meaning of this notation. Yet, it enabled me to do what I needed to do.</p>
<p>Overall, students would sometimes forget to put e.g.&nbsp;<code>col =</code> into the correct place. For most parts, though, the students accepted the syntax just the way it is and understood that within <code>aes()</code> we refer to the columns in <code>data</code>. And what may sound even more surprising:</p>
<p><em>Students fared better with <code>ggplot()</code> than with other functions like <code>filter()</code>, <code>slice()</code> or <code>mutate()</code>.</em></p>
<p>I suspect that is because ggplot is its own ecosystem and each plot follows the same template. But <code>filter()</code>, <code>slice()</code> and <code>mutate()</code> each work differently. One wants a conditional statement, one wants row indices and one wants a new column name plus its “formula”.</p>
</section>
</section>
<section id="stress-to-save-variables-before-using-them" class="level2">
<h2 class="anchored" data-anchor-id="stress-to-save-variables-before-using-them">Stress to save variables before using them</h2>
<p>This was another surprising moments for me. Apparently, if you have never programmed, it is not obvious to save results. Therefore, make sure that students understand that calculations can only be used later if they are saved into a variable. But this variable-saving line has to be executed for the actual saving to happen. Often, students would have a code chunk like this</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">filter</span>(ames, Sale_Price <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">200000</span>)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> dat) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> Lot_Area, Sale_Price))</span></code></pre></div>
</div>
<p>But then, they would only execute the second line. More often than not, there was no previous <code>dat</code> variable in the environment and students would get an error. This was confusing because the <code>dat &lt;-</code> line is right there. Of course, that does not mean the line was executed. Unfortunately, you will likely have to mention this multiple times before it sticks.</p>
</section>
<section id="teach-named-functions" class="level2">
<h2 class="anchored" data-anchor-id="teach-named-functions">Teach named functions</h2>
<p>The symbols<code>$</code>, <code>[</code> and <code>]</code> all have their rightful place in R. However, students unanimously found using memorable function names like <code>pull()</code> or <code>select()</code> easier to learn. But remember: Do less. I tried to show students multiple ways to get a job done using e.g.&nbsp;<code>$</code> or <code>pull()</code>. This only caused confusion. So, use only one approach.</p>
<p>Though, in this specific case I would likely go with <code>$</code> instead of <code>pull()</code>. Of course, <code>pull()</code> is nice but chances are that students will encounter <code>$</code> at some point. Thus, see this as an investment into enabling students to read more code. For the same reason, <a href="https://twitter.com/nikita_telkar/status/1516726552213426181">Nikita Telkar suggested</a> to teach the full name notation, e.g.&nbsp;<code>dplyr::select()</code>.</p>
<p>Personally, I would not use full names all the time though. But one particular use case comes to mind. After experiencing a few errors due to not using capital letters in column names, the students were more than willing to use <code>clean_names()</code> from <a href="https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html">{janitor}</a>. So, <code>janitor::clean_names()</code> may be a good showcase for the full name notation.</p>
</section>
<section id="use-pipes" class="level2">
<h2 class="anchored" data-anchor-id="use-pipes">Use pipes</h2>
<p>As mentioned, saving variables felt foreign to students at first. The same was true for nesting functions. Consequently, two step processes like selecting and filtering were hard. Here, pipes helped.</p>
<p>Though I’ve had Math students complain that pipes feel wrong, for the Economics students it was just the right thing. In fact, the pipe often mimicked what students wanted to do anyway. Frequently, students knew that they want to e.g.&nbsp;filter data. So they typed <code>filter(year &gt; 1999)</code>. Of course, this misses the data. It seems like students were so caught up in what they wanted to <strong>do</strong> that they forgot to tell R what data to use. But chaining multiple function calls circumvented that (modulo at the beginning of the chain).</p>
<p>Additionally, let me mention that there were great contributions on Twitter by <a href="https://twitter.com/dtoher/status/1516501635706597381">Deidre Toher</a> and <a href="https://twitter.com/ludictech/status/1516523771573776395">Fran Barton</a>. Deidre Toher suggested reading pipes as ‘then’ and Fran Barton pronounced conditions like <code>x[x &gt; 5]</code> as ‘such that’. This kind of reading code aloud, could go a long way to make code feel more natural for beginners.</p>
</section>
<section id="other-reactions" class="level2">
<h2 class="anchored" data-anchor-id="other-reactions">Other reactions</h2>
<p>These were my six lessons. All of them were enhanced by a lot of great suggestions from Twitter. But not all suggestions fit into the previous text. So, let me mention a few more contributors.</p>
<section id="tidyverseskeptic" class="level3">
<h3 class="anchored" data-anchor-id="tidyverseskeptic">TidyverseSkeptic</h3>
<p>I don’t want to give the impression that I filtered out “negative” comments. So, let me point out that <a href="https://twitter.com/matloff/status/1516531433539399681">Prof.&nbsp;Norm Matloff</a> chimed in and advocated against using pipes. For his elaborate reasons see the <a href="https://github.com/matloff/TidyverseSkeptic">TidyverseSkeptic essay</a>. That being said, I do not agree with many statements in his tweet or his essay (though I agree that for-loops should not be a reason to feel ashamed).</p>
<p>Having gotten this off my chest, I really do not want to comment more on the artificial fight between base-R and the tidyverse. To me, a lot of this dispute feels like a <strong>highly subjective</strong> back-and-forth between both sides anyway. I do like parts of both worlds and I don’t want to throw my own subjective two cents into the mix.</p>
</section>
<section id="miscellaneous-tips" class="level3">
<h3 class="anchored" data-anchor-id="miscellaneous-tips">Miscellaneous tips</h3>
<p>So, let me close this post on a lighter note with the remaining contributions.</p>
<ul>
<li><p><a href="https://twitter.com/remington_moll/status/1516764933601460224">Remington Moll</a> suggested to use data sets that students care about. This could encompass letting students choose a data set from five prepared data sets. Of course, this could potentially take up a huge amount of preparation time. But maybe skimming a few data sets in advance could be enough for demos.</p></li>
<li><p><a href="https://twitter.com/FadelMegahed/status/1516784428109901826">Fadel Megahed</a> shared some of his own course material. In his slides, he uses timers and I like the idea. This way, in-class time management may become easier. I always struggle with sticking to the allotted time during a set of exercises.</p></li>
<li><p><a href="https://twitter.com/rmflight/status/1516763348343398406">Dr.&nbsp;Robert M Flight</a> shared the datacarpentry lessons. I have only skimmed them but I’ve heard people praise these lessons multiple times already.</p></li>
</ul>
</section>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>This concludes my blog post. Thanks to everyone on Twitter for contributing. It pleased me to see that many people in the R community are passionate about teaching. If you liked this essay, then consider following me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. See you next time!</p>


</section>

 ]]></description>
  <category>Opinion</category>
  <guid>https://albert-rapp.de/posts/10_lessons_learned_teaching_nonprogrammers/10_lessons_learned_teaching_nonprogrammers.html</guid>
  <pubDate>Thu, 14 Apr 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to collect dataviz from Twitter into your note-taking system</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>It is mid-April and the <a href="https://twitter.com/30DayChartChall">#30daychartchallenge</a> is well on its way. One glace at the hashtag’s Twitter feed suffices to realize that there are great contributions. That’s a perfect opportunity to collect data viz examples for future inspirations.</p>
<p>Ideally, I can scroll through Twitter and with a few clicks incorporate these contributions straight into my <a href="https://obsidian.md/">Obsidian</a> or any other Markdown-based note-taking system. Unfortunately, <code>rtweet</code>’s snapshot function does not seem to work anymore. So, let’s build something on our own that gets the job done. The full script can be found on <a href="https://gist.github.com/AlbertRapp/37a2e0993acea9b4e36400037b797391">GitHub gist</a>. Here’s what we will need:</p>
<ul>
<li>Twitter app bearer token (to access Twitter’s API) - I’ll show you how to get that</li>
<li>Elevated API access (just a few clicks once you have a bearer token)</li>
<li>Dummy mail account to send tweets to</li>
</ul>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>Before we begin, let me summarize what kind of note-taking process I have in mind:</p>
<ol type="1">
<li><p>Stroll through Twitter and see great data viz on twitter.</p></li>
<li><p>Send tweet link and a few comments via mail to a dummy mail account</p></li>
<li><p>A scheduled process accesses the dummy mail account and scans for new mails from authorized senders.</p></li>
<li><p>If there is a new mail, R extracts tweet URL and uses Twitter’s API to download the tweet’s pictures and texts.</p></li>
<li><p>A template Markdown file is used to create a new note that contains the images and texts.</p></li>
<li><p>Markdown file is copied to your note-taking system within your file system.</p></li>
<li><p>Ideally, your Markdown template contains tags like #dataviz and #twitter so that your new note can be easily searched for.</p></li>
<li><p>Next time you look for inspiration, stroll through your collections or search for comments.</p></li>
</ol>
</section>
<section id="preparations" class="level2">
<h2 class="anchored" data-anchor-id="preparations">Preparations</h2>
<p>Ok, we know what we want to accomplish. Time to get the prelims done. First, we will need a Twitter developer account. Then, we have to mask sensitive information in our code. If you already have a twitter app resp. a bearer token and know the <code>keyring</code> package, feel free to skip this section.</p>
<section id="get-twitter-developer-account" class="level3">
<h3 class="anchored" data-anchor-id="get-twitter-developer-account">Get Twitter developer account</h3>
<p>Let’s create a developer account for Twitter. Unfortunately, there is no way to get such an account without providing Twitter with your phone number. Sadly, if this burden on your privacy is a problem for you, then you cannot proceed. Otherwise, create an account at <a href="https://developer.twitter.com/en">developer.twitter.com</a>.</p>
<p>In your developer portal, create a project. Within this project create an app. Along the way, you will get a bunch of keys, secrets, IDs and tokens. You will see them only once, so you will have to save them somewhere. I suggest saving them into a password manager like <a href="https://bitwarden.com/">bitwarden</a>.</p>
<p>When you create your app or shortly after, you will need to set the authentication settings. I use <code>OAuth 2.0</code>. This requires</p>
<ul>
<li>type of app: <code>Automated bot or app</code></li>
<li>Callback URI / Redirect URI: <code>http://127.0.0.1:1410</code> (DISCLAIMER: This is magic to me but the <code>rtweet</code> docs - or possibly some other doc (not entirely sure anymore)- taught me to set up an app that way)</li>
<li>Website URL: Your Twitter link (in my case <code>https://twitter.com/rappa753</code>)</li>
</ul>
<p>Next, you will likely need to upgrade your project to ‘elevated’ status. This can be done for free on your project’s dashboard. From what I recall, you will have to fill out a form and tell Twitter what you want to do with your app. Just be honest and chances are that your request will immediately be granted. Just be yourself! What could possibly go wrong? Go get the <del>girl</del> elevated status (ahhh, what a perfect opportunity for a <a href="https://www.youtube.com/watch?v=6FQ11gCO64o">Taylor song</a>).</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="project-elevated.PNG" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Click on detailed features to apply for higher access"><img src="https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/project-elevated.PNG" class="img-fluid figure-img" width="669"></a></p>
<p></p><figcaption class="figure-caption">Click on detailed features to apply for higher access</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="how-to-embed-your-bearer-token-and-other-sensitive-material-in-your-code" class="level3">
<h3 class="anchored" data-anchor-id="how-to-embed-your-bearer-token-and-other-sensitive-material-in-your-code">How to embed your bearer token and other sensitive material in your code</h3>
<p>Use the <code>keyring</code> package to first save secrets via <code>key_set</code> and then extract them in your session via <code>key_get()</code>. This way, you won’t share your sensitive information by accident when you share your code (like I do). In this post, I do this for my bearer token, my dummy mail, my dummy mail’s password and for the allowed senders (that will be the mail where the tweets come from).</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">bearer_token <span class="ot" style="color: #003B4F;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'twitter-bearer-token'</span>, <span class="at" style="color: #657422;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb1-2">user_mail <span class="ot" style="color: #003B4F;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'dataviz-mail'</span>, <span class="at" style="color: #657422;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb1-3">password_mail <span class="ot" style="color: #003B4F;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'dataviz-mail-password'</span>, <span class="at" style="color: #657422;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span>
<span id="cb1-4">allowed_senders <span class="ot" style="color: #003B4F;">&lt;-</span> keyring<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_get</span>(<span class="st" style="color: #20794D;">'allowed_senders'</span>, <span class="at" style="color: #657422;">keyring =</span> <span class="st" style="color: #20794D;">'blogpost'</span>)</span></code></pre></div>
</div>
<p>The <code>allowed_senders</code> limitation is a precaution so that we do not accidentally download some malicious spam mail from God knows who onto our computer. I am no security expert but this feels like a prudent thing to do. If one of you fellow readers knows more about this security business, feel kindly invited to reach out to me with better security strategies.</p>
</section>
</section>
<section id="what-to-do-once-we-have-a-url" class="level2">
<h2 class="anchored" data-anchor-id="what-to-do-once-we-have-a-url">What to do once we have a URL</h2>
<p>Let’s assume for the sake of this section that we already extracted a tweet URL from a mail. Here’s the URL that we will use. In fact, it’s <a href="https://twitter.com/c_gebhard">Christian Gebhard</a>’s tweet that inspired me to start this project. From the URL we can extract the tweet’s ID (the bunch of numbers after <code>/status/</code>). Also, we will need the URL of Twitter’s API.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(stringr) <span class="co" style="color: #5E5E5E;"># for regex matching</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr) <span class="co" style="color: #5E5E5E;"># for binding rows and pipe</span></span>
<span id="cb2-3">tweet_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'https://twitter.com/c_gebhard/status/1510533315262042112'</span></span>
<span id="cb2-4">tweet_id <span class="ot" style="color: #003B4F;">&lt;-</span> tweet_url <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_match</span>(<span class="st" style="color: #20794D;">"status/([0-9]+)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> .[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb2-5">API_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'https://api.twitter.com/2/tweets'</span></span></code></pre></div>
</div>
<section id="use-get-to-access-twitter-api" class="level3">
<h3 class="anchored" data-anchor-id="use-get-to-access-twitter-api">Use GET() to access Twitter API</h3>
<p>Next, we use the <code>GET()</code> function from the <code>httr</code> package to interact with Twitter’s API.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(httr) <span class="co" style="color: #5E5E5E;"># for API communication</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">auth <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Bearer"</span>, bearer_token) <span class="co" style="color: #5E5E5E;"># API needs format "Bearer &lt;my_token&gt;"</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># Make request to API</span></span>
<span id="cb3-6">request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">GET</span>(</span>
<span id="cb3-7">  API_url, </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #657422;">Authorization =</span> auth), </span>
<span id="cb3-9">  <span class="at" style="color: #657422;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb3-10">    <span class="at" style="color: #657422;">ids =</span> tweet_id, </span>
<span id="cb3-11">    <span class="at" style="color: #657422;">tweet.fields =</span> <span class="st" style="color: #20794D;">'created_at'</span>, <span class="co" style="color: #5E5E5E;"># time stamp</span></span>
<span id="cb3-12">    <span class="at" style="color: #657422;">expansions =</span> <span class="st" style="color: #20794D;">'attachments.media_keys,author_id'</span>, </span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;"># necessary expansion fields for img_url</span></span>
<span id="cb3-14">    <span class="at" style="color: #657422;">media.fields =</span> <span class="st" style="color: #20794D;">'url'</span> <span class="co" style="color: #5E5E5E;"># img_url</span></span>
<span id="cb3-15">  )</span>
<span id="cb3-16">) </span>
<span id="cb3-17">request</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Response [https://api.twitter.com/2/tweets?ids=1510533315262042112&amp;tweet.fields=created_at&amp;expansions=attachments.media_keys%2Cauthor_id&amp;media.fields=url]
  Date: 2022-07-21 17:47
  Status: 200
  Content-Type: application/json; charset=utf-8
  Size: 690 B</code></pre>
</div>
</div>
<p>So, how do we know how to use the <code>GET()</code> function? Well, I am no expert on APIs but let me try to explain how I came up with the arguments I used here.</p>
<p>Remember those toys you would play with as a toddler where you try to get a square through a square-shaped hole, a triangle through a triangle-shaped hole and so on? You don’t? Well, neither do I. Who remembers that stuff from very early childhood?</p>
<p>But I hear that starting a sentence with “Remember those…” is good for building a rapport with your audience. So, great! Now that we feel all cozy and connected, I can tell you how I managed to get the API request to work.</p>
<p>And the truth is actually not that far from the toddler <a href="https://www.youtube.com/watch?v=NNl7GQFTULU">“intelligence test”</a>. First, I took a look at a <a href="https://developer.twitter.com/en/docs/twitter-api/data-dictionary/object-model/media">help page</a> from Twitter’s developer page. Then, I hammered at the <code>GET()</code> function until its output contained a URL that looks similar to the example I found. Here’s the example code I was aiming at.</p>
<pre><code>curl --request GET 'https://api.twitter.com/2/tweets?ids=1263145271946551300&amp;
expansions=attachments.media_keys&amp;
media.fields=duration_ms,height,media_key,preview_image_url,public_metrics,type,url,width,alt_text' 
--header 'Authorization: Bearer $BEARER_TOKEN'</code></pre>
<p>This is not really R code but it looks like usually you have to feed a GET request with a really long URL. In fact, it looks like the URL needs to contain everything you want to extract from the API. Specifically, the structure of said URL looks like</p>
<ul>
<li>the API’s base URL (in this case https://api.twitter.com/2/tweets)</li>
<li>a question mark <code>?</code></li>
<li>pairs of <code>keywords</code> (like <code>ids</code>) and a specific value, e.g.&nbsp;<code>ids=1263145271946551300</code>, that are connected via <code>&amp;</code></li>
</ul>
<p>Therefore, it is only a matter of figuring out how to make the output of <code>GET()</code> deliver this result. Hints on that came from <code>GET()</code> examples in the docs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">GET</span>(<span class="st" style="color: #20794D;">"http://google.com/"</span>, <span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"search"</span>, <span class="at" style="color: #657422;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">q =</span> <span class="st" style="color: #20794D;">"ham"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Response [http://www.google.com/search?q=ham]
  Date: 2022-07-21 17:47
  Status: 200
  Content-Type: text/html; charset=ISO-8859-1
  Size: 122 kB
&lt;!doctype html&gt;&lt;html lang="de"&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;meta content="/im...
document.documentElement.addEventListener("submit",function(b){var a;if(a=b.t...
var a=window.performance;window.start=Date.now();a:{var b=window;if(a){var c=...
var f=this||self;var g,h=null!=(g=f.mei)?g:1,m,n=null!=(m=f.sdo)?m:!0,p=0,q,r...
e);var l=a.fileName;l&amp;&amp;(b+="&amp;script="+c(l),e&amp;&amp;l===window.location.href&amp;&amp;(e=do...
var c=[],e=0;window.ping=function(b){-1==b.indexOf("&amp;zx")&amp;&amp;(b+="&amp;zx="+Date.no...
var k=this||self,l=function(a){var b=typeof a;return"object"==b&amp;&amp;null!=a||"fu...
b}).join(" "))};function w(){var a=k.navigator;return a&amp;&amp;(a=a.userAgent)?a:""...
!1}e||(d=null)}}else"mouseover"==b?d=a.fromElement:"mouseout"==b&amp;&amp;(d=a.toElem...
var a=document.getElementById("st-toggle"),b=document.getElementById("st-card...
...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">GET</span>(<span class="st" style="color: #20794D;">"http://httpbin.org/get"</span>, <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Response [http://httpbin.org/get]
  Date: 2022-07-21 17:47
  Status: 200
  Content-Type: application/json
  Size: 403 B
{
  "args": {}, 
  "headers": {
    "A": "1", 
    "Accept": "application/json, text/xml, application/xml, */*", 
    "Accept-Encoding": "deflate, gzip, br", 
    "B": "2", 
    "Host": "httpbin.org", 
    "User-Agent": "libcurl/7.68.0 r-curl/4.3.2 httr/1.4.3", 
    "X-Amzn-Trace-Id": "Root=1-62d9913b-1838afb6392fdf321bc3479c"
...</code></pre>
</div>
</div>
<p>So, the first example shows how an argument <code>query</code> can be filled with a list that creates the URL we need. The second examples shows us that there is something called <code>add_headers()</code>. Do I know exactly what that is? I mean, from a technical perspective of what is going on behind the scenes? Definitely not. But Twitter’s example request had something called header. Therefore, <code>add_headers()</code> is probably something that does what the Twitter API expects.</p>
<p>And where do the key-value pairs come from? I found these strolling through Twitter’s <a href="https://developer.twitter.com/en/docs/twitter-api/data-dictionary/introduction">data dictionary</a>. Thus, a <code>GET()</code> request was born and I could feel like a true <a href="https://knowyourmeme.com/memes/hackerman">Hackerman</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">auth <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Bearer"</span>, bearer_token) <span class="co" style="color: #5E5E5E;"># API needs format "Bearer &lt;my_token&gt;"</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># Make request to API and parse to list</span></span>
<span id="cb10-4">request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">GET</span>(</span>
<span id="cb10-5">  API_url, </span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #657422;">Authorization =</span> auth), </span>
<span id="cb10-7">  <span class="at" style="color: #657422;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #657422;">ids =</span> tweet_id, </span>
<span id="cb10-9">    <span class="at" style="color: #657422;">tweet.fields =</span> <span class="st" style="color: #20794D;">'created_at'</span>, <span class="co" style="color: #5E5E5E;"># time stamp</span></span>
<span id="cb10-10">    <span class="at" style="color: #657422;">expansions =</span> <span class="st" style="color: #20794D;">'attachments.media_keys,author_id'</span>, </span>
<span id="cb10-11">    <span class="co" style="color: #5E5E5E;"># necessary expansion fields for img_url</span></span>
<span id="cb10-12">    <span class="at" style="color: #657422;">media.fields =</span> <span class="st" style="color: #20794D;">'url'</span> <span class="co" style="color: #5E5E5E;"># img_url</span></span>
<span id="cb10-13">  )</span>
<span id="cb10-14">) </span></code></pre></div>
</div>
<p>Alright, we successfully requested data. Now, it becomes time to parse it to something useful. The <code>content()</code> function will to that.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">parsed_request <span class="ot" style="color: #003B4F;">&lt;-</span> request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">content</span>(<span class="st" style="color: #20794D;">'parsed'</span>)</span>
<span id="cb11-2">parsed_request</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
$data[[1]]
$data[[1]]$attachments
$data[[1]]$attachments$media_keys
$data[[1]]$attachments$media_keys[[1]]
[1] "3_1510533145334104067"



$data[[1]]$id
[1] "1510533315262042112"

$data[[1]]$author_id
[1] "1070306701"

$data[[1]]$created_at
[1] "2022-04-03T08:23:01.000Z"

$data[[1]]$text
[1] "#30DayChartChallenge #Day3 - Topic: historical\n\nBack to the Shakespeare data! Hamlet is is longest play, the comedies tend to be shorter.\n\nTool: #rstats\nData: kaggle users LiamLarsen, aodhan\nColor-Scale: MetBrewer\nFonts: Niconne, Noto Sans (+Mono)\nCode: https://t.co/iXAbniQDCb https://t.co/JCNrYH9uP4"



$includes
$includes$media
$includes$media[[1]]
$includes$media[[1]]$media_key
[1] "3_1510533145334104067"

$includes$media[[1]]$type
[1] "photo"

$includes$media[[1]]$url
[1] "https://pbs.twimg.com/media/FPZ95H0XwAMHA8q.jpg"



$includes$users
$includes$users[[1]]
$includes$users[[1]]$id
[1] "1070306701"

$includes$users[[1]]$name
[1] "Christian Gebhard"

$includes$users[[1]]$username
[1] "c_gebhard"</code></pre>
</div>
</div>
</section>
<section id="extract-tweet-data-from-what-the-api-gives-us-and-download-images" class="level3">
<h3 class="anchored" data-anchor-id="extract-tweet-data-from-what-the-api-gives-us-and-download-images">Extract tweet data from what the API gives us and download images</h3>
<p>We have seen that <code>parsed_request</code> is basically a large list that contains everything we requested from the API. Unfortunately, it is a highly nested list, so we have to do some work to extract the parts we actually want. <code>pluck()</code> from the <code>purrr</code> package is our best friend on this one. Here’s all the information we extract from the <code>parsed_request</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(purrr) <span class="co" style="color: #5E5E5E;"># for pluck and map functions</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;"># Extract necessary information from list-like structure</span></span>
<span id="cb13-3">tweet_text <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'text'</span>) </span>
<span id="cb13-5">tweet_text</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "#30DayChartChallenge #Day3 - Topic: historical\n\nBack to the Shakespeare data! Hamlet is is longest play, the comedies tend to be shorter.\n\nTool: #rstats\nData: kaggle users LiamLarsen, aodhan\nColor-Scale: MetBrewer\nFonts: Niconne, Noto Sans (+Mono)\nCode: https://t.co/iXAbniQDCb https://t.co/JCNrYH9uP4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">tweet_user <span class="ot" style="color: #003B4F;">&lt;-</span>  parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'users'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'username'</span>)</span>
<span id="cb15-3">tweet_user</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "c_gebhard"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># We will use the tweet date and time as part of unique file names</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># Replace white spaces and colons (:) for proper file names</span></span>
<span id="cb17-3">tweet_date <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-5">  lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_datetime</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">' '</span>, <span class="st" style="color: #20794D;">'_'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">':'</span>, <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb17-8">tweet_date</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-04-03_082301"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">img_urls <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'media'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># bind_rows for multiple pictures, i.e. multiple URLS</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'photo'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;">pull</span>(url)</span>
<span id="cb19-6">img_urls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://pbs.twimg.com/media/FPZ95H0XwAMHA8q.jpg"</code></pre>
</div>
</div>
<p>Next, download all the images via the <code>img_urls</code> and <code>download.file()</code>. We will use <code>walk2()</code> to download all files (in case there are multiple images/URLs) and save the files into PNGs that are named using the unique <code>tweet_date</code> IDs. Remember to set <code>mode = 'wb'</code> in <code>download.file()</code>. I am not really sure why but without it you will save poor quality images.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Download image - set mode otherwise download is blurry</span></span>
<span id="cb21-2">img_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">'tweet'</span>, tweet_user, tweet_date, <span class="fu" style="color: #4758AB;">seq_along</span>(img_urls), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;">walk2</span>(img_urls, img_names, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">download.file</span>(.x, <span class="fu" style="color: #4758AB;">paste0</span>(.y, <span class="st" style="color: #20794D;">'.png'</span>), <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">'wb'</span>))</span></code></pre></div>
</div>
<p>So let’s do a quick recap of what we have done so far. We</p>
<ul>
<li>Assembled an API request</li>
<li>Parsed the return of the request</li>
<li>Cherrypicked the information that we want from the resulting list</li>
<li>Used the image URLs to download and save the files to our working directory.</li>
</ul>
<p>Let’s cherish this mile stone with a dedicated function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">request_twitter_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(tweet_url, bearer_token) {</span>
<span id="cb22-2">  <span class="co" style="color: #5E5E5E;"># Extract tweet id by regex</span></span>
<span id="cb22-3">  tweet_id <span class="ot" style="color: #003B4F;">&lt;-</span> tweet_url <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_match</span>(<span class="st" style="color: #20794D;">"status/([0-9]+)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> .[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb22-4">  auth <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Bearer"</span>, bearer_token) <span class="co" style="color: #5E5E5E;"># API needs format "Bearer &lt;my_token&gt;"</span></span>
<span id="cb22-5">  API_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'https://api.twitter.com/2/tweets'</span></span>
<span id="cb22-6">  </span>
<span id="cb22-7">  <span class="co" style="color: #5E5E5E;"># Make request to API and parse to list</span></span>
<span id="cb22-8">  parsed_request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">GET</span>(</span>
<span id="cb22-9">    API_url, </span>
<span id="cb22-10">    <span class="fu" style="color: #4758AB;">add_headers</span>(<span class="at" style="color: #657422;">Authorization =</span> auth), </span>
<span id="cb22-11">    <span class="at" style="color: #657422;">query =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb22-12">      <span class="at" style="color: #657422;">ids =</span> tweet_id, </span>
<span id="cb22-13">      <span class="at" style="color: #657422;">tweet.fields =</span> <span class="st" style="color: #20794D;">'created_at'</span>, <span class="co" style="color: #5E5E5E;"># time stamp</span></span>
<span id="cb22-14">      <span class="at" style="color: #657422;">expansions=</span><span class="st" style="color: #20794D;">'attachments.media_keys,author_id'</span>, </span>
<span id="cb22-15">      <span class="co" style="color: #5E5E5E;"># necessary expansion fields for img_url</span></span>
<span id="cb22-16">      <span class="at" style="color: #657422;">media.fields =</span> <span class="st" style="color: #20794D;">'url'</span> <span class="co" style="color: #5E5E5E;"># img_url</span></span>
<span id="cb22-17">    )</span>
<span id="cb22-18">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">content</span>(<span class="st" style="color: #20794D;">'parsed'</span>)</span>
<span id="cb22-19">  </span>
<span id="cb22-20">  <span class="co" style="color: #5E5E5E;"># Extract necassary information from list-like structure</span></span>
<span id="cb22-21">  tweet_text <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-22">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'text'</span>) </span>
<span id="cb22-23">  </span>
<span id="cb22-24">  tweet_user <span class="ot" style="color: #003B4F;">&lt;-</span>  parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-25">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'users'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'username'</span>)</span>
<span id="cb22-26">  </span>
<span id="cb22-27">  <span class="co" style="color: #5E5E5E;"># Make file name unique through time-date combination</span></span>
<span id="cb22-28">  <span class="co" style="color: #5E5E5E;"># Replace white spaces and colons (:) for proper file names</span></span>
<span id="cb22-29">  tweet_date <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-30">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"data"</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">'created_at'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-31">    lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_datetime</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-32">    <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">' '</span>, <span class="st" style="color: #20794D;">'_'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-33">    <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">':'</span>, <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb22-34">  </span>
<span id="cb22-35">  img_urls <span class="ot" style="color: #003B4F;">&lt;-</span> parsed_request <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-36">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">"includes"</span>, <span class="st" style="color: #20794D;">'media'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-37">    <span class="fu" style="color: #4758AB;">bind_rows</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-38">    <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'photo'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-39">    <span class="fu" style="color: #4758AB;">pull</span>(url)</span>
<span id="cb22-40">  </span>
<span id="cb22-41">  <span class="co" style="color: #5E5E5E;"># Download image - set mode otherwise download is blurry</span></span>
<span id="cb22-42">  img_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">'tweet'</span>, tweet_user, tweet_date, <span class="fu" style="color: #4758AB;">seq_along</span>(img_urls), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb22-43">  <span class="fu" style="color: #4758AB;">walk2</span>(img_urls, img_names, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">download.file</span>(.x, <span class="fu" style="color: #4758AB;">paste0</span>(.y, <span class="st" style="color: #20794D;">'.png'</span>), <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">'wb'</span>))</span>
<span id="cb22-44">  </span>
<span id="cb22-45">  <span class="co" style="color: #5E5E5E;"># Return list with information</span></span>
<span id="cb22-46">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb22-47">    <span class="at" style="color: #657422;">url =</span> tweet_url,</span>
<span id="cb22-48">    <span class="at" style="color: #657422;">text =</span> tweet_text,</span>
<span id="cb22-49">    <span class="at" style="color: #657422;">user =</span> tweet_user,</span>
<span id="cb22-50">    <span class="at" style="color: #657422;">file_names =</span> <span class="fu" style="color: #4758AB;">paste0</span>(img_names, <span class="st" style="color: #20794D;">'.png'</span>),</span>
<span id="cb22-51">    <span class="at" style="color: #657422;">file_paths =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">getwd</span>(), <span class="st" style="color: #20794D;">'/'</span>, img_names, <span class="st" style="color: #20794D;">'.png'</span>)</span>
<span id="cb22-52">  )</span>
<span id="cb22-53">}</span></code></pre></div>
</div>
</section>
<section id="fill-out-markdown-template-using-extracted-information-and-images" class="level3">
<h3 class="anchored" data-anchor-id="fill-out-markdown-template-using-extracted-information-and-images">Fill out Markdown template using extracted information and images</h3>
<p>We have our images and the original tweet now. Thanks to our previous function, we can save all of the information in a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">request <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">request_twitter_data</span>(tweet_url, bearer_token)</span></code></pre></div>
</div>
<p>So, let’s bring all that information into a Markdown file. Here is the <code>template.md</code> file that I have created for this joyous occasion.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">library</span>(readr) <span class="co" style="color: #5E5E5E;"># for reading and writing files from/to disk</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">read_file</span>(<span class="st" style="color: #20794D;">'template.md'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#dataviz #twitter

![[insert_img_name_here]]

### Original Tweet

insert_text_here

Original: insert_URL_here

### Original Mail

insert_mail_here</code></pre>
</div>
</div>
<p>As you can see, I started the Markdown template with two tags <code>#dataviz</code> and <code>#twitter</code>. This helps me to search for a specific dataviz faster. Also, I have already written out the Markdown syntax for image imports <code>![[...]]</code> and added a placeholder <code>insert_img_name_here</code>. This one will be replaced by the file path to the image. Similarly, other placeholders like <code>insert_text_here</code> and <code>insert_mail_here</code> allow me to save the tweet and the mail content into my note taking system too.</p>
<p>To do so, I will need a function that replaces all the placeholders. First, I created a helper function that changes the image import placeholder properly, when there are multiple images.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">md_import_strings <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file_names) {</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'![['</span>, file_names, <span class="st" style="color: #20794D;">']]'</span>, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">'</span>) </span>
<span id="cb26-3">}</span></code></pre></div>
</div>
<p>Then, I created a function that takes the <code>request</code> list that we got from calling our own <code>request_twitter_data()</code> function and iteratively uses <code>str_replace_all()</code>. This iteration is done with <code>reduce2()</code> which will replace all placeholders in <code>template.md</code> .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">library</span>(tibble) <span class="co" style="color: #5E5E5E;"># for easier readable tribble creation</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;"># Replace the placeholders in the template</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;"># We change original mail place holder later on</span></span>
<span id="cb27-4">replace_template_placeholder <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(template_name, request) {</span>
<span id="cb27-5">  <span class="co" style="color: #5E5E5E;"># Create a dictionary for what to replace in template</span></span>
<span id="cb27-6">  replace_dict <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb27-7">    <span class="sc" style="color: #5E5E5E;">~</span>template, <span class="sc" style="color: #5E5E5E;">~</span>replacement,</span>
<span id="cb27-8">    <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">!</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[insert_img_name_here</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">]</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">]'</span>, <span class="fu" style="color: #4758AB;">md_import_strings</span>(request<span class="sc" style="color: #5E5E5E;">$</span>file_names),</span>
<span id="cb27-9">    <span class="st" style="color: #20794D;">'insert_text_here'</span>, request<span class="sc" style="color: #5E5E5E;">$</span>text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">'#'</span>, <span class="st" style="color: #20794D;">'(#)'</span>),</span>
<span id="cb27-10">    <span class="st" style="color: #20794D;">'insert_URL_here'</span>, request<span class="sc" style="color: #5E5E5E;">$</span>url</span>
<span id="cb27-11">  )</span>
<span id="cb27-12">  </span>
<span id="cb27-13">  <span class="co" style="color: #5E5E5E;"># Iteratively apply str_replace_all and keep only final result</span></span>
<span id="cb27-14">  <span class="fu" style="color: #4758AB;">reduce2</span>(</span>
<span id="cb27-15">    <span class="at" style="color: #657422;">.x =</span> replace_dict<span class="sc" style="color: #5E5E5E;">$</span>template, </span>
<span id="cb27-16">    <span class="at" style="color: #657422;">.y =</span> replace_dict<span class="sc" style="color: #5E5E5E;">$</span>replacement,</span>
<span id="cb27-17">    <span class="at" style="color: #657422;">.f =</span> str_replace_all,</span>
<span id="cb27-18">    <span class="at" style="color: #657422;">.init =</span>  <span class="fu" style="color: #4758AB;">read_lines</span>(template_name) </span>
<span id="cb27-19">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-20">    <span class="fu" style="color: #4758AB;">paste0</span>(<span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">'</span>) <span class="co" style="color: #5E5E5E;"># Collaps lines into a single string</span></span>
<span id="cb27-21">}</span>
<span id="cb27-22"></span>
<span id="cb27-23"><span class="fu" style="color: #4758AB;">replace_template_placeholder</span>(<span class="st" style="color: #20794D;">'template.md'</span>, request) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">cat</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#dataviz #twitter

![[tweet_c_gebhard_2022-04-03_082301_1.png]]

### Original Tweet

(#)30DayChartChallenge (#)Day3 - Topic: historical

Back to the Shakespeare data! Hamlet is is longest play, the comedies tend to be shorter.

Tool: (#)rstats
Data: kaggle users LiamLarsen, aodhan
Color-Scale: MetBrewer
Fonts: Niconne, Noto Sans (+Mono)
Code: https://t.co/iXAbniQDCb https://t.co/JCNrYH9uP4

Original: https://twitter.com/c_gebhard/status/1510533315262042112

### Original Mail

insert_mail_here</code></pre>
</div>
</div>
<p>As you can see, my <code>replace_template_placeholder()</code> function also replaces the typical <code>#</code> from Twitter with <code>(#)</code>. This is just a precaution to avoid wrong interpretation of these lines as headings in Markdown. Also, the original mail has not been inserted yet because we have no mail yet. But soooon. Finally, we need to write the replaced strings to a file. I got some helpers for that right here.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">write_replaced_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(replaced_text, request) {</span>
<span id="cb29-2">  file_name <span class="ot" style="color: #003B4F;">&lt;-</span> request<span class="sc" style="color: #5E5E5E;">$</span>file_name[<span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">'_1.png'</span>, <span class="st" style="color: #20794D;">'.md'</span>)</span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;">write_lines</span>(replaced_text, file_name)</span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">getwd</span>(), <span class="st" style="color: #20794D;">'/'</span>, file_name) </span>
<span id="cb29-5">}</span>
<span id="cb29-6">replaced_template <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">replace_template_placeholder</span>(<span class="st" style="color: #20794D;">'template.md'</span>, request) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb29-7">  <span class="fu" style="color: #4758AB;">write_replaced_text</span>(request)</span></code></pre></div>
</div>
</section>
<section id="shuffle-files-around-on-your-file-system" class="level3">
<h3 class="anchored" data-anchor-id="shuffle-files-around-on-your-file-system">Shuffle files around on your file system</h3>
<p>Awesome! We created new image files and a new Markdown note in our working directory. Now, we have to move them to our Obsidian vault. This is the place where I collect all my Markdown notes for use in Obsidian. In my case, I will need to move the Markdown note to the vault directory and the images to a subdirectory within this vault. This is because I changed settings in Obsidian that makes sure that all attachments, e.g.&nbsp;images, are saved in a separate subdirectory.</p>
<p>Here’s the function I created to get that job done. The function uses the <code>request</code> list again because it contains the file paths of the images. Here, <code>vault_location</code> and <code>attachments_dir</code> are the file paths to my Obsidian vault.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">library</span>(tidyr) <span class="co" style="color: #5E5E5E;"># for unnesting</span></span>
<span id="cb30-2">move_files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(request, replaced_template, vault_location, attachments_dir) {</span>
<span id="cb30-3">  <span class="co" style="color: #5E5E5E;"># Create from-to dictionary with file paths in each column</span></span>
<span id="cb30-4">  move_dict <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb30-5">    <span class="sc" style="color: #5E5E5E;">~</span>from, <span class="sc" style="color: #5E5E5E;">~</span>to,</span>
<span id="cb30-6">    request<span class="sc" style="color: #5E5E5E;">$</span>file_path, <span class="fu" style="color: #4758AB;">paste0</span>(vault_location, <span class="st" style="color: #20794D;">'/'</span>, attachments_dir),</span>
<span id="cb30-7">    replaced_template, vault_location</span>
<span id="cb30-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-9">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols =</span> <span class="st" style="color: #20794D;">'from'</span>)</span>
<span id="cb30-10">  <span class="co" style="color: #5E5E5E;"># Copy files from current working directory to destination</span></span>
<span id="cb30-11">  move_dict <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pwalk</span>(file.copy, <span class="at" style="color: #657422;">overwrite =</span> T)</span>
<span id="cb30-12">  <span class="co" style="color: #5E5E5E;"># Delete files in current working directory</span></span>
<span id="cb30-13">  <span class="fu" style="color: #4758AB;">walk</span>(move_dict<span class="sc" style="color: #5E5E5E;">$</span>from, file.remove)</span>
<span id="cb30-14">}</span></code></pre></div>
</div>
</section>
</section>
<section id="how-to-extract-url-and-other-stuff-from-mail" class="level2">
<h2 class="anchored" data-anchor-id="how-to-extract-url-and-other-stuff-from-mail">How to extract URL and other stuff from mail</h2>
<p>Let’s take a quick breather and recap. We have written functions that</p>
<ul>
<li>take a tweet URL</li>
<li>hussle the Twitter API to give us all its data</li>
<li>download the images and tweet text</li>
<li>save everything to a new Markdown note based on a template</li>
<li>can move the note plus images to the location of our note-taking hub</li>
</ul>
<p>Not to brag but that is kind of cool. But let’s not rest here. We still have to get some work done. After all, we want our workflow to be email-based. So, let’s access our mails using R. Then, we can extract a Twitter URL and apply our previous functions. Also, this lets us finally replace the <code>insert_mail_here</code> placeholder in our Markdown note.</p>
<section id="postman-gives-you-access" class="level3">
<h3 class="anchored" data-anchor-id="postman-gives-you-access">Postman gives you access</h3>
<p>I have created a dummy mail account at gmail. Using the <code>mRpostman</code> package, we can establish a connection to our mail inbox. After the connection is established, we can filter for all new emails that are sent from our list of <code>allowed_senders</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">library</span>(mRpostman) <span class="co" style="color: #5E5E5E;"># for email communication</span></span>
<span id="cb31-2">imap_mail <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'imaps://imap.gmail.com'</span> <span class="co" style="color: #5E5E5E;"># mail client</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;"># Establish connection to imap server</span></span>
<span id="cb31-4">con <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">configure_imap</span>(</span>
<span id="cb31-5">  <span class="at" style="color: #657422;">url =</span> imap_mail,</span>
<span id="cb31-6">  <span class="at" style="color: #657422;">user =</span> user_mail,</span>
<span id="cb31-7">  <span class="at" style="color: #657422;">password =</span> password_mail</span>
<span id="cb31-8">)</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;"># Switch to Inbox</span></span>
<span id="cb31-11">con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">select_folder</span>(<span class="st" style="color: #20794D;">'Inbox'</span>) </span>
<span id="cb31-12"></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;"># Extract mails that are from the list of allowed senders</span></span>
<span id="cb31-14">mails <span class="ot" style="color: #003B4F;">&lt;-</span> allowed_senders <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-15">  <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span>con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">search_string</span>(<span class="at" style="color: #657422;">expr =</span> ., <span class="at" style="color: #657422;">where =</span> <span class="st" style="color: #20794D;">'FROM'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-16">  <span class="fu" style="color: #4758AB;">unlist</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-17">  <span class="fu" style="color: #4758AB;">na.omit</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># Remove NAs if no mail from a sender</span></span>
<span id="cb31-18">  <span class="fu" style="color: #4758AB;">as.numeric</span>() <span class="co" style="color: #5E5E5E;"># avoids attributes</span></span></code></pre></div>
</div>
</section>
<section id="grab-urls-from-mail" class="level3">
<h3 class="anchored" data-anchor-id="grab-urls-from-mail">Grab URLs from mail</h3>
<p>If <code>mails</code> is not empty, i.e.&nbsp;if there are new mails, then we need to extract the tweet URLs from them. Unfortunately, depending on where you sent your email from, the mail text can be encoded.</p>
<p>For example, I send most of the tweets via the share button on Twitter using my Android smartphone. And for some reason, my Android mail client encodes the mails in something called <code>base64</code>. But sending a tweet URL from Thunderbird on my computer works without any encoding. Here are two example mails I have sent to my dummy mail account.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is_empty</span>(mails)) mail_bodys <span class="ot" style="color: #003B4F;">&lt;-</span> mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">fetch_text</span>()</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;">cat</span>(mail_bodys[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;">cat</span>(mail_bodys[[<span class="dv" style="color: #AD0000;">2</span>]])</span></code></pre></div>
</div>
<p>As you can see, the mail sent from my computer is legible but the other one is gibberish. Thankfully, Allan Cameron helped me out on <a href="https://stackoverflow.com/questions/71772972/translate-encoding-of-android-mail-in-r">Stackoverflow</a> to decode the mail. To decode the mail, the trick was to extract the parts between <code>base64</code> and <code>----</code>.</p>
<p>There are two such texts in the encoded mail. Surprisingly, the first one decoded to a text without line breaks. This is why we take the second encoded part and decode it. However, this will give us an HTML text with all kinds of tags like <code>&lt;div&gt;</code> and what not. Therefore, we use <code>html_read()</code> and <code>html_text2()</code> from the <code>rvest</code> package to handle that. All of this is summarized in this helper function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">decode_encoded_mails <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(encoded_mails) {</span>
<span id="cb33-2">  <span class="co" style="color: #5E5E5E;"># Ressource: https://stackoverflow.com/questions/71772972/translate-encoding-of-android-mail-in-r</span></span>
<span id="cb33-3">  <span class="co" style="color: #5E5E5E;"># Find location in each encoded string where actual text starts</span></span>
<span id="cb33-4">  start_encoded <span class="ot" style="color: #003B4F;">&lt;-</span> encoded_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-5">    <span class="fu" style="color: #4758AB;">str_locate_all</span>(<span class="st" style="color: #20794D;">'base64</span><span class="sc" style="color: #5E5E5E;">\r\n\r\n</span><span class="st" style="color: #20794D;">'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-6">    <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">pluck</span>(., <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-7">    <span class="fu" style="color: #4758AB;">unlist</span>()</span>
<span id="cb33-8">  </span>
<span id="cb33-9">  <span class="co" style="color: #5E5E5E;"># Find location in each encoded string where actual text starts</span></span>
<span id="cb33-10">  end_encoded <span class="ot" style="color: #003B4F;">&lt;-</span> encoded_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-11">    <span class="fu" style="color: #4758AB;">str_locate_all</span>(<span class="st" style="color: #20794D;">'----'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-12">    <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">pluck</span>(., <span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-13">    <span class="fu" style="color: #4758AB;">unlist</span>()</span>
<span id="cb33-14">  </span>
<span id="cb33-15">  <span class="co" style="color: #5E5E5E;"># Use str_sub() to extract encoded text</span></span>
<span id="cb33-16">  encoded_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb33-17">    <span class="at" style="color: #657422;">string =</span> <span class="fu" style="color: #4758AB;">unlist</span>(encoded_mails), </span>
<span id="cb33-18">    <span class="at" style="color: #657422;">start =</span> start_encoded, </span>
<span id="cb33-19">    <span class="at" style="color: #657422;">end =</span> end_encoded</span>
<span id="cb33-20">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-21">    <span class="fu" style="color: #4758AB;">pmap</span>(str_sub) </span>
<span id="cb33-22">  </span>
<span id="cb33-23">  <span class="co" style="color: #5E5E5E;"># Decode: base64 -&gt; raw -&gt; char -&gt; html -&gt; text</span></span>
<span id="cb33-24">  encoded_text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-25">    <span class="fu" style="color: #4758AB;">map</span>(base64enc<span class="sc" style="color: #5E5E5E;">::</span>base64decode) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-26">    <span class="fu" style="color: #4758AB;">map</span>(rawToChar) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-27">    <span class="fu" style="color: #4758AB;">map</span>(rvest<span class="sc" style="color: #5E5E5E;">::</span>read_html) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-28">    <span class="fu" style="color: #4758AB;">map</span>(rvest<span class="sc" style="color: #5E5E5E;">::</span>html_text2)</span>
<span id="cb33-29">}</span></code></pre></div>
</div>
<p>I feel like this is the most hacky part of this blog post. Unfortunately, your milage may vary here. If your phone or whatever you use encodes the mails differently, then you may have to adjust the function. But I hope that I have explained enough details and concepts for you to manage that if it comes to this.</p>
<p>Recall that I send both plain mails from Thunderbird and encoded mails from Android. Therefore, here is another helper that decoded mails if neccessary from both types in one swoop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">decode_all_mails <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(mail_bodys) {</span>
<span id="cb34-2">  <span class="co" style="color: #5E5E5E;"># Decode in case mail is base64 decoded</span></span>
<span id="cb34-3">  is_encoded <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_detect</span>(mail_bodys, <span class="st" style="color: #20794D;">'Content-Transfer-Encoding'</span>)</span>
<span id="cb34-4">  encoded_mails <span class="ot" style="color: #003B4F;">&lt;-</span> mail_bodys[is_encoded]</span>
<span id="cb34-5">  plain_mails <span class="ot" style="color: #003B4F;">&lt;-</span> mail_bodys[<span class="sc" style="color: #5E5E5E;">!</span>is_encoded]</span>
<span id="cb34-6">  decoded_mails <span class="ot" style="color: #003B4F;">&lt;-</span> encoded_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">decode_encoded_mails</span>()</span>
<span id="cb34-7">  <span class="fu" style="color: #4758AB;">c</span>(decoded_mails, plain_mails)</span>
<span id="cb34-8">}</span></code></pre></div>
</div>
<p>The remaining part of the code should be familiar:</p>
<ul>
<li>Use <code>decode_all_mails()</code> for decoding</li>
<li>Grab URLs with <code>str_extract()</code></li>
<li>Use <code>request_twitter_data()</code> with our URLs</li>
<li>Replace placeholders with <code>replace_template_placeholder()</code></li>
<li>This time, replace mail placeholders too with another <code>str_replace()</code> iteration</li>
<li>Move files with <code>move_files()</code></li>
</ul>
<p>The only new thing is that we use our postman connection to move the processed mails into a new directory (which I called “Processed”) on the email server. This way, the inbox is empty again or filled only with mails from unauthorized senders.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is_empty</span>(mails)) {</span>
<span id="cb35-2">  <span class="co" style="color: #5E5E5E;"># Grab mail texts and URLs</span></span>
<span id="cb35-3">  mail_bodys <span class="ot" style="color: #003B4F;">&lt;-</span> mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">fetch_text</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> decode_all_mails</span>
<span id="cb35-4">  urls <span class="ot" style="color: #003B4F;">&lt;-</span> mail_bodys <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_extract</span>(<span class="st" style="color: #20794D;">'https.*'</span>)</span>
<span id="cb35-5">  </span>
<span id="cb35-6">  <span class="co" style="color: #5E5E5E;"># Remove mails from vector in case s.th. goes wrong </span></span>
<span id="cb35-7">  <span class="co" style="color: #5E5E5E;"># and urls cannot be detected</span></span>
<span id="cb35-8">  mail_bodys <span class="ot" style="color: #003B4F;">&lt;-</span> mail_bodys[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(urls)]</span>
<span id="cb35-9">  mails <span class="ot" style="color: #003B4F;">&lt;-</span> mails[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(urls)]</span>
<span id="cb35-10">  urls <span class="ot" style="color: #003B4F;">&lt;-</span> urls[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(urls)]</span>
<span id="cb35-11">  </span>
<span id="cb35-12">  <span class="co" style="color: #5E5E5E;"># For each url request twitter data</span></span>
<span id="cb35-13">  requests <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">map</span>(urls, request_twitter_data, <span class="at" style="color: #657422;">bearer_token =</span> bearer_token)</span>
<span id="cb35-14">  </span>
<span id="cb35-15">  <span class="co" style="color: #5E5E5E;"># Use requested twitter data to insert texts into Markdown template </span></span>
<span id="cb35-16">  <span class="co" style="color: #5E5E5E;"># and write to current working directory</span></span>
<span id="cb35-17">  replaced_templates_wo_mails <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb35-18">    <span class="fu" style="color: #4758AB;">map</span>(requests, replace_template_placeholder, <span class="at" style="color: #657422;">template =</span> <span class="st" style="color: #20794D;">'template.md'</span>) </span>
<span id="cb35-19">  </span>
<span id="cb35-20">  <span class="co" style="color: #5E5E5E;"># Now that we have mails, replace that placeholder too</span></span>
<span id="cb35-21">  replaced_templates <span class="ot" style="color: #003B4F;">&lt;-</span> replaced_templates_wo_mails <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-22">    <span class="fu" style="color: #4758AB;">map2</span>(mail_bodys, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_replace</span>(.x, <span class="st" style="color: #20794D;">'insert_mail_here'</span> ,.y)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-23">    <span class="fu" style="color: #4758AB;">map2</span>(requests, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">write_replaced_text</span>(.x, .y))</span>
<span id="cb35-24">  </span>
<span id="cb35-25">  <span class="co" style="color: #5E5E5E;"># Move markdown files and extracted pngs to correct place on HDD</span></span>
<span id="cb35-26">  <span class="fu" style="color: #4758AB;">walk2</span>(</span>
<span id="cb35-27">    requests, </span>
<span id="cb35-28">    replaced_templates, </span>
<span id="cb35-29">    move_files, </span>
<span id="cb35-30">    <span class="at" style="color: #657422;">vault_location =</span> vault_location, </span>
<span id="cb35-31">    <span class="at" style="color: #657422;">attachments_dir =</span> attachments_dir</span>
<span id="cb35-32">  )</span>
<span id="cb35-33">  </span>
<span id="cb35-34">  <span class="co" style="color: #5E5E5E;"># Move emails on imap server to Processed directory</span></span>
<span id="cb35-35">  con<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">move_msg</span>(mails, <span class="at" style="color: #657422;">to_folder =</span> <span class="st" style="color: #20794D;">'Processed'</span>)</span>
<span id="cb35-36">}</span></code></pre></div>
</div>
</section>
</section>
<section id="last-step-execute-r-script-automatically" class="level2">
<h2 class="anchored" data-anchor-id="last-step-execute-r-script-automatically">Last Step: Execute R script automatically</h2>
<p>Alright, alright, alright. We made it. We have successfully</p>
<ul>
<li>extracted URLs from mails,</li>
<li>created new notes and</li>
<li>moved them to their designated place</li>
</ul>
<p>The only thing that is left to do is execute this script automatically. Again, if you don’t want to assemble the R script yourself using the code chunks in this blog post, check out this <a href="https://gist.github.com/AlbertRapp/37a2e0993acea9b4e36400037b797391">GitHub gist</a>.</p>
<p>On Windows, you can write a VBS script that will execute the R script. Window’s task scheduler is <a href="https://www.windowscentral.com/how-create-automated-task-using-task-scheduler-windows-10">easily set up</a> to run that VBS script regularly, say every hour. For completeness’ sake let me give you an example VBS script. But beware that I have no frikkin clue how VBS scripts work beyond this simple call.</p>
<pre><code>Set wshshell = WScript.CreateObject ("wscript.shell")
wshshell.run """C:\Program Files\R\R-4.0.5\bin\Rscript.exe"" ""D:\Local R Projects\Playground\TwitterTracking\my_twitter_script.R""", 6, True
set wshshell = nothing</code></pre>
<p>The idea of this script is to call <code>Rscript.exe</code> and give it the location of the R script that we want to execute. Of course, you will need to adjust the paths to your file system. Notice that there are super many double quotes in this script. This is somewhat dumb but it’s the only way I could find to make file paths with white spaces work (see <a href="https://stackoverflow.com/questions/14360599/vbs-with-space-in-file-path">StackOverflow</a>).</p>
<p>On Ubuntu (and probably other Unix-based systems), I am sure that every Unix user knows that there is <a href="https://stackoverflow.com/questions/38778732/schedule-a-rscript-crontab-everyminute">CronTab</a> to schedule regular tasks. On Mac, I am sure there is something. But instead of wandering even further from my expertise, I will refer to your internet search skills.</p>
</section>
<section id="mind-the-possibilities" class="level2">
<h2 class="anchored" data-anchor-id="mind-the-possibilities">Mind the possibilities</h2>
<p>We made it! We connected to Twitter’s API and our dummy email to get data viz (what’s the plural here? viz, vizz, vizzes, vizzeses?) into our note-taking system. Honestly, I think that was quite an endeavor. But now we can use the same ideas for all kind of other applications! From the top of my head I can think of more scenarios where similar solutions should be manageable. Here are two ideas.</p>
<ul>
<li><p>Take notes on the fly using emails and automatically incorporate the emails into your note-taking system.</p></li>
<li><p>Take a photo from a book/text you’re reading and send it to another dummy mail. Run a script that puts the photo and the mail directly into your vault.</p></li>
</ul>
<p>So, enjoy the possibilities! If you liked this blog post, then consider following me on <a href="https://twitter.com/rappa753">Twitter</a> and/or subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>. Until next time!</p>


</section>

 ]]></description>
  <category>Automation</category>
  <category>API</category>
  <guid>https://albert-rapp.de/posts/09_get_twitter_posts_into_your_notetaking_system/09_get_twitter_posts_into_your_notetaking_system.html</guid>
  <pubDate>Wed, 13 Apr 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Recreating the Storytelling with Data look with ggplot</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>So, I found a <a href="https://www.youtube.com/watch?v=st7_vPjq0SU">great video</a> from Storytelling with Data (SWD). In this video, a data storyteller demonstrates how a dataviz that does not demonstrate a clear story can be improved. Let’s take a look at the dataviz but, first, here’s the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">19</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">fulfilled =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">803</span>, <span class="dv" style="color: #AD0000;">865</span>, <span class="dv" style="color: #AD0000;">795</span>, <span class="dv" style="color: #AD0000;">683</span>, <span class="dv" style="color: #AD0000;">566</span>, <span class="dv" style="color: #AD0000;">586</span>, <span class="dv" style="color: #AD0000;">510</span>, <span class="dv" style="color: #AD0000;">436</span>, <span class="dv" style="color: #AD0000;">418</span>, <span class="dv" style="color: #AD0000;">364</span>, <span class="dv" style="color: #AD0000;">379</span>, <span class="dv" style="color: #AD0000;">372</span>, <span class="dv" style="color: #AD0000;">374</span>, <span class="dv" style="color: #AD0000;">278</span>, <span class="dv" style="color: #AD0000;">286</span>, <span class="dv" style="color: #AD0000;">327</span>, <span class="dv" style="color: #AD0000;">225</span>, <span class="dv" style="color: #AD0000;">222</span>, <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;">accuracy =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">86</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">84</span>, <span class="dv" style="color: #AD0000;">82</span>, <span class="dv" style="color: #AD0000;">86</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">93</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">87</span>, <span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">83</span>, <span class="dv" style="color: #AD0000;">94</span>, <span class="dv" style="color: #AD0000;">86</span>, <span class="dv" style="color: #AD0000;">78</span>, <span class="dv" style="color: #AD0000;">89</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">91</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">error =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">7</span>),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">null =</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">-</span> accuracy <span class="sc" style="color: #5E5E5E;">-</span> error</span>
<span id="cb1-8">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(accuracy<span class="sc" style="color: #5E5E5E;">:</span>null, <span class="sc" style="color: #5E5E5E;">~</span>. <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">100</span>))</span>
<span id="cb1-10">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 19 × 5
      id fulfilled accuracy error  null
   &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1       803     0.86  0.1   0.04
 2     2       865     0.8   0.14  0.06
 3     3       795     0.84  0.1   0.06
 4     4       683     0.82  0.14  0.04
 5     5       566     0.86  0.1   0.04
 6     6       586     0.8   0.16  0.04
 7     7       510     0.8   0.15  0.05
 8     8       436     0.93  0.06  0.01
 9     9       418     0.88  0.11  0.01
10    10       364     0.87  0.07  0.06
11    11       379     0.85  0.12  0.03
12    12       372     0.85  0.13  0.02
13    13       374     0.83  0.08  0.09
14    14       278     0.94  0.04  0.02
15    15       286     0.86  0.12  0.02
16    16       327     0.78  0.12  0.1 
17    17       225     0.89  0.07  0.04
18    18       222     0.88  0.1   0.02
19    19       200     0.91  0.07  0.02</code></pre>
</div>
</div>
<p>This data set contains a lot of accuracy and error rates from different (anonymous) warehouses. Additionally, there are “null rates”. These are likely related to data quality issues. Furthermore, this data set is apparently taken from a client the data storytellers helped. In any case, here is a <code>ggplot2</code> recreation of the client’s initial plot. Note that the plot does not match exactly but it’s close enough to get the gist.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_minimal</span>())</span>
<span id="cb3-2">dat_long <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;">cols =</span> accuracy<span class="sc" style="color: #5E5E5E;">:</span>null,</span>
<span id="cb3-5">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'type'</span>,</span>
<span id="cb3-6">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'percent'</span></span>
<span id="cb3-7">  )</span>
<span id="cb3-8"></span>
<span id="cb3-9">dat_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(id, percent, <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>, <span class="st" style="color: #20794D;">'error'</span>)))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb3-13">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Warehouse Accuracy Rates'</span>,</span>
<span id="cb3-14">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Warehouse ID'</span>,</span>
<span id="cb3-15">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'% of total orders'</span>,</span>
<span id="cb3-16">    <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()</span>
<span id="cb3-17">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-18">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> <span class="sc" style="color: #5E5E5E;">~</span>scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(., <span class="at" style="color: #657422;">accuracy =</span> <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>As it is right know, the plot shows data. But what is the message of this dataviz? To make the message more explicit, the plot is transformed during the course of the video. Take a look at what story the exact same data can tell.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="final.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/final.png" class="img-fluid figure-img" width="944"></a></p>
</figure>
</div>
</div>
</div>
<p>From reading the SWD book, I know that some of the techniques that were used in this picture can be used in many settings. Therefore, I decided to document the steps I took to recreate the dataviz with ggplot.</p>
<p>I tried to make this documentation as accessible as possible. Consequently, if you are already quite familiar with how to customize a ggplot’s details, then some of the explanations or references may be superfluous. Feel free to skip them. That being said, let’s transform the plot.</p>
<section id="flip-the-axes-for-long-names" class="level2">
<h2 class="anchored" data-anchor-id="flip-the-axes-for-long-names">Flip the axes for long names</h2>
<p>Although it is not really an issue here, warehouses or other places might be more identifiable by a (long) name rather than an ID. To make sure that these names are legible, show them on the y-axes. When I first learned ggplot, there was the layer <code>coord_flip()</code> to do that job for us. Nowadays, though, you can often avoid <code>coord_flip()</code> because a lot of geoms already understand what you mean, when you map categorical data to the y-aesthetic. But make sure that ggplot will know that you mean categorical data (especially if the labels are numerical like here).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">categorial_dat <span class="ot" style="color: #003B4F;">&lt;-</span> dat_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">as.character</span>(id),</span>
<span id="cb4-4">  )</span>
<span id="cb4-5"></span>
<span id="cb4-6">categorial_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> percent, <span class="at" style="color: #657422;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>))),</span>
<span id="cb4-10">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="co" style="color: #5E5E5E;"># set color to distinguish bars better</span></span>
<span id="cb4-11">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice that I used the <code>group</code>- instead of <code>fill</code>-aesthetic because I only need grouping. Also, it is always a good idea to avoid <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/">excessive use of colors</a>. This will allow us to emphasize parts of our story with colors later on.</p>
</section>
<section id="add-reference-points" class="level2">
<h2 class="anchored" data-anchor-id="add-reference-points">Add reference points</h2>
<p>Another good idea it to put your data into perspective. To do so, include a reference point. This can be a summary statistic like the average error rate. For more great demonstration of reference points you can also check out <a href="https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot-ep.-1/">the evolution of a ggplot by Cédric Scherer</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">averages <span class="ot" style="color: #003B4F;">&lt;-</span> dat_long <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">group_by</span>(type) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">percent =</span> <span class="fu" style="color: #4758AB;">mean</span>(percent)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id =</span> <span class="st" style="color: #20794D;">'ALL'</span>) </span>
<span id="cb5-5"></span>
<span id="cb5-6">dat_with_summary <span class="ot" style="color: #003B4F;">&lt;-</span> categorial_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">bind_rows</span>(averages)</span>
<span id="cb5-8"></span>
<span id="cb5-9">dat_with_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> percent, <span class="at" style="color: #657422;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>))),</span>
<span id="cb5-13">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb5-14">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="order-your-data" class="level2">
<h2 class="anchored" data-anchor-id="order-your-data">Order your data</h2>
<p>To allow your reader to gain a quick overview, put your data into some form of sensible ordering. This eases the burden of having to make sense of what the visual shows. Also, notice that we already did part of that. See, with the order of the levels in the <code>group</code> aesthetic, we influenced the ordering of the stacked bars. Here, we made sure that important quantities start at the left resp. right edges.</p>
<p>Why is that helpful, you ask? Well, the bars that start on the left all start at the same reference point. Therefore comparisons are quite easy for these bars. The same holds true for the right edge. Consequently, it is best that we reserve these vip seats for the important data. Check out what happens if I were to put the accuracy in the middle.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">dat_with_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> percent, <span class="at" style="color: #657422;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>, <span class="st" style="color: #20794D;">'null'</span>))),</span>
<span id="cb6-5">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb6-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Now, we can’t really make out which warehouses have a higher accuracy. Given that the accuracy is likely something we care about, this is bad. But we can change the order even more. For instance, we can also order the bars by error rate. Here, <code>fct_reorder()</code> is our friend.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">ordered_dat <span class="ot" style="color: #003B4F;">&lt;-</span> dat_with_summary <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">factor</span>(type, <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'error'</span>, <span class="st" style="color: #20794D;">'null'</span>, <span class="st" style="color: #20794D;">'accuracy'</span>)),</span>
<span id="cb7-4">    <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(id, percent, <span class="at" style="color: #657422;">.desc =</span> T)</span>
<span id="cb7-5">  ) </span>
<span id="cb7-6"></span>
<span id="cb7-7">ordered_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> percent, <span class="at" style="color: #657422;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb7-10">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group =</span> type),</span>
<span id="cb7-11">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb7-12">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="highlight-your-story-points" class="level2">
<h2 class="anchored" data-anchor-id="highlight-your-story-points">Highlight your story points</h2>
<p>Next, it’s time to highlight your story points. This can be done with the <code>gghighlight</code> as I have demonstrated <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/#emphasize-just-one-or-a-few-categories">in another blog post</a>. Alternatively, we can set the colors manually. The latter approach gave me the best results in this case, so we’ll go with that. But I am still a big fan of <code>gghighlight</code>, so don’t discard its power just yet.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Set colors as variable for easy change later</span></span>
<span id="cb8-2">unhighlighted_color <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey80'</span></span>
<span id="cb8-3">highlighted_color <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'#E69F00'</span></span>
<span id="cb8-4">avg_error <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb8-5">avg_rest <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey40'</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Compute new column with colors of each bar</span></span>
<span id="cb8-8">colored_dat <span class="ot" style="color: #003B4F;">&lt;-</span> ordered_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb8-10">    <span class="at" style="color: #657422;">custom_colors =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb8-11">      id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'ALL'</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'error'</span> <span class="sc" style="color: #5E5E5E;">~</span> avg_error,</span>
<span id="cb8-12">      id <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'ALL'</span> <span class="sc" style="color: #5E5E5E;">~</span> avg_rest,</span>
<span id="cb8-13">      type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'error'</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> percent <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">~</span> highlighted_color,</span>
<span id="cb8-14">      T <span class="sc" style="color: #5E5E5E;">~</span>  unhighlighted_color</span>
<span id="cb8-15">    )</span>
<span id="cb8-16">  )</span>
<span id="cb8-17"></span>
<span id="cb8-18">p <span class="ot" style="color: #003B4F;">&lt;-</span> colored_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-19">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> percent, <span class="at" style="color: #657422;">y =</span> id)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-20">  <span class="fu" style="color: #4758AB;">geom_col</span>(</span>
<span id="cb8-21">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group =</span> type),</span>
<span id="cb8-22">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb8-23">    <span class="at" style="color: #657422;">fill =</span> colored_dat<span class="sc" style="color: #5E5E5E;">$</span>custom_colors <span class="co" style="color: #5E5E5E;"># Set colors manually</span></span>
<span id="cb8-24">  )</span>
<span id="cb8-25">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice how your eyes are immediately drawn to the intended region. That’s the power of colors! Also, note that setting the colors manually like this worked because <code>fill</code> in <code>geom_col()</code> is vectorized. This is not always the case. In these instances, you may find that <a href="https://albert-rapp.de/post/2022-03-25-functional-programming-when-geoms-are-not-vectorized/">functional programming solves your problem</a>.</p>
</section>
<section id="remove-axes-expansion-and-allow-drawing-outside-of-grid" class="level2">
<h2 class="anchored" data-anchor-id="remove-axes-expansion-and-allow-drawing-outside-of-grid">Remove axes expansion and allow drawing outside of grid</h2>
<p>Did you notice that there is still some clutter in the plot? Removing clutter from a plot is a central element of the SWD look. Personally, I like this approach. So, let’s get down to the essentials and remove what does not need to be there. In this case, there are still (faint) horizontal lines behind each bar. Furthermore, this causes the warehouse IDs to be slightly removed from the bars. We change that through formatting the coordinate system with <code>coord_cartesian()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(</span>
<span id="cb9-3">    <span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), </span>
<span id="cb9-4">    <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">20.5</span>), </span>
<span id="cb9-5">    <span class="at" style="color: #657422;">expand =</span> F, <span class="co" style="color: #5E5E5E;"># removes white spaces at edge of plot</span></span>
<span id="cb9-6">    <span class="at" style="color: #657422;">clip =</span> <span class="st" style="color: #20794D;">'off'</span> <span class="co" style="color: #5E5E5E;"># allows drawing outside of panel</span></span>
<span id="cb9-7">  )</span>
<span id="cb9-8">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Here, we turned off the expansion to avoid wasting white space. Now, the IDs are at their designated place and we do not see lines from their names to the bars anymore. If you want even more power on the space expansion you can leave <code>expand = T</code> and modify the expansion for each axis with <code>scale_*_continuous()</code> and the <code>expansion()</code> function. Check out <a href="https://twitter.com/ChBurkhart/status/1492087527511052290/photo/1">Christian Burkhart’s neat cheatsheet</a> that teaches you everything you need to understand expansions.</p>
<p>On an unrelated note, you may wonder why I set <code>clip = 'off'</code>. This little secret will be revealed soon. For now, just know that it allows you to draw geoms outside the regular panel.</p>
</section>
<section id="move-and-format-axes" class="level2">
<h2 class="anchored" data-anchor-id="move-and-format-axes">Move and format axes</h2>
<p>You may have noticed that the x-axis in the finished plot is at the top of the panel rather than at the bottom. While that is unusual, it helps the reader to get straight to the point as the data is in view earlier. This assumes that the eyes of a typical dataviz reader will first look at the top left corner and then zigzag downwards.</p>
<p>In <code>ggplot2</code>, moving the axes and setting the break points happens in a scale layer. It is here where we use the <code>scales::percent()</code> function to transform the axes labels. Additionally, changing labels happens in <code>labs()</code> and the remaining axes and text changes happen in <code>theme()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">unhighlighed_col_darker <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'grey60'</span></span>
<span id="cb10-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb10-4">    <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>),</span>
<span id="cb10-5">    <span class="at" style="color: #657422;">labels =</span> scales<span class="sc" style="color: #5E5E5E;">::</span>percent,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb10-7">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Accuracy rates for highest volume warehouses'</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'WAREHOUSE ID'</span>,</span>
<span id="cb10-11">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'% OF TOTAL ORDERS FULFILLED'</span>,</span>
<span id="cb10-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb10-14">    <span class="at" style="color: #657422;">axis.line.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-15">    <span class="at" style="color: #657422;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;">element_line</span>(<span class="at" style="color: #657422;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-16">    <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-17">    <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">colour =</span> unhighlighed_col_darker),</span>
<span id="cb10-18">    <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">'black'</span>)</span>
<span id="cb10-19">  )</span>
<span id="cb10-20">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice that we have customized the theme elements via <code>element_*()</code> functions. Basically, each geom type like “line”, “rect”, “text”, etc. has their own <code>element_*()</code> function. The <code>theme()</code> function expects attributes to be changed using these. If you are unfamiliar with this concept, maybe the corresponding part in my <a href="https://yards.albert-rapp.de/statquant#themes">YARDS lecture notes</a> will help you.</p>
</section>
<section id="align-labels" class="level2">
<h2 class="anchored" data-anchor-id="align-labels">Align labels</h2>
<p>Aligning plot elements, e.g.&nbsp;labels, to form clean lines is another major aspect of the SWD look. Before I read about it, I did not even notice it but once you see it you cannot go back. Basically, plots feel “more harmonious” if there are clear (not necessarily drawn) lines like with the left and right edge of the stacked bars. But this concept does not stop with the bars and can be used for the labels too. Let’s demonstrate that by moving the labels with more of <code>theme()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;">axis.title.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb11-4">    <span class="at" style="color: #657422;">axis.title.y =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb11-5">    <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span></span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;"># aligns the title to the whole plot and not the (inner) panel</span></span>
<span id="cb11-7">  )</span>
<span id="cb11-8">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Once again, the design enforces that important information like what’s on an axis is in the top left corner. This was done by changing <code>hjust</code>. In this case <code>hjust = 0</code> corresponds to left-justified whereas <code>hjust = 1</code> corresponds to right-justified. Of course, <code>vjust</code> works similarly. For more details w.r.t. <code>hjust</code> and <code>vjust</code>, check out <a href="https://stackoverflow.com/questions/7263849/what-do-hjust-and-vjust-do-when-making-a-plot-using-ggplot">this stackoverflow answer</a> that gives you everything that you need in one visual. For your convenience, here is a slightly changed form of that visual.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>But once you start aligning the axes titles, you notice that the 0% and 100% labels fall outside the grid. We could try to set <code>hjust</code> of <code>axis.text.x</code> in <code>theme()</code> but sadly this is not vectorized. Subsequently, all <code>hjust</code> values must be the same. That’s not bueno. Therefore, I drew the axes labels manually with <code>annotate()</code> but make sure that you remove the current labels in <code>scale_x_continuous()</code>. Also, now you know why we had to set <code>clip = 'off'</code> earlier. The axes labels are outside of the regular panel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="co" style="color: #5E5E5E;"># Overwriting previous scale will generate a warning but that's ok</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #657422;">breaks =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>), <span class="co" style="color: #5E5E5E;"># We still want the axes ticks</span></span>
<span id="cb12-5">    <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">''</span>, <span class="dv" style="color: #AD0000;">6</span>), <span class="co" style="color: #5E5E5E;"># Empty strings as labels</span></span>
<span id="cb12-6">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">'top'</span></span>
<span id="cb12-7">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb12-9">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>),</span>
<span id="cb12-11">    <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">20.75</span>,</span>
<span id="cb12-12">    <span class="at" style="color: #657422;">label =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0.2</span>), <span class="at" style="color: #657422;">accuracy =</span> <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb12-13">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb12-14">    <span class="at" style="color: #657422;">hjust =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">rep</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">4</span>), <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;"># individual hjust here</span></span>
<span id="cb12-16">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb12-17">    <span class="at" style="color: #657422;">col =</span> unhighlighed_col_darker</span>
<span id="cb12-18">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-19">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb12-20">    <span class="at" style="color: #657422;">axis.title.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;"># change vjust to avoid overplotting</span></span>
<span id="cb12-22">  )</span>
<span id="cb12-23">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-text-labels" class="level2">
<h2 class="anchored" data-anchor-id="add-text-labels">Add text labels</h2>
<p>The same trick can be used to add the category description (accuracy, null, error) to the right top corner and label the highlighted bars. For the latter part, we simply extract the corresponding rows from our data and use that in conjunction with <code>geom_text()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">text_labels <span class="ot" style="color: #003B4F;">&lt;-</span> colored_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'error'</span>, percent <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">percent =</span> scales<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">percent</span>(percent, <span class="at" style="color: #657422;">accuracy =</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb13-4"></span>
<span id="cb13-5">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb13-7">    <span class="at" style="color: #657422;">data =</span> text_labels, </span>
<span id="cb13-8">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">label =</span> percent), </span>
<span id="cb13-9">    <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">1.1</span>,</span>
<span id="cb13-10">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb13-11">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb13-12">  )</span>
<span id="cb13-13">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-15-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice that I used a <code>hjust</code> value greater than 1 here to add some white space on the right side of the labels. Otherwise, the percent sign will be too close to the bar’s edge.</p>
<p>Next, we add the category descriptions. This is a bit more tricky, though, because we want to highlight a word too, So, we will add a <code>richtext</code> as described <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/#label-directly">in my previous blog post</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb14-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb14-4">    <span class="st" style="color: #20794D;">'richtext'</span>,</span>
<span id="cb14-5">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-6">    <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">21.25</span>,</span>
<span id="cb14-7">    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"ACCURATE | NULL | &lt;span style = 'color:#E69F00'&gt;ERROR&lt;/span&gt;"</span>,</span>
<span id="cb14-8">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb14-10">    <span class="at" style="color: #657422;">col =</span> unhighlighed_col_darker, </span>
<span id="cb14-11">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb14-12">    <span class="at" style="color: #657422;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>,</span>
<span id="cb14-13">    <span class="at" style="color: #657422;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb14-14">  )</span>
<span id="cb14-15">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-16-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-story-text" class="level2">
<h2 class="anchored" data-anchor-id="add-story-text">Add story text</h2>
<p>Now that the bar plot is finished we can work on the story text. For that, we create another plot that contains only the text. Later on, we will combine both of our plots with the <code>patchwork</code> package. There are no really knew techniques here, so let’s get straight to the code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Save text data in a tibble</span></span>
<span id="cb15-2">tib_summary_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb15-3">  <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb15-4">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">1.65</span>, <span class="fl" style="color: #AD0000;">0.5</span>), </span>
<span id="cb15-5">  <span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"&lt;span style = 'color:grey60'&gt;OVERALL:&lt;/span&gt; **The error rate is 10% across all&lt;br&gt;66 warehouses**. &lt;span style = 'color:grey60'&gt;The good news is that&lt;br&gt;the accuracy rate is 85% so we</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">re hitting&lt;br&gt;the mark in nearly all our centers due to&lt;br&gt;the quality initiatives implemented last year.&lt;/span&gt;"</span>,</span>
<span id="cb15-6">  <span class="st" style="color: #20794D;">"&lt;span style = 'color:#E69F00'&gt;OPPORTUNITY TO IMPROVE:&lt;/span&gt; &lt;span style = 'color:grey60'&gt;10 centers&lt;br&gt;have higher than average error rates of&lt;br&gt;10%-16%.&lt;/span&gt; &lt;span style = 'color:#E69F00'&gt;We recommend investigating&lt;br&gt;specific details and **scheduling meetings&lt;br&gt;with operations managers to&lt;br&gt;determine what's driving this.**&lt;/span&gt;"</span></span>
<span id="cb15-7">  )</span>
<span id="cb15-8">)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;"># Create text plot with geom_richtext() and theme_void()</span></span>
<span id="cb15-11">text_plot <span class="ot" style="color: #003B4F;">&lt;-</span> tib_summary_text <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-12">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(</span>
<span id="cb15-14">    <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">label =</span> label),</span>
<span id="cb15-15">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb15-16">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb15-17">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb15-18">    <span class="at" style="color: #657422;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb15-19">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-20">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">clip =</span> <span class="st" style="color: #20794D;">'off'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-21">  <span class="co" style="color: #5E5E5E;"># clip = 'off' is important for putting it together later.</span></span>
<span id="cb15-22">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span>
<span id="cb15-23">text_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="10_recreating_swd_look_files/figure-html/unnamed-chunk-17-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="add-main-message-as-new-title-and-subtitle" class="level2">
<h2 class="anchored" data-anchor-id="add-main-message-as-new-title-and-subtitle">Add main message as new title and subtitle</h2>
<p>As I said before, we will put the two plots together with <code>patchwork</code>. If you have never dealt with <code>patchwork</code>, feel free to check out my short <a href="https://albert-rapp.de/post/2021-10-28-extend-plot-variety/">intro to patchwork</a>. Putting the plots together gives us another opportunity: We can now set additional titles and subtitles of the <strong>whole</strong> plot. Use these to add the main message of your plot.</p>
<p>But make sure that there is enough white space around them by setting the title margins in <code>theme()</code>. Otherwise, your plot will feel “too full”. Adding spacing is achieved through a <code>margin()</code> function in <code>element_text()</code>. Though, in this case we use <code>element_markdown()</code> which works exactly the same but enables <a href="https://www.markdownguide.org/basic-syntax/">Markdown syntax</a> like using asterisks for bold texts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Save texts as variables for better code legibility</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># Here I used Markdown syntax</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># To enable its rendering, use element_markdown() in theme</span></span>
<span id="cb16-4">title_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"**Action needed:** 10 warehouses have &lt;span style = 'color:#E69F00'&gt;high error rates&lt;/span&gt;"</span></span>
<span id="cb16-5">subtitle_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"&lt;span style = 'color:#E69F00'&gt;DISCUSS:&lt;/span&gt; what are &lt;span style = 'color:#E69F00'&gt;**next steps to improve errors**&lt;/span&gt; at highest volume warehouses?&lt;br&gt;&lt;span style = 'font-size:10pt;color:grey60'&gt;The subset of centers shown (19 out of 66) have the highest volume of orders fulfilled&lt;/span&gt;"</span></span>
<span id="cb16-6">caption_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"SOURCE: ProTip Dashboard as of Q4/2021. See file xxx for additional context on remaining 47 warehouses&lt;br&gt;&lt;span style = 'font-size:6pt;color:grey60'&gt;Original: Storytelling with Data - improve this graph! exercise | {ggplot2} remake by Albert Rapp (@rappa753)."</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;"># Compose plot</span></span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb16-10">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-11">  text_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-12">  <span class="co" style="color: #5E5E5E;"># Make text plot narrower</span></span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.4</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-14">  <span class="co" style="color: #5E5E5E;"># Add main message via title and subtitle</span></span>
<span id="cb16-15">  <span class="fu" style="color: #4758AB;">plot_annotation</span>(</span>
<span id="cb16-16">    <span class="at" style="color: #657422;">title =</span> title_text,</span>
<span id="cb16-17">    <span class="at" style="color: #657422;">subtitle =</span> subtitle_text,</span>
<span id="cb16-18">    <span class="at" style="color: #657422;">caption =</span> caption_text,</span>
<span id="cb16-19">    <span class="at" style="color: #657422;">theme =</span> <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb16-20">      <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(</span>
<span id="cb16-21">        <span class="at" style="color: #657422;">margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">b =</span> <span class="fl" style="color: #AD0000;">0.4</span>, <span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb16-22">        <span class="co" style="color: #5E5E5E;"># 0.4cm margin at bottom of title</span></span>
<span id="cb16-23">        <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">16</span></span>
<span id="cb16-24">      ),</span>
<span id="cb16-25">      <span class="at" style="color: #657422;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(</span>
<span id="cb16-26">        <span class="at" style="color: #657422;">margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">b =</span> <span class="fl" style="color: #AD0000;">0.4</span>, <span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">'cm'</span>),</span>
<span id="cb16-27">        <span class="co" style="color: #5E5E5E;"># 0.4cm margin at bottom of title</span></span>
<span id="cb16-28">        <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">11.5</span></span>
<span id="cb16-29">      ),</span>
<span id="cb16-30">      <span class="at" style="color: #657422;">plot.caption.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb16-31">      <span class="at" style="color: #657422;">plot.caption =</span> <span class="fu" style="color: #4758AB;">element_markdown</span>(</span>
<span id="cb16-32">        <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb16-33">        <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>, </span>
<span id="cb16-34">        <span class="at" style="color: #657422;">colour =</span> unhighlighed_col_darker, </span>
<span id="cb16-35">        <span class="at" style="color: #657422;">lineheight =</span> <span class="fl" style="color: #AD0000;">1.25</span></span>
<span id="cb16-36">      ),</span>
<span id="cb16-37">      <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="at" style="color: #657422;">colour =</span> <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb16-38">      <span class="co" style="color: #5E5E5E;"># This is only a trick to make sure that background really is white</span></span>
<span id="cb16-39">      <span class="co" style="color: #5E5E5E;"># Otherwise, some browsers or photo apps will apply a dark mode</span></span>
<span id="cb16-40">    )</span>
<span id="cb16-41">  ) </span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="final.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/final.png" class="img-fluid figure-img" width="944"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="get-the-sizes-right" class="level2">
<h2 class="anchored" data-anchor-id="get-the-sizes-right">Get the sizes right</h2>
<p>In the last plot, I cheated. I gave you the correct code I used to generate the picture. But I did not execute it. Instead, I only displayed the code and then showed you the (imported) picture from the start of this blog post. Why did I do this? Because getting the sizes right sucks!</p>
<p>If you have dealt with ggplot enough, then you will know that text sizes are often set in absolute rather than in relative terms. Therefore, if you make the bar plot smaller in width (like we did), then the bars may be appropriately scaled to the new width but, more often than not, the texts are not. In this case, this led to way too large fonts as beautifully demonstrated in <a href="https://www.christophenicault.com/post/understand_size_dimension_ggplot2/">Christophe Nicault’s helpful blog post</a>.</p>
<p>So, how do you avoid this? First off, choose size and <a href="https://albert-rapp.de/post/2022-03-04-fonts-and-icons/">fonts</a> last (choose the font first, though). This will save you a lot of repetitive work when you change the alignment in your plot. But this tip will only get you so far, because you have to fix some sizes in between to get a feeling for the visualization you are trying to create.</p>
<p>Therefore, try to get you canvas into an appropriate size first. I try to do this by using the <code>camcorder</code> package at the start of my visualization process. This will ensure that my plots are saved as a png-file with predetermined dimensions and the resulting file is displayed in the Viewer pane in RStudio (as opposed to the Plots pane).</p>
<p>For example, at the start of working on this visualization I have called</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">camcorder<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gg_record</span>(</span>
<span id="cb17-2">  <span class="at" style="color: #657422;">dir =</span> <span class="st" style="color: #20794D;">'img'</span>, <span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>, <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">9</span>, <span class="at" style="color: #657422;">units =</span> <span class="st" style="color: #20794D;">'cm'</span></span>
<span id="cb17-3">)</span></code></pre></div>
</div>
<p>This made getting the sizes right for my final output somewhat easier because the canvas size remains the same throughout the process. Though be sure to call <code>gg_record()</code> <strong>after</strong> <code>library(ggtext)</code> or make sure that you call <code>gg_record()</code> again if you add <code>ggtext</code> only later. Otherwise, your plots will revert back to being displayed in the Plots pane (with relative sizing). Finally, if you want to use <code>camcorder</code> in conjunction with <code>showtext</code>, then be sure that <code>showtext</code> will know what dpi value you chose when calling <code>gg_record()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">showtext<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">showtext_opts</span>(<span class="at" style="color: #657422;">dpi =</span> <span class="dv" style="color: #AD0000;">300</span>)</span></code></pre></div>
</div>
<p>Alright, that concludes this somewhat long blog post. I hope that you enjoyed it and learned something valuable. If you did, feel free to leave a comment. Also, you can stay in touch with my work by subscribing to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a> or following me on <a href="https://twitter.com/rappa753">Twitter</a>.</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html</guid>
  <pubDate>Mon, 28 Mar 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use functional programming for ggplot</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<div class="cell">

</div>
<p>A couple of weeks back, I recreated an info graphic with <code>ggplot2</code>. The result and the whole story is embedded in this thread on Twitter:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
The fun thing about getting better at <a href="https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw">#ggplot2</a> is that you begin to mimick other <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a>.<br><br>Here is a practice <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> info graphic I created after seeing a similar infographic from <a href="https://twitter.com/EatSmarter_de?ref_src=twsrc%5Etfw"><span class="citation" data-cites="EatSmarter_de">@EatSmarter_de</span></a> <br><br>Original graphic, making of, comments and some ressources below ⬇️🧵 <a href="https://t.co/FslScy9sc7">pic.twitter.com/FslScy9sc7</a>
</p>
— Albert Rapp (<span class="citation" data-cites="rappa753">@rappa753</span>) <a href="https://twitter.com/rappa753/status/1500213701370171392?ref_src=twsrc%5Etfw">March 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Aside from the embarrasing typo in “What you should <strong>know</strong>…”, I picked up a useful technique for what do when I want aesthetics to vary within a geom. Sounds complicated? Let’s take a look at a couple of examples.</p>
<section id="how-do-i-manually-set-aesthetics-with-aes-and-scale__identity" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-manually-set-aesthetics-with-aes-and-scale__identity">How do I manually set aesthetics with aes() and scale_*_identity()?</h2>
<p>This one is the easy case when all geoms behave properly.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_minimal</span>())</span>
<span id="cb1-3">tib <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tribble</span>(</span>
<span id="cb1-4">  <span class="sc" style="color: #5E5E5E;">~</span>x, <span class="sc" style="color: #5E5E5E;">~</span>xend, <span class="sc" style="color: #5E5E5E;">~</span>y, <span class="sc" style="color: #5E5E5E;">~</span>yend, <span class="sc" style="color: #5E5E5E;">~</span>size_col,</span>
<span id="cb1-5">  <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-6">  <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">xend =</span> xend, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">yend =</span> yend, <span class="at" style="color: #657422;">size =</span> size_col)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">scale_size_identity</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice that</p>
<ul>
<li>the sizes were determined in the <code>size_col</code> column of <code>tib</code>.</li>
<li>sizes were mapped to the aesthethic via <code>aes()</code>.</li>
<li>the <code>scale_size_identity()</code> layer makes sure that the sizes are not assigned by ggplot but taken as given (identity scale layers are available for other aesthetics as well).</li>
</ul>
</section>
<section id="how-do-i-manually-set-aesthetics-without-aes" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-manually-set-aesthetics-without-aes">How do I manually set aesthetics without aes()?</h2>
<p>The last example used <code>aes()</code> to access <code>size_col</code> from <code>tib</code>. However, we then had to make sure that ggplot does not assign sizes based on unique values in <code>size_col</code>. Instead, sizes were supposed to be taken as is. This was the job of <code>scale_size_identity()</code>. Let’s make it work without it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">xend =</span> xend, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, <span class="at" style="color: #657422;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col) </span></code></pre></div>
</div>
<p>This will generate the exact same plot as before (which is why I suppressed the output). In this case, we mapped the sizes manually by assigning a vector of sizes to the <code>size</code> aesthetic within <code>geom_segment()</code> but <strong>outside</strong> <code>aes()</code>.</p>
<p>Of course, now we cannot simply write <code>size = size_col</code> because <code>geom_segment()</code> won’t know that variable. Before, <code>aes()</code> let ggplot know that we mean <code>size_col</code> from the data set <code>tib</code>. Now, we have to pass the vector by accessing it from <code>tib</code> ourself through <code>tib$size_col</code>.</p>
</section>
<section id="how-do-i-manually-set-aesthethics-when-the-previous-approaches-do-not-work" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-manually-set-aesthethics-when-the-previous-approaches-do-not-work">How do I manually set aesthethics when the previous approaches do not work?</h2>
<p>Finally, let’s switch from <code>geom_segment()</code> to <code>geom_curve()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">xend =</span> xend, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_curve</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, <span class="at" style="color: #657422;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col, <span class="at" style="color: #657422;">curvature =</span> <span class="fl" style="color: #AD0000;">0.6</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>This changes our straight lines from before to curved lines. What’s more, I can control how strong the curvature is supposed to be via <code>curvature</code>. But as it is right now, both of our differently-sized curves have the same level of curvature.</p>
<p>Maybe, this ought to be different. Maybe, not all curves are made the same. Maybe, our visualization should reflect the diversity of all the curves out there in this gigantic world we inhabit. All curves are beautiful!</p>
<p>Let’s make this happen as we did before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">xend =</span> xend, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb4-5">    <span class="at" style="color: #657422;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col, </span>
<span id="cb4-6">    <span class="at" style="color: #657422;">curvature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.6</span>) <span class="co" style="color: #5E5E5E;"># two curves, two different curvatures</span></span>
<span id="cb4-7">  ) </span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in if (curvature == 0) {: the condition has length &gt; 1</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Oh no! It seems as if <code>geom_curve()</code> expects the argument of <code>curvature</code> to be a single number. Maybe <code>aes()</code> then?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">xend =</span> xend, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb6-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">curvature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.6</span>)),</span>
<span id="cb6-5">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb6-6">    <span class="at" style="color: #657422;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col </span>
<span id="cb6-7">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Well, at least this time we can see curves. Unfortunately, the warning let’s us know that <code>curvature</code> is an unknown aesthetic which will be ignored. As you can see, this results in the same curvature for both curves again.</p>
<p>So, it looks like we can only hope to set each curvature separately.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> x, <span class="at" style="color: #657422;">xend =</span> xend, <span class="at" style="color: #657422;">y =</span> y, <span class="at" style="color: #657422;">yend =</span> yend)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">slice</span>(tib, <span class="dv" style="color: #AD0000;">1</span>), <span class="co" style="color: #5E5E5E;"># first row of tib</span></span>
<span id="cb7-4">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb7-5">    <span class="at" style="color: #657422;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col[<span class="dv" style="color: #AD0000;">1</span>], <span class="co" style="color: #5E5E5E;"># one size only</span></span>
<span id="cb7-6">    <span class="at" style="color: #657422;">curvature =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb7-7">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb7-9">    <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">slice</span>(tib, <span class="dv" style="color: #AD0000;">2</span>), <span class="co" style="color: #5E5E5E;"># second row of tib</span></span>
<span id="cb7-10">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, </span>
<span id="cb7-11">    <span class="at" style="color: #657422;">size =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>size_col[<span class="dv" style="color: #AD0000;">2</span>], <span class="co" style="color: #5E5E5E;"># other size</span></span>
<span id="cb7-12">    <span class="at" style="color: #657422;">curvature =</span> <span class="fl" style="color: #AD0000;">0.6</span></span>
<span id="cb7-13">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Alright, this time we got what we wanted. That’s something at least. Honestly, our “solution” is not scalable though. What if we want to draw hundreds of curves?</p>
<p>In fact, this is what slowed me down when I created the info graphic that started this blog post. The text boxes were not vectorized so I would have to place each text box manually. That’s a lot of text boxes and I was having none of that.</p>
<p>So, here is where functional programming stepped in. Let’s recreate what I did based on our curve example. First, we extend <code>tib</code> with another curvature column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">tib <span class="ot" style="color: #003B4F;">&lt;-</span> tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">curvature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.6</span>))</span>
<span id="cb8-2">tib</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 6
      x  xend     y  yend size_col curvature
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;
1     0     1     0     1        1      -0.3
2     1     2     1     1        5       0.6</code></pre>
</div>
</div>
<p>Then, we use <code>pmap()</code> to create a <strong>list of curve layers</strong>. If you have not used any functional programming before, checkout my <a href="https://yards.albert-rapp.de/lm-with-lists.html">YARDS lecture notes</a> on that topic. Basically, what we will do is to apply the <code>geom_curve()</code> function to each row of the <code>tib</code> data. Via <code>~</code> (in front of the function) and <code>..1</code>, <code>..2</code>, etc. we can then say where to stick in the values from each of <code>tib</code>’s columns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">curve_layers <span class="ot" style="color: #003B4F;">&lt;-</span> tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">pmap</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ..<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">xend =</span> ..<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">y =</span> ..<span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">yend =</span> ..<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb10-4">    <span class="at" style="color: #657422;">size =</span> ..<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb10-5">    <span class="at" style="color: #657422;">curvature =</span> ..<span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span></span>
<span id="cb10-7">  ))</span>
<span id="cb10-8">curve_layers</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
mapping: x = 0, y = 0, xend = 1, yend = 1 
geom_curve: arrow = NULL, arrow.fill = NULL, curvature = -0.3, angle = 90, ncp = 5, lineend = butt, na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity 

[[2]]
mapping: x = 1, y = 1, xend = 2, yend = 1 
geom_curve: arrow = NULL, arrow.fill = NULL, curvature = 0.6, angle = 90, ncp = 5, lineend = butt, na.rm = FALSE
stat_identity: na.rm = FALSE
position_identity </code></pre>
</div>
</div>
<p>Here, we have set the first column of <code>tib</code> (<code>x</code>) to the <code>x</code>-aesthetic within aes. Then, we proceeded similarly for all other columns. This resulted in a list of curve layers.</p>
<p>These are useless without a <code>ggplot()</code> head. So, let’s complete the plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  curve_layers </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Damn, these are some nice functionally created curves. Now, let’s put our new technique to a test. Can it handle arbitrarily many curves?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">n_curves <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb13-2">curve_layers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-4">    <span class="at" style="color: #657422;">xend =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-5">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-6">    <span class="at" style="color: #657422;">yend =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves),</span>
<span id="cb13-7">    <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>), </span>
<span id="cb13-8">    <span class="at" style="color: #657422;">curvature =</span> <span class="fu" style="color: #4758AB;">runif</span>(n_curves, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-9">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">pmap</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">geom_curve</span>(</span>
<span id="cb13-11">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> ..<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">xend =</span> ..<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">y =</span> ..<span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">yend =</span> ..<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb13-12">    <span class="at" style="color: #657422;">size =</span> ..<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb13-13">    <span class="at" style="color: #657422;">curvature =</span> ..<span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb13-14">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span></span>
<span id="cb13-15">  ))</span>
<span id="cb13-16"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> curve_layers</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Congratulations! We have successfully created drawings of a toddler. And the even better news is that we can draw as many curves as we want.</p>
<p>Surprisingly, before I started this blog post, I was not aware that you can simply add lists to <code>ggplot()</code> and it works. As you will see in the Twitter thread on top of this post, I initially thought that one had to combine the list with more functional programming like so.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">combine_gg_elements <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(...) {</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">Reduce</span>(<span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">+</span><span class="st" style="color: #20794D;">`</span>, <span class="fu" style="color: #4758AB;">list</span>(...))</span>
<span id="cb14-3">}</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;">combine_gg_elements</span>(<span class="fu" style="color: #4758AB;">ggplot</span>(), curve_layers)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="09_functional_programming_ggplot_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>This was something I picked up from Hadley Wickham’s <a href="https://ggplot2-book.org/programming.html#functional-programming">ggplot2 book</a> but it seems that we don’t need that anymore (the combine function, the book is still a great ressource). But I leave this here for completeness’ sake. Once again, writing a blog post has taught me stuff I thought I already knew. If you want to watch me learn more stuff or want to learn more ggplot things yourself, feel free to subscribe to my <a href="https://albert-rapp.de/blog.xml">RSS feed</a> or follow me on <a href="https://twitter.com/rappa753">Twitter</a>.</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <category>Functional Programming</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/09_functional_programming_ggplot/09_functional_programming_ggplot.html</guid>
  <pubDate>Thu, 24 Mar 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use Fonts and Icons in ggplot</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>For some reason, using other than the default font in plots has been a major problem for me in R. Supposedly, one can use the <code>extrafont</code> package to manage all of that but I found it too cumbersome. Instead, I found out that the <code>showtext</code> package can make my life easier.</p>
<p>Even though working with text in plot is not yet completely free of troubles, <code>showtext</code> has made many things easier. Now, I can finally choose fonts freely and even use icons. This blogposts gives you a how-to so that you can do that too.</p>
<section id="import-and-use-fonts-with-showtext" class="level2">
<h2 class="anchored" data-anchor-id="import-and-use-fonts-with-showtext">Import and Use Fonts with showtext</h2>
<p>A great source for fonts is <a href="https://fonts.google.com/">Google’s font page</a>. What is great abut this page is that it can display texts in many different fonts.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="google-fonts.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Screenshot from fonts.google.com"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/google-fonts.png" class="img-fluid figure-img" width="608"></a></p>
<p></p><figcaption class="figure-caption">Screenshot from fonts.google.com</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Once we found a nice font, we can use its name to make it available within R. This is done with <code>showtext</code>’s helpful <code>font_add_google()</code> function. Let’s import a couple of random fonts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Packages that we will use in this post</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(gghighlight)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Import fonts</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># First argument = google name, </span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;"># Secont name = font name in R</span></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Lora'</span>, <span class="st" style="color: #20794D;">'lora'</span>)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Lobster'</span>, <span class="st" style="color: #20794D;">'lobster'</span>)</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Anton'</span>, <span class="st" style="color: #20794D;">'anton'</span>)</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Fira Sans'</span>, <span class="st" style="color: #20794D;">'firasans'</span>)</span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">'Syne Mono'</span>, <span class="st" style="color: #20794D;">'syne'</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Important step to enable showtext font rendering!</span></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span></code></pre></div>
</div>
<p>Notice that we have also used <code>showtext_auto()</code>. This is necessary for <code>showtext</code> to take over the show. Otherwise, the new fonts would not be usable. Now, let’s take a look at our new fonts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">tib <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;">family =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'firasans'</span>, <span class="st" style="color: #20794D;">'lora'</span>, <span class="st" style="color: #20794D;">'lobster'</span>, <span class="st" style="color: #20794D;">'anton'</span>, <span class="st" style="color: #20794D;">'syne'</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">'Showtext shows text. Wow. What an insight.'</span></span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">label =</span> label)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="at" style="color: #657422;">family =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>family, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">13</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="08_fonts_and_icons_files/figure-html/unnamed-chunk-4-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>You may wonder why we have used <code>coord_cartesian()</code> here. We did this in order to ensure that the x-axis is not centered at 0 and our example texts won’t be outside of the plot. Personally, I find this somewhat tedious but this can’t be helped, I guess. With text elements we always run at the risk of writing outside of the plot area.</p>
<p>Next, let’s make our use of fonts somewhat more practical. In my <a href="https://albert-rapp.de/post/2022-02-19-ggplot2-color-tips-from-datawrapper/">last blog post</a>, I stressed the use of highlighting a few important things instead of using many colors. Combine this with direct labels instead of a legend and you get this plot I created using the Fira Sans font.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="08_fonts_and_icons_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Now, see what it would look like had I used the Lobster font instead.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="08_fonts_and_icons_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Feels different doesn’t it? And this is still different than the Anton font.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="08_fonts_and_icons_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="import-and-use-icon-fonts-with-showtext" class="level2">
<h2 class="anchored" data-anchor-id="import-and-use-icon-fonts-with-showtext">Import and Use Icon Fonts with showtext</h2>
<p>We can not only use regular text fonts but also icons with <code>showtext</code>. For example, we may want to use one of the free <a href="https://fontawesome.com/icons">Fontawesome icons</a>. To do so, download the <a href="https://fontawesome.com/download">newest version</a> and extract the .otf-files into your working directory. These contain the font information that you need. Importing these (and any other font for that matter) works with <code>font_add()</code> and the path to the .otf-files.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># First argument = name in R</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># Second argument = path to .otf-file</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">font_add</span>(<span class="st" style="color: #20794D;">'fa-reg'</span>, <span class="st" style="color: #20794D;">'fonts/Font Awesome 6 Free-Regular-400.otf'</span>)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">font_add</span>(<span class="st" style="color: #20794D;">'fa-brands'</span>, <span class="st" style="color: #20794D;">'fonts/Font Awesome 6 Brands-Regular-400.otf'</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">font_add</span>(<span class="st" style="color: #20794D;">'fa-solid'</span>, <span class="st" style="color: #20794D;">'fonts/Font Awesome 6 Free-Solid-900.otf'</span>)</span></code></pre></div>
</div>
<p>Now that we imported the fonts, we can use <code>ggtext</code>’s <code>geom_richtext()</code> and some HTML wizardry to add icons to our previously imported fonts from Google. But first, what we need is an icon’s unicode identifier? Uni-what?</p>
<p>The easiest way to find that is to stroll through the <a href="https://fontawesome.com/icons">Fontawesome icons online</a>. Then, find one that matches the font you want to use, e.g.&nbsp;free and solid. Finally, find it’s unicode character in the corresponding popup menu.</p>
<div class="cell" data-fig.showtext="true">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="unicode-finder.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Screenshot from fontawesome.com. Unicode highlighted in yellow."><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/unicode-finder.png" class="img-fluid figure-img" width="475"></a></p>
<p></p><figcaption class="figure-caption">Screenshot from fontawesome.com. Unicode highlighted in yellow.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Once you got this, you can add <code>&amp;#x</code> in front of the unicode and wrap <code>&lt;span&gt;</code> tags around it. Within these tags, you will have to specify <code>font-family</code> so that the icon is rendered.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tib <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;">family =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'firasans'</span>, <span class="st" style="color: #20794D;">'lora'</span>, <span class="st" style="color: #20794D;">'lobster'</span>, <span class="st" style="color: #20794D;">'anton'</span>, <span class="st" style="color: #20794D;">'syne'</span>),</span>
<span id="cb4-3">  <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">5</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Let's talk cash &lt;span style='font-family:fa-solid'&gt;&amp;#xf651;&lt;/span&gt;"</span></span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8">tib <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">label =</span> label)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(<span class="at" style="color: #657422;">family =</span> tib<span class="sc" style="color: #5E5E5E;">$</span>family, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">16</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>, <span class="at" style="color: #657422;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">1.1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="08_fonts_and_icons_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>This way, you can also use icons in scatter plots. Though, make sure to set <code>fill=NA</code> if you do not want to have white boxes around the icons.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">25</span>), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">25</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"&lt;span style='font-family:fa-solid;'&gt;&amp;#xf651;&lt;/span&gt;"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">geom_richtext</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">12</span>, <span class="at" style="color: #657422;">label.colour =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #657422;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'dodgerblue4'</span>,) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="08_fonts_and_icons_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>You will notice that using the two previous code chunks will generate a lot of warnings about “native encoding”. So far, I have always been able to ignore these without any trouble. I really don’t know why they appear. And if you know, please let me know in the comments below.</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/08_fonts_and_icons/08_fonts_and_icons.html</guid>
  <pubDate>Thu, 03 Mar 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>4 Ways to use colors in ggplot more efficiently</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>When creating a plot I frequently catch myself using way too many colors. Thus, I have to remind myself often to keep things simple. Usually, this makes a data visualization way more effective.</p>
<p>Luckily, I found a neat <a href="https://blog.datawrapper.de/10-ways-to-use-fewer-colors-in-your-data-visualizations/">datawrapper blogpost</a> by <a href="https://twitter.com/lisacmuth">Lisa Charlotte Muth</a> that shows us how to reduce the use of colors.</p>
<p>But as I was reading the blog post, I found myself wondering how some of the mentioned principles could be implemented in ggplot. Naturally, I began experimenting and created a few example plots using fewer colors. This post will show you how you can do that too.</p>
<section id="preliminaries" class="level2">
<h2 class="anchored" data-anchor-id="preliminaries">Preliminaries</h2>
<p>For completeness’ sake, let me mention the basic settings I will use for all visualizations. Honestly, if you have no idea what happens in the following code chunk, just skip it. More or less, this chunk makes sure that all plots are using <code>theme_minimal()</code> plus a small number of tweaks. These tweaks are</p>
<ul>
<li>The use of the <a href="https://fonts.google.com/specimen/Fira+Sans">Fira Sans font</a> with help from the <code>showtext</code> package.</li>
<li>The plot titles are aligned to the left, have some spacing around them and are colored using a color from the <a href="https://jfly.uni-koeln.de/color/">Okabe Ito</a> color palette. Ever since I read <a href="https://clauswilke.com/dataviz/">Fundamentals of Data Visualization by Claus Wilke</a>, I am fond of this color palette as I find the colors nice and apparently it is also color-blind safe.</li>
</ul>
<div class="cell" data-warnings="false">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(showtext)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">font_add_google</span>(<span class="st" style="color: #20794D;">"Fira Sans"</span>, <span class="st" style="color: #20794D;">"firasans"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">showtext_auto</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6">theme_customs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">16</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">plot.title.position =</span> <span class="st" style="color: #20794D;">'plot'</span>,</span>
<span id="cb1-9">  <span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(</span>
<span id="cb1-10">    <span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">'bold'</span>, </span>
<span id="cb1-11">    <span class="at" style="color: #657422;">colour =</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">8</span>)[<span class="dv" style="color: #AD0000;">6</span>],</span>
<span id="cb1-12">    <span class="at" style="color: #657422;">margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="at" style="color: #657422;">t =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">r =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">l =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"mm"</span>)</span>
<span id="cb1-13">  ),</span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span> theme_customs)</span></code></pre></div>
</div>
</section>
<section id="show-shades-not-hues" class="level2">
<h2 class="anchored" data-anchor-id="show-shades-not-hues">Show shades, not hues</h2>
<p>Alright, enough with the preliminaries. Let’s count how many different car classes are represented in the <code>mpg</code> dataset from the <code>ggplot2</code> package. I am sure you have seen the data already when you read this ggplot post. So, no further comment on this data set.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">fill =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Ugh, this is a colorful mess and sort of reminds me of the <a href="https://giphy.com/gifs/gravity-falls-i-couldnt-put-it-up-last-night---because-either-id-flip-out-and-wosNsGaxczbIA">gnome rainbow puking gif</a>. Let’s reduce the color load by sticking to only three colors. To differentiate between classes we will make some colors more transparent.</p>
<p>Thus, we need to create a new variable in our data set that lumps the classes into three groups (for the colors).</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Group classes into three groups (to reduce colors to 3)</span></span>
<span id="cb3-2">dat <span class="ot" style="color: #003B4F;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">factor</span>(year),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;">class_group =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb3-6">      class <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'2seater'</span>, <span class="st" style="color: #20794D;">'compact'</span>, <span class="st" style="color: #20794D;">'midsize'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp1"</span>,</span>
<span id="cb3-7">      class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'minivan'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp2"</span>,</span>
<span id="cb3-8">      T <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp3"</span></span>
<span id="cb3-9">    )</span>
<span id="cb3-10">  )</span></code></pre></div>
</div>
<p>Now that this is done, we can map <code>fill</code> to our new <code>class_group</code> variable and the regular <code>class</code> variable to <code>alpha</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">shades_plt <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">fill =</span> class_group, <span class="at" style="color: #657422;">alpha =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb4-5">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Year'</span>,</span>
<span id="cb4-6">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'Counts'</span>,</span>
<span id="cb4-7">    <span class="at" style="color: #657422;">alpha =</span> <span class="st" style="color: #20794D;">'Class'</span>,</span>
<span id="cb4-8">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Show shades, not hues'</span></span>
<span id="cb4-9">  )</span>
<span id="cb4-10">shades_plt </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>For better control of the visuals let us manually create and assign colors and the transparency levels.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Color-blind safe colors</span></span>
<span id="cb5-2">colors <span class="ot" style="color: #003B4F;">&lt;-</span>  thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;"># Possible levels of transparency (one for each class)</span></span>
<span id="cb5-4">alpha_max <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-5">alpha_min <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.7</span></span>
<span id="cb5-6">alpha_vals <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">seq</span>(alpha_max, alpha_min, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">4</span>), </span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">seq</span>(alpha_min, alpha_max, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">4</span>)[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb5-9">)</span>
<span id="cb5-10">alpha_vals</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.0 0.9 0.8 0.7 0.8 0.9 1.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Tweak previous plot</span></span>
<span id="cb7-2">shades_plt <span class="ot" style="color: #003B4F;">&lt;-</span> shades_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #657422;">values =</span> alpha_vals)</span>
<span id="cb7-5">shades_plt</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Next, let us consolidate the two legends into one. This can be done via <code>guides()</code>. Here, the <code>fill</code> guide will be set to <code>guide_none()</code> to get rid of the <code>class_group</code> legend.</p>
<p>Also, the <code>alpha</code> guide needs to be manually overwritten via <code>override.aes</code> in <code>guide_legend()</code> using the color codes that we saved in the vector <code>colors</code>. This way, the <code>alpha</code> legend will also depict the colors instead of only the transparency level.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">shades_plt <span class="ot" style="color: #003B4F;">&lt;-</span> shades_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;">alpha =</span> <span class="fu" style="color: #4758AB;">guide_legend</span>(</span>
<span id="cb8-5">      <span class="at" style="color: #657422;">override.aes =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">fill =</span> colors[<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>)]</span>
<span id="cb8-6">      )</span>
<span id="cb8-7">    )</span>
<span id="cb8-8">  ) </span>
<span id="cb8-9">shades_plt</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="group-categories-together-by-color-but-keep-showing-them" class="level2">
<h2 class="anchored" data-anchor-id="group-categories-together-by-color-but-keep-showing-them">Group categories together by color, but keep showing them</h2>
<p>So, this already looks better. However, adjacent colored blocks now “merge” into each other. This can make it hard to differentiate between classes.</p>
<p>To overcome this issue, add lines between blocks. Luckily, this is spectacularly easy and done by setting the <code>color</code> aesthetic in <code>geom_bar()</code> to white. Here’s the complete code.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">fill =</span> class_group, <span class="at" style="color: #657422;">alpha =</span> class)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Add lines for distinction</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #657422;">values =</span> alpha_vals) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb9-7">    <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb9-8">    <span class="at" style="color: #657422;">alpha =</span> <span class="fu" style="color: #4758AB;">guide_legend</span>(<span class="at" style="color: #657422;">override.aes =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">fill =</span> colors[<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>)]))</span>
<span id="cb9-9">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb9-11">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Year'</span>,</span>
<span id="cb9-12">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'Counts'</span>,</span>
<span id="cb9-13">    <span class="at" style="color: #657422;">alpha =</span> <span class="st" style="color: #20794D;">'Class'</span>,</span>
<span id="cb9-14">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Group categories together by color, </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">but keep showing them'</span></span>
<span id="cb9-15">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="emphasize-just-one-or-a-few-categories" class="level2">
<h2 class="anchored" data-anchor-id="emphasize-just-one-or-a-few-categories">Emphasize just one or a few categories</h2>
<p>Next, let us switch tracks and look at some other kind of data. At <a href="https://ourworldindata.org/time-with-others-lifetime">Our World in Data</a> you can find a lot of interesting data sets. One of these contains survey information on who Americans spend their time with (in average minutes per day by age). If you download this data set, you can create a plot like this.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Some data wrangling</span></span>
<span id="cb10-2">time_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"time-spent-with-relationships-by-age-us.csv"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">rename_with</span>(</span>
<span id="cb10-4">    <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Entitity'</span>, <span class="st" style="color: #20794D;">'Code'</span>, <span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'alone'</span>, <span class="st" style="color: #20794D;">'friends'</span>, <span class="st" style="color: #20794D;">'children'</span>, <span class="st" style="color: #20794D;">'parents'</span>, </span>
<span id="cb10-5">       <span class="st" style="color: #20794D;">'partner'</span>, <span class="st" style="color: #20794D;">'coworkers'</span>)</span>
<span id="cb10-6">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb10-8">    <span class="at" style="color: #657422;">cols =</span> alone<span class="sc" style="color: #5E5E5E;">:</span>coworkers, </span>
<span id="cb10-9">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'person'</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'minutes'</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-12">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;">filter</span>(age <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">80</span>) </span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;"># Color-blind safe colors</span></span>
<span id="cb10-16">colors <span class="ot" style="color: #003B4F;">&lt;-</span> thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">okabe_ito</span>(<span class="dv" style="color: #AD0000;">8</span>)[<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">6</span>]</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;"># Line plot</span></span>
<span id="cb10-19">p <span class="ot" style="color: #003B4F;">&lt;-</span> time_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-20">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> age, <span class="at" style="color: #657422;">y =</span> minutes, <span class="at" style="color: #657422;">col =</span> person)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-21">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-22">  <span class="fu" style="color: #4758AB;">scale_color_manual</span>(<span class="at" style="color: #657422;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-23">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">81</span>), <span class="at" style="color: #657422;">expand =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-24">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">minor_breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-25">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Age (in years)'</span>, <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'Minutes'</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'Time spent'</span>)</span>
<span id="cb10-26">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Once again, we created a plot with loads of color. If this were an interactive plot where we can focus on one line at a time, this would not necessarily be a problem. However, as it is, this is a rather messy spaghetti plot and extracting meaning from it is hard.</p>
<p>But if we know what story we want to tell, then we can save this plot by emphasizing only the important parts. This is where the <code>gghighlight</code> package shines. It works by adding a <code>gghighlight()</code> layer to an existing plot with conditions for filtering. All data points that do not fulfill these conditions are greyed out.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(gghighlight)</span>
<span id="cb11-2">alone_plt <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">gghighlight</span>(person <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'alone'</span>, <span class="at" style="color: #657422;">use_direct_label =</span> F) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Emphasize just one or a few categories'</span>)</span>
<span id="cb11-5">alone_plt</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Finally, we are only one text annotation away from telling a story.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">alone_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">455</span>,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">'We spend a lot of time alone...'</span>,</span>
<span id="cb12-7">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb12-8">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb12-9">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb12-11">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Of course, a data set may contain multiple stories that may also need multiple highlights. No problem. With <code>gghighlight()</code> we can combine as many conditions as we like.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">age_40_plt <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">gghighlight</span>(</span>
<span id="cb13-3">    person <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'alone'</span>, <span class="st" style="color: #20794D;">'children'</span>), </span>
<span id="cb13-4">    age <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">38</span>, </span>
<span id="cb13-5">    <span class="at" style="color: #657422;">use_direct_label =</span> F</span>
<span id="cb13-6">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #657422;">xend =</span> <span class="dv" style="color: #AD0000;">38</span>, <span class="at" style="color: #657422;">y =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="cn" style="color: #8f5902;">Inf</span>, <span class="at" style="color: #657422;">yend =</span> <span class="dv" style="color: #AD0000;">300</span>, <span class="at" style="color: #657422;">linetype =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'grey20'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Emphasize just one or a few categories'</span>) </span>
<span id="cb13-9"></span>
<span id="cb13-10">age_40_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb13-12">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb13-13">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb13-14">    <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">403</span>,</span>
<span id="cb13-15">    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">'Around the age of 40, we spend </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">less time with children and </span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">more time alone.'</span>,</span>
<span id="cb13-16">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb13-17">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb13-18">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb13-19">    <span class="at" style="color: #657422;">lineheight =</span> <span class="fl" style="color: #AD0000;">0.85</span>,</span>
<span id="cb13-20">    <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">5.5</span></span>
<span id="cb13-21">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="label-directly" class="level2">
<h2 class="anchored" data-anchor-id="label-directly">Label directly</h2>
<p>In all previous plots, we displayed a legend at the side of the plot. However, this requires quite a large amount of space which we can save by direct labeling (either with <code>annotate()</code> for a single label or <code>geom_text()</code> for multiple labels).</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">alone_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb14-3">    <span class="st" style="color: #20794D;">'text'</span>,</span>
<span id="cb14-4">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb14-5">    <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">455</span>,</span>
<span id="cb14-6">    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">'We spend a lot of time alone...'</span>,</span>
<span id="cb14-7">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-8">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb14-11">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-12">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb14-13">    <span class="st" style="color: #20794D;">'text'</span>, </span>
<span id="cb14-14">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">70</span>, </span>
<span id="cb14-15">    <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">420</span>, </span>
<span id="cb14-16">    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">'alone'</span>,</span>
<span id="cb14-17">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-18">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb14-19">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>,</span>
<span id="cb14-20">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb14-21">    <span class="at" style="color: #657422;">color =</span> colors[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb14-22">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-23">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-24">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>This way, we save a lot of space and can give the remaining part of the plot more room. Also, this saves the reader some cognitive effort because one does not have to switch back and forth between legend and actual plot.</p>
<p>In this particular case, there is another option for direct labelling. Notice how close the word ‘alone’ from the original text annotation is to the highlighted line anyway. Therefore, we may as well save us one additional annotation and colorize a single word in the orginal annotation.</p>
<p>To do so, the <code>ggtext</code> package and a bit of HTML magic will help us. Basically, what we need is to change the annotation from <code>text</code> geom to <code>richtext</code> geom and create a string that contains the HTML-code for colored text. Here that is <code>&lt;span style = 'color:#E69F00;'&gt;...&lt;/span&gt;</code>.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(ggtext)</span>
<span id="cb15-2">color_alone <span class="ot" style="color: #003B4F;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb15-3">  <span class="st" style="color: #20794D;">"We spend a lot of time &lt;span style = 'color:{colors[1]};'&gt;alone&lt;/span&gt;..."</span></span>
<span id="cb15-4">)</span>
<span id="cb15-5">color_alone</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>We spend a lot of time &lt;span style = 'color:#E69F00;'&gt;alone&lt;/span&gt;...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">alone_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb17-4">    <span class="st" style="color: #20794D;">'richtext'</span>,</span>
<span id="cb17-5">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb17-6">    <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">400</span>,</span>
<span id="cb17-7">    <span class="at" style="color: #657422;">label =</span> color_alone,</span>
<span id="cb17-8">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb17-9">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb17-10">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb17-11">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">7</span>,</span>
<span id="cb17-12">    <span class="at" style="color: #657422;">label.color =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb17-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-14">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Naturally, we can do this for our second highlighted plot as well. In this case, the colored key words are not adjacent to the actual lines.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">age_40_text <span class="ot" style="color: #003B4F;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(</span>
<span id="cb18-2">  <span class="st" style="color: #20794D;">"Around the age of 40, we spent less &lt;br&gt; time with </span></span>
<span id="cb18-3"><span class="st" style="color: #20794D;">  &lt;span style = 'color:{colors[2]};'&gt;children&lt;/span&gt; </span></span>
<span id="cb18-4"><span class="st" style="color: #20794D;">  and more &lt;br&gt; time &lt;span style = 'color:{colors[1]};'&gt;alone&lt;/span&gt;."</span></span>
<span id="cb18-5">)</span>
<span id="cb18-6"></span>
<span id="cb18-7">age_40_plt <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-9">  <span class="fu" style="color: #4758AB;">annotate</span>(</span>
<span id="cb18-10">    <span class="st" style="color: #20794D;">'richtext'</span>,</span>
<span id="cb18-11">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">15</span>,</span>
<span id="cb18-12">    <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">400</span>,</span>
<span id="cb18-13">    <span class="at" style="color: #657422;">label =</span> age_40_text,</span>
<span id="cb18-14">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb18-15">    <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb18-16">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb18-17">    <span class="at" style="color: #657422;">lineheight =</span> <span class="fl" style="color: #AD0000;">1.25</span>,</span>
<span id="cb18-18">    <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">5.5</span>,</span>
<span id="cb18-19">    <span class="at" style="color: #657422;">label.color =</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb18-20">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-21">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-15-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Consequently, the reader may have to go back and forth between text and lines again but still we used our space more efficiently. So, I will let this count as direct labeling.</p>
<p>Finally, let us come full circle and return to our initial bar plot. This one could also use some direct labels. Normally, I would simply add a <code>geom_text()</code> layer together with <code>position_stack()</code> to the initial plot as described <a href="https://albert-rapp.de/post/2021-09-11-position-adjustment/">here</a>.</p>
<p>But for some magical reason, this did not align the labels properly and it was driving me crazy. Therefore, I counted the car classes and computed the label positions manually.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">manual_counts <span class="ot" style="color: #003B4F;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">count</span>(year, class) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb19-4">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">factor</span>(year),</span>
<span id="cb19-5">    <span class="at" style="color: #657422;">class_group =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb19-6">      class <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'2seater'</span>, <span class="st" style="color: #20794D;">'compact'</span>, <span class="st" style="color: #20794D;">'midsize'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp1"</span>,</span>
<span id="cb19-7">      class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'minivan'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp2"</span>,</span>
<span id="cb19-8">      T <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"grp3"</span></span>
<span id="cb19-9">    )</span>
<span id="cb19-10">  ) </span>
<span id="cb19-11"></span>
<span id="cb19-12">labels <span class="ot" style="color: #003B4F;">&lt;-</span> manual_counts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-13">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">class =</span> <span class="fu" style="color: #4758AB;">factor</span>(class)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  </span>
<span id="cb19-14">  <span class="fu" style="color: #4758AB;">group_by</span>(year) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-15">  <span class="fu" style="color: #4758AB;">arrange</span>(year, <span class="fu" style="color: #4758AB;">desc</span>(class)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-16">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb19-17">    <span class="at" style="color: #657422;">csum =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(n), </span>
<span id="cb19-18">    <span class="at" style="color: #657422;">n =</span> (<span class="fu" style="color: #4758AB;">lag</span>(csum, <span class="at" style="color: #657422;">default =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">+</span> csum) <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb19-19">  )</span></code></pre></div>
</div>
<p>But once this small detour is overcome, we can label the plot in the same manner as before. Unfortunately, the <code>2seater</code> class is so small that the label wouldn’t fit into the box. Therefore, I decided to plot the label on top.</p>
<div class="cell" data-fig.showtext="true">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">manual_counts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> year, <span class="at" style="color: #657422;">y =</span> n, <span class="at" style="color: #657422;">fill =</span> class_group)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">alpha =</span> class), <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values =</span> colors) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #657422;">values =</span> alpha_vals) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb20-7">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">'Year'</span>,</span>
<span id="cb20-8">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">'Counts'</span>,</span>
<span id="cb20-9">    <span class="at" style="color: #657422;">alpha =</span> <span class="st" style="color: #20794D;">'Class'</span>,</span>
<span id="cb20-10">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">'Label directly'</span></span>
<span id="cb20-11">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-12">  <span class="co" style="color: #5E5E5E;"># Add all but one label</span></span>
<span id="cb20-13">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb20-14">    <span class="at" style="color: #657422;">data =</span> labels <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(class <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">'2seater'</span>),</span>
<span id="cb20-15">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">label =</span> class), </span>
<span id="cb20-16">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb20-17">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb20-18">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb20-19">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span></span>
<span id="cb20-20">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-21">  <span class="co" style="color: #5E5E5E;"># Add 2seater label</span></span>
<span id="cb20-22">  <span class="fu" style="color: #4758AB;">geom_text</span>(</span>
<span id="cb20-23">    <span class="at" style="color: #657422;">data =</span> labels <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'2seater'</span>),</span>
<span id="cb20-24">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y =</span> n <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">label =</span> class), </span>
<span id="cb20-25">    <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'black'</span>,</span>
<span id="cb20-26">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'firasans'</span>,</span>
<span id="cb20-27">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb20-28">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span></span>
<span id="cb20-29">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-30">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-17-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="closing-remarks" class="level2">
<h2 class="anchored" data-anchor-id="closing-remarks">Closing remarks</h2>
<p>The <a href="https://blog.datawrapper.de/10-ways-to-use-fewer-colors-in-your-data-visualizations">blog post that inspired this post</a> contains a few more tips like using other indicators than color and you should definitely check it out. Also, Lisa Muth apparently writes a book on colors in data visualizations and documents her thoughts <a href="https://datawrapper.notion.site/Color-Book-Updates-54905c2bd0bb4c6bae15d99e31a9d5c4">here</a>. If you look for more content on colors, this might be a fountain of information.</p>
<p>As for using patterns instead of colors, I recently wrote a <a href="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html">blog post</a> that leverages the <code>ggpattern</code> package to do just that. Check it out <a href="https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html">here</a>. And as always, if you don’t want to miss new blog post, either follow me on <a href="https://twitter.com/rappa753">Twitter</a> or via my <a href="https://albert-rapp.de/blog.xml">RSS feed</a>.</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/07_four_ways_colors_more_efficiently/07_four_ways_colors_more_efficiently.html</guid>
  <pubDate>Fri, 18 Feb 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Interactive ggplots, user feedback, and a little bit of Javascript magic with Shiny</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/08_drawing_ggplot_interactively/08_drawing_ggplot_interactively.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>I’ve been reading <a href="https://mastering-shiny.org/">Mastering Shiny by Hadley Wickham</a> lately and one of the things that intrigued me is that you can make ggplots interactive. Though I believe that there are limitation to the level of interactiveness compared to using, say, <a href="https://albert-rapp.de/post/2021-10-16-exploratory-intro-plotly/">plotly</a>, I really wanted to practice interactive ggplots with Shiny. Naturally, I build a <a href="https://rappa.shinyapps.io/interactive-ggplot/">Shiny app</a> to figure things out. Here’s a demonstration of what the app can do. The rest of this chapter teaches you how some parts of the app were implemented.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Animation.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/08_drawing_ggplot_interactively/Animation.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<section id="working-with-clicks" class="level2">
<h2 class="anchored" data-anchor-id="working-with-clicks">Working with clicks</h2>
<p>If you have build at least one Shiny app, then you are probably aware that you can include plots on the UI with <code>plotOutput()</code>. (If, in fact, you have never touched Shiny, then feel free to check out how I thought my students the <a href="https://yards.albert-rapp.de/shiny-applications.html">basics of Shiny</a>.) But what you may not know, is that apart from its <code>outputId</code>, <code>width</code> and <code>height</code> arguments, this output function also uses arguments like <code>click</code> and <code>dblclick</code>. These are the secrets to unlocking interactiveness.</p>
<p>Imagine that you have a user interface that includes a plot output via</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">'awesome_plot'</span>, <span class="at" style="color: #657422;">click =</span> <span class="st" style="color: #20794D;">'awesome_click'</span>)</span></code></pre></div>
</div>
<p>Now, what this small additional argument gives you is a way to access the coordinates of something the user clicks on. What you will have to do is to <a href="https://albert-rapp.de/post/2021-11-21-a-few-learnings-from-a-simple-shiny-app/#create-and-observe-buttons">observe <code>input$awesome_click</code></a>. Here’s a minimal example of how that works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-4"></span>
<span id="cb2-5">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">'awesome_plot'</span>, <span class="at" style="color: #657422;">click =</span> <span class="st" style="color: #20794D;">'awesome_click'</span>),</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Create dummy data as reactive value</span></span>
<span id="cb2-11">  my_dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">msg =</span> <span class="st" style="color: #20794D;">'Click me'</span>))</span>
<span id="cb2-12">  <span class="co" style="color: #5E5E5E;"># Render plot with fixed coordinate system</span></span>
<span id="cb2-13">  output<span class="sc" style="color: #5E5E5E;">$</span>awesome_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">my_dat</span>()) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;">geom_text</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">label =</span> msg), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>), <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  <span class="co" style="color: #5E5E5E;"># Update dummy data on click </span></span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;">$</span>awesome_click, {</span>
<span id="cb2-20">    <span class="fu" style="color: #4758AB;">my_dat</span>(</span>
<span id="cb2-21">      <span class="fu" style="color: #4758AB;">my_dat</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-22">        <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb2-23">          <span class="at" style="color: #657422;">x =</span> input<span class="sc" style="color: #5E5E5E;">$</span>awesome_click<span class="sc" style="color: #5E5E5E;">$</span>x,</span>
<span id="cb2-24">          <span class="at" style="color: #657422;">y =</span> input<span class="sc" style="color: #5E5E5E;">$</span>awesome_click<span class="sc" style="color: #5E5E5E;">$</span>y,</span>
<span id="cb2-25">          <span class="at" style="color: #657422;">msg =</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="st" style="color: #20794D;">'I like that. Do it again.'</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">'Stop that!'</span></span>
<span id="cb2-26">        )</span>
<span id="cb2-27">    )</span>
<span id="cb2-28">  })</span>
<span id="cb2-29">}</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="fu" style="color: #4758AB;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>This will give us the following app.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="click_animation.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/08_drawing_ggplot_interactively/click_animation.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Like a cat, this app is a master of mixed signals and wants to be touched but only a random amount of times. Unlike a cat, the app will show you a plot displaying its latest message at the most recently clicked spot.</p>
<p>All of this is powered by observing changes in <code>input$awesome_click</code> and then using this list’s new x- and y-values to update the reactive value <code>my_dat</code> that underlies the plot. Notice that I have fixed the axes of the plot because otherwise the message will always be displayed in the middle of the plot. After all, the plot will be entirely rebuilt using new underlying data. Fundamentally, this is how I build the ‘color my voronoi’ from above.</p>
<p>But, of course, I have tried out more stuff like user feedback and even some javascript magic. Stick around if you want to learn these ancient skills as well. Destiny is calling.</p>
</section>
<section id="let-your-user-know-that-he-messed-up-and-stop-him-before-its-too-late" class="level2">
<h2 class="anchored" data-anchor-id="let-your-user-know-that-he-messed-up-and-stop-him-before-its-too-late">Let your user know that he messed up and stop him before it’s too late</h2>
<p>To my surprise, UI elements like <code>numericInput()</code> do not actually check that an input is valid even though there are arguments like <code>min</code> and <code>max</code>. Of course, a user may end up giving wrong inputs that your app can’t handle. We can’t have that now, can we?</p>
<p>We will need to stop that insubordinate and churlish behavior immediately. In case you recognized that combination of ‘insubordinate’ and ‘churlish’, then I will have you now, yes, this is a reference to <a href="https://www.youtube.com/watch?v=Dd7FixvoKBw">Mr.&nbsp;Garvey</a> and the rest of this section is a homage to a skit that makes me giggle every time.</p>
<p>So, let’s build an app that works as follows:</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="name_animation.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/08_drawing_ggplot_interactively/name_animation.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>The notifications in this app are all powered through the <code>shinyFeedback</code> package. In order to activate its powers, drop a <code>shinyFeedback::useShinyFeedback()</code> in the UI like so.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb3-3"></span>
<span id="cb3-4">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-5">  shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">useShinyFeedback</span>(),</span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">h3</span>(<span class="st" style="color: #20794D;">'A Day with Mr. Garvey'</span>),</span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">textInput</span>(</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb3-9">    <span class="st" style="color: #20794D;">'What</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">s your name?'</span>,</span>
<span id="cb3-10">  )</span>
<span id="cb3-11">)</span></code></pre></div>
</div>
<p>Then, you are all set up to activate warnings and notifications by your <code>server</code> function. Here is a simplified version of the app’s remaining code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Jay Quellin'</span>,<span class="st" style="color: #20794D;">'Jacqueline'</span>, <span class="st" style="color: #20794D;">'Balakay'</span>, <span class="st" style="color: #20794D;">'Blake'</span>, <span class="st" style="color: #20794D;">'Dee-nice'</span>, <span class="st" style="color: #20794D;">'Denise'</span>,</span>
<span id="cb4-2">           <span class="st" style="color: #20794D;">'Ay-Ay-Ron'</span>, <span class="st" style="color: #20794D;">'Aaron'</span>)</span>
<span id="cb4-3">return_msg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(name) {</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb4-5">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Balakay'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'My name is Blake.'</span>,</span>
<span id="cb4-6">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Blake'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'Do you wanna go to war, Balakay? You better check yourself!'</span>,</span>
<span id="cb4-7">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Jay Quellin'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'Do you mean Jacqueline?'</span>,</span>
<span id="cb4-8">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Jacqueline'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'So that</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">s how it</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">s going to be. I got my eye on you Jay Quellin!'</span>,</span>
<span id="cb4-9">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Dee-nice'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'Do you mean Denise?'</span>,</span>
<span id="cb4-10">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Denise'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'You say your name right!'</span>,</span>
<span id="cb4-11">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Ay-Ay-Ron'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'It is pronounced Aaron.'</span>,</span>
<span id="cb4-12">    name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Aaron'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'You done messed up Ay-Ay-Ron!'</span></span>
<span id="cb4-13">  )</span>
<span id="cb4-14">}</span>
<span id="cb4-15"></span>
<span id="cb4-16">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb4-17">  name_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>name) </span>
<span id="cb4-18">  <span class="fu" style="color: #4758AB;">observeEvent</span>(<span class="fu" style="color: #4758AB;">name_input</span>(), {</span>
<span id="cb4-19">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackDanger</span>(</span>
<span id="cb4-20">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb4-21">      <span class="at" style="color: #657422;">show =</span> (<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb4-22">      <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">return_msg</span>(<span class="fu" style="color: #4758AB;">name_input</span>())</span>
<span id="cb4-23">    )</span>
<span id="cb4-24">    </span>
<span id="cb4-25">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackSuccess</span>(</span>
<span id="cb4-26">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb4-27">      <span class="at" style="color: #657422;">show =</span> <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb4-28">      <span class="at" style="color: #657422;">text =</span> <span class="st" style="color: #20794D;">'Thank you!'</span></span>
<span id="cb4-29">    )</span>
<span id="cb4-30">  })</span>
<span id="cb4-31">}</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="fu" style="color: #4758AB;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>As you can see, the feedback functions work with</p>
<ul>
<li>the <code>name</code> of an input,</li>
<li>a rule when to <code>show</code> up and</li>
<li>a <code>text</code> to display.</li>
</ul>
<p>This code is pretty straightforward but, unfortunately, this app does not work like the one you have seen above. There are a couple of problems:</p>
<ul>
<li>For starters, if you start the app, then the text input is empty, so <code>!(name_input() %in% names)</code> is true and the app will immediately display “Thank you!”</li>
<li>After you write a name on the list of defined names, then no warning will be displayed. That is because the later <code>feedbackSuccess()</code> will always command that there is nothing to display.</li>
</ul>
<p>Therefore, we need something that stops the <code>feedbackSuccess()</code> from executing when we don’t need it. This can be achieved through the little but powerful <code>req()</code> function. It checks that all given conditions are met or stops the execution where it is. In this case, you will need to drop <code>req(name_input(), !(name_input() %in% names))</code> in front of <code>feedbackSuccess()</code>.</p>
<p>Small technical detail: Notice that <code>name_input()</code> will be <code>''</code> in the beginning. Technically, this is not a boolean but that doesn’t matter to Shiny. What matters is that <code>''</code> is not “truthy”. See <code>?isTruthy</code> for more details.</p>
<p>Now, even with this small change. Our app won’t run smoothly because sometimes the notifaction will not change from “success” to “danger”. This is is because sometimes the notifaction needs to be reseted to work with new notifications. Therefore, a <code>hideFeedback()</code> is in order.</p>
<p>Also, if you are not fast at typing, then a notification might already show up, when you are still typing. It is rude to interrupt our kind user like this. Therefore, let’s make sure our app waits a little before giving out notifications. We can let out app wait for a defined amount of milliseconds by sending our reactive <code>name_input()</code> to <code>debounce()</code>. In total, our <code>server</code> function now looks like this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb5-2">  name_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">debounce</span>(<span class="dv" style="color: #AD0000;">250</span>)</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">observeEvent</span>(<span class="fu" style="color: #4758AB;">name_input</span>(), {</span>
<span id="cb5-4">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hideFeedback</span>(<span class="st" style="color: #20794D;">'name'</span>)</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackDanger</span>(</span>
<span id="cb5-7">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb5-8">      <span class="at" style="color: #657422;">show =</span> (<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb5-9">      <span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">return_msg</span>(<span class="fu" style="color: #4758AB;">name_input</span>())</span>
<span id="cb5-10">    )</span>
<span id="cb5-11">    </span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;">req</span>(<span class="fu" style="color: #4758AB;">name_input</span>(), <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names))</span>
<span id="cb5-13">    shinyFeedback<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">feedbackSuccess</span>(</span>
<span id="cb5-14">      <span class="st" style="color: #20794D;">'name'</span>,</span>
<span id="cb5-15">      <span class="at" style="color: #657422;">show =</span> <span class="sc" style="color: #5E5E5E;">!</span>(<span class="fu" style="color: #4758AB;">name_input</span>() <span class="sc" style="color: #5E5E5E;">%in%</span> names),</span>
<span id="cb5-16">      <span class="at" style="color: #657422;">text =</span> <span class="st" style="color: #20794D;">'Thank you!'</span></span>
<span id="cb5-17">    )</span>
<span id="cb5-18">  })</span>
<span id="cb5-19">}</span></code></pre></div>
</div>
<p>Finally, let me mention that, within the function <code>req()</code>, it is also possible to set <code>cancelOutput = TRUE</code>. This stops the code execution as usual but avoids destroying previously displayed outputs.</p>
</section>
<section id="sprinkle-some-javascript-magic-on-top-of-your-app" class="level2">
<h2 class="anchored" data-anchor-id="sprinkle-some-javascript-magic-on-top-of-your-app">Sprinkle some javascript magic on top of your app</h2>
<p>For my final trick before I disappear into the ether, let me show you a little bit of javascript. As I, myself, do not know much about JS, I am particularly proud that I included some of that web magic into my voronoi coloring app. <em>‘What did you do?’</em>, you ask? Well, did you notice that the colour dropdown menu in the voronoi app contains the actual colors next to the color names? That is some JS magic right there! Impressive, I know.</p>
<p>To make that work, I had to use the <code>options</code> argument of <code>selectizeInput()</code> together with the <code>render()</code> function and some actual JS code. The whole thing is adapted from <a href="https://stackoverflow.com/questions/54522970/shiny-selectizeinput-with-value-and-label-fields/54530077#54530077">this SO post</a> and looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">col2hex <span class="ot" style="color: #003B4F;">&lt;-</span> gplots<span class="sc" style="color: #5E5E5E;">::</span>col2hex</span>
<span id="cb6-2">colorValues <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">colors</span>()</span>
<span id="cb6-3">colorNames <span class="ot" style="color: #003B4F;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"{colorValues} &lt;span style='background-color:{col2hex(colorValues)}'&gt;{rep('&amp;nbsp;', 15) %&gt;% stringr::str_c(collapse = '')}&lt;/span&gt;"</span>)</span>
<span id="cb6-4">colors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setNames</span>(colorValues, colorNames)</span>
<span id="cb6-5">js_render_string <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">I</span>(<span class="st" style="color: #20794D;">"</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;">  {</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;">    item: function(item, escape) { return '&lt;div&gt;' + item.label + '&lt;/div&gt;'; },</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;">    option: function(item, escape) { return '&lt;div&gt;' + item.label + '&lt;/div&gt;'; }</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;">  }"</span>)</span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;">selectizeInput</span>(</span>
<span id="cb6-11">  <span class="st" style="color: #20794D;">"color"</span>,</span>
<span id="cb6-12">  <span class="st" style="color: #20794D;">"Colour"</span>,</span>
<span id="cb6-13">  <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">'grey80'</span>,</span>
<span id="cb6-14">  <span class="at" style="color: #657422;">choices =</span> colors,</span>
<span id="cb6-15">  <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">render =</span> js_render_string)</span>
<span id="cb6-16">)</span></code></pre></div>
</div>
<p>Let’s untangle this step by step. The first part of this code gives us a vector <code>colors</code> containing the color names like “white” and “aliceblue” as <strong>values</strong>. The same vector also uses <strong>names</strong> for the vector elements that will be displayed to the user. In principal, this <code>colors</code> vector looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'white'</span>, <span class="st" style="color: #20794D;">'aliceblue'</span>) <span class="co" style="color: #5E5E5E;"># no names</span></span>
<span id="cb7-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "white"     "aliceblue"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setNames</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'name1'</span>, <span class="st" style="color: #20794D;">'name2'</span>)) <span class="co" style="color: #5E5E5E;"># with names</span></span>
<span id="cb9-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name1       name2 
    "white" "aliceblue" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">x[<span class="st" style="color: #20794D;">'name1'</span>] <span class="co" style="color: #5E5E5E;"># named vectors can be used like dictionaries</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  name1 
"white" </code></pre>
</div>
</div>
<p>In our color example, instead of using arbitrary names, I converted the color names to their hexvalues like <code>#FFFFFF</code> and wrapped those in some HTML code that could potentially look like <code>"&lt;span style='background-color#FFFFFF'&gt;white&lt;/span&gt;"</code>. This corresponds to the word <code>white</code> with background color <code>#FFFFFF</code> (also white - unspectacular).</p>
<p>But in the actual app I wanted to have colored bars next to the color names. Thus, I have used the HTML code for white space <code>&amp;nbsp;</code> and made this into <code>"white &lt;span style='background-color#FFFFFF'&gt;&amp;nbsp;&lt;/span&gt;"</code>. Now, to make that color bar longer, I repeated whited space with <code>rep()</code> and glued those into a single string using <code>stringr::str_c()</code>. This is what the vector looks like if I only use two white space repeats.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr, <span class="at" style="color: #657422;">warn.conflicts =</span> F)</span>
<span id="cb13-2">col2hex <span class="ot" style="color: #003B4F;">&lt;-</span> gplots<span class="sc" style="color: #5E5E5E;">::</span>col2hex</span>
<span id="cb13-3">colorValues <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">colors</span>()</span>
<span id="cb13-4">colorNames <span class="ot" style="color: #003B4F;">&lt;-</span> glue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glue</span>(<span class="st" style="color: #20794D;">"{colorValues} &lt;span style='background-color:{col2hex(colorValues)}'&gt;{rep('&amp;nbsp;', 2) %&gt;% stringr::str_c(collapse = '')}&lt;/span&gt;"</span>)</span>
<span id="cb13-5">colors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setNames</span>(colorValues, colorNames)</span>
<span id="cb13-6">colors[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>white &lt;span style='background-color:#FFFFFF'&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
                                                         "white" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">colors[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>aliceblue &lt;span style='background-color:#F0F8FF'&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt; 
                                                         "aliceblue" </code></pre>
</div>
</div>
<p>In the dropdown menu of the app the user will see the names of the color vector, i.e.&nbsp;the HTML code and within the server function of our app the selection will then correspond to the actual value of the vector, i.e.&nbsp;the color name without the html stuff.</p>
<p>In our dummy example from above, the user would see <code>name1</code> and <code>name2</code> in the dropdown menu but within the server function a user’s selection would correspond to <code>input$color</code> which would evaluate to <code>white</code> or <code>aliceblue</code>.</p>
<p>Clearly, we don’t want the user to see the raw HTML code. This is where JS comes into play. The code that is stored in <code>js_render_string</code> evaluates the HTML code in order to display the actual colors instead of the raw code. Finally, to execute the JS code we need to pass it to the options of <code>selectizeInput</code> via <code>options = list(render = js_render_string)</code>.</p>
<p>There you go, this is how I created the color bars in my app using a JS snippet I found on Stackoverflow. You can find the complete codes of the apps we’ve build <a href="dummy_apps/click_app.R">here (click app)</a>, <a href="dummy_apps/name_app.R">here (notification names app)</a> and <a href="interactive-ggplot/app.R">here (voronoi coloring app)</a>. If you liked this post and want to see more Shiny posts, let me know in the comments or simply hit the applause button below. Of course, you can also always follow my work via <a href="https://twitter.com/rappa753">Twitter</a>.</p>


</section>

 ]]></description>
  <category>Shiny</category>
  <guid>https://albert-rapp.de/posts/08_drawing_ggplot_interactively/08_drawing_ggplot_interactively.html</guid>
  <pubDate>Sun, 16 Jan 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Showcasing the janitor package</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>The <code>janitor</code> package contains only a little number of functions but nevertheless it is surprisingly convenient. I never really fully appreciated its functionality until I took a look into the documentation. Of course, other packages can achieve the same thing too but <code>janitor</code> makes a lot of tasks easy. Thus, here is a little showcase. If you prefer a video version, you can find this blog post on <a href="https://youtu.be/AKPvlNWZBEQ">YouTube</a>.</p>
<section id="clean-column-names" class="level2">
<h2 class="anchored" data-anchor-id="clean-column-names">Clean column names</h2>
<p>As everyone working with data knows, data sets rarely come in a clean format. Often, the necessary cleaning process already starts with the column names. Here, take this data set from TidyTuesday, week 41.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">nurses <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-05/nurses.csv'</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">names</span>(nurses)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "State"                                          
 [2] "Year"                                           
 [3] "Total Employed RN"                              
 [4] "Employed Standard Error (%)"                    
 [5] "Hourly Wage Avg"                                
 [6] "Hourly Wage Median"                             
 [7] "Annual Salary Avg"                              
 [8] "Annual Salary Median"                           
 [9] "Wage/Salary standard error (%)"                 
[10] "Hourly 10th Percentile"                         
[11] "Hourly 25th Percentile"                         
[12] "Hourly 75th Percentile"                         
[13] "Hourly 90th Percentile"                         
[14] "Annual 10th Percentile"                         
[15] "Annual 25th Percentile"                         
[16] "Annual 75th Percentile"                         
[17] "Annual 90th Percentile"                         
[18] "Location Quotient"                              
[19] "Total Employed (National)_Aggregate"            
[20] "Total Employed (Healthcare, National)_Aggregate"
[21] "Total Employed (Healthcare, State)_Aggregate"   
[22] "Yearly Total Employed (State)_Aggregate"        </code></pre>
</div>
</div>
<p>These column names are intuitively easy to understand but not necessarily easy to process by code as there are white spaces and other special characters. Therefore, I accompany most data input by <code>clean_names()</code> from the <code>janitor</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(janitor)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr) <span class="co" style="color: #5E5E5E;"># load for pipe %&gt;%  and later wrangling</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">names</span>(nurses <span class="sc" style="color: #5E5E5E;">%&gt;%</span> clean_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "state"                                       
 [2] "year"                                        
 [3] "total_employed_rn"                           
 [4] "employed_standard_error_percent"             
 [5] "hourly_wage_avg"                             
 [6] "hourly_wage_median"                          
 [7] "annual_salary_avg"                           
 [8] "annual_salary_median"                        
 [9] "wage_salary_standard_error_percent"          
[10] "hourly_10th_percentile"                      
[11] "hourly_25th_percentile"                      
[12] "hourly_75th_percentile"                      
[13] "hourly_90th_percentile"                      
[14] "annual_10th_percentile"                      
[15] "annual_25th_percentile"                      
[16] "annual_75th_percentile"                      
[17] "annual_90th_percentile"                      
[18] "location_quotient"                           
[19] "total_employed_national_aggregate"           
[20] "total_employed_healthcare_national_aggregate"
[21] "total_employed_healthcare_state_aggregate"   
[22] "yearly_total_employed_state_aggregate"       </code></pre>
</div>
</div>
<p>Did you see what happened? White spaces were converted to <code>_</code> and parantheses were removed. Even the <code>%</code> signs were converted to <code>percent</code>. Now, these labels are easy to understand AND process by code. This does not mean that you are finished cleaning but at least now the columns are more accessible.</p>
</section>
<section id="remove-empty-and-or-constant-columns-and-rows" class="level2">
<h2 class="anchored" data-anchor-id="remove-empty-and-or-constant-columns-and-rows">Remove empty and or constant columns and rows</h2>
<p>Data sets come with empty or superfluous rows or columns are not a rare sighting. This is especially true if you work with Excel files because there will be a lot of empty cells. Take a look at the dirty Excel data set from janitor’s <a href="https://github.com/sfirke/janitor/blob/main/dirty_data.xlsx">GitHub page</a>. It looks like this when you open it with Excel.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="dirty_data.PNG" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/07_janitor_showcase/dirty_data.PNG" class="img-fluid figure-img" width="751"></a></p>
</figure>
</div>
</div>
</div>
<p>Taking a look just at this picture we may notice a couple of things.</p>
<ul>
<li><p>First, <a href="https://en.wikipedia.org/wiki/Jason_Bourne">Jason Bourne</a> is teaching at a school. I guess being a trained assassin qualifies him to teach physical education. Also - and this is just a hunch - undercover work likely earned him his “Theater” certification.</p></li>
<li><p>Second, the header above the actual table will be annoying, so we must skip the first line when we read the data set.</p></li>
<li><p>Third, the column names are not ideal but we know how to deal with that by now.</p></li>
<li><p>Fourth, there are empty rows and columns we can get rid of.</p></li>
<li><p>Fifth, there is a column that contains only ‘YES’. Therefore it contains no information at all and can be removed.</p></li>
</ul>
<p>So, let us read and clean the data. The <code>janitor</code> package will help us with <code>remove_empty()</code> and <code>remove_constant()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">xl_file <span class="ot" style="color: #003B4F;">&lt;-</span> readxl<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_excel</span>(<span class="st" style="color: #20794D;">'dirty_data.xlsx'</span>, <span class="at" style="color: #657422;">skip =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">remove_empty</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">remove_constant</span>()</span>
<span id="cb5-5">xl_file</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 9
   first_name   last_n…¹ emplo…² subject hire_…³ perce…⁴ full_…⁵ certi…⁶ certi…⁷
   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 Jason        Bourne   Teacher PE        39690    0.75 Yes     Physic… Theater
 2 Jason        Bourne   Teacher Drafti…   43479    0.25 Yes     Physic… Theater
 3 Alicia       Keys     Teacher Music     37118    1    Yes     Instr.… Vocal …
 4 Ada          Lovelace Teacher &lt;NA&gt;      38572    1    Yes     PENDING Comput…
 5 Desus        Nice     Admini… Dean      42791    1    Yes     PENDING &lt;NA&gt;   
 6 Chien-Shiung Wu       Teacher Physics   11037    0.5  Yes     Scienc… Physics
 7 Chien-Shiung Wu       Teacher Chemis…   11037    0.5  Yes     Scienc… Physics
 8 James        Joyce    Teacher English   36423    0.5  No      &lt;NA&gt;    Englis…
 9 Hedy         Lamarr   Teacher Science   27919    0.5  No      PENDING &lt;NA&gt;   
10 Carlos       Boozer   Coach   Basket…   42221   NA    No      Physic… &lt;NA&gt;   
11 Young        Boozer   Coach   &lt;NA&gt;      34700   NA    No      &lt;NA&gt;    Politi…
12 Micheal      Larsen   Teacher English   40071    0.8  No      Vocal … English
# … with abbreviated variable names ¹​last_name, ²​employee_status, ³​hire_date,
#   ⁴​percent_allocated, ⁵​full_time, ⁶​certification_9, ⁷​certification_10</code></pre>
</div>
</div>
<p>Here, <code>remove_empty()</code> defaulted to remove, both, rows and colums. If we wish, we can change that by setting e.g.&nbsp;<code>which = 'rows'</code>.</p>
<p>Now, we may also want to see the <code>hire_data</code> in a sensible format. For example, in this dirty data set, Jason Bourne was hired on <code>39690</code>. Luckily, our <code>janitor</code> can make sense of it all.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">xl_file <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">hire_date =</span> <span class="fu" style="color: #4758AB;">excel_numeric_to_date</span>(hire_date))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 9
   first_name last_…¹ emplo…² subject hire_date  perce…³ full_…⁴ certi…⁵ certi…⁶
   &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;date&gt;       &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 Jason      Bourne  Teacher PE      2008-08-30    0.75 Yes     Physic… Theater
 2 Jason      Bourne  Teacher Drafti… 2019-01-14    0.25 Yes     Physic… Theater
 3 Alicia     Keys    Teacher Music   2001-08-15    1    Yes     Instr.… Vocal …
 4 Ada        Lovela… Teacher &lt;NA&gt;    2005-08-08    1    Yes     PENDING Comput…
 5 Desus      Nice    Admini… Dean    2017-02-25    1    Yes     PENDING &lt;NA&gt;   
 6 Chien-Shi… Wu      Teacher Physics 1930-03-20    0.5  Yes     Scienc… Physics
 7 Chien-Shi… Wu      Teacher Chemis… 1930-03-20    0.5  Yes     Scienc… Physics
 8 James      Joyce   Teacher English 1999-09-20    0.5  No      &lt;NA&gt;    Englis…
 9 Hedy       Lamarr  Teacher Science 1976-06-08    0.5  No      PENDING &lt;NA&gt;   
10 Carlos     Boozer  Coach   Basket… 2015-08-05   NA    No      Physic… &lt;NA&gt;   
11 Young      Boozer  Coach   &lt;NA&gt;    1995-01-01   NA    No      &lt;NA&gt;    Politi…
12 Micheal    Larsen  Teacher English 2009-09-15    0.8  No      Vocal … English
# … with abbreviated variable names ¹​last_name, ²​employee_status,
#   ³​percent_allocated, ⁴​full_time, ⁵​certification_9, ⁶​certification_10</code></pre>
</div>
</div>
</section>
<section id="rounding" class="level2">
<h2 class="anchored" data-anchor-id="rounding">Rounding</h2>
<p>To my <del>surprise</del> shock, R uses some unexpected rounding rule. In my world, whenever a number ends in <code>.5</code>, standard rounding would round up. Apparently, R uses something called <em>banker’s rounding</em> that in these cases rounds towards the next <em>even</em> number. Take a look.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">4.5</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 2 2 4 4</code></pre>
</div>
</div>
<p>I would expect that the rounded vector contains the integers from one to five. Thankfully, <code>janitor</code> offers a convenient rounding function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">round_half_up</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">4.5</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>Ok, so that gives us a new function for rounding towards integers. But what is really convenient is that <code>janitor</code> can <code>round_to_fraction</code>s.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">round_to_fraction</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">0.13</span>), <span class="at" style="color: #657422;">denominator =</span> <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0.50 0.75 0.75 1.00 1.00 1.25 1.25 1.50 1.50 1.75 1.75 2.00</code></pre>
</div>
</div>
<p>Here, I rounded the numbers to the next quarters (<code>denominator = 4</code>) but of course any fraction is possible. You can now live the dream of rounding towards arbitrary fractions.</p>
</section>
<section id="find-matches-in-multiple-characteristics" class="level2">
<h2 class="anchored" data-anchor-id="find-matches-in-multiple-characteristics">Find matches in multiple characteristics</h2>
<p>In my opinion, the <code>get_dupes()</code> function is really powerful. It allows us to find “similar” observations in a data set based on certain characteristics. For example, the <code>starwars</code> data set from <code>dplyr</code> contains a lot of information on characters from the Star Wars movies. Possibly, we want to find out which characters are similar w.r.t. to certain traits.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">starwars <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">get_dupes</span>(eye_color, hair_color, skin_color, sex, homeworld) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 8
  eye_color hair_color skin_color sex    homeworld dupe_count name        height
  &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;        &lt;int&gt;
1 blue      black      yellow     female Mirial             2 Luminara U…    170
2 blue      black      yellow     female Mirial             2 Barriss Of…    166
3 blue      blond      fair       male   Tatooine           2 Luke Skywa…    172
4 blue      blond      fair       male   Tatooine           2 Anakin Sky…    188
5 brown     brown      light      female Naboo              3 Cordé          157
6 brown     brown      light      female Naboo              3 Dormé          165
7 brown     brown      light      female Naboo              3 Padmé Amid…    165</code></pre>
</div>
</div>
<p>So, Luke and Anakin Skywalker are similar to one another. Who would have thought that. Sadly, I don’t enough about Star Wars to know whether the other matches are similarly “surprising”. In any case, the point here is that we can easily find matches according to arbitrarily many characteristics. Conveniently, these characteristics are the first columns of the new output and we get a <code>dupe_count</code>.</p>
<p>Alright, this concludes our little showcase. In the <code>janitor</code> package, there is another set of <code>tabyl()</code> functions. These are meant to improve base R’s <code>table()</code> functions. Since I rarely use that function I did not include it but if you use <code>table()</code> frequently, then you should definitely <a href="http://sfirke.github.io/janitor/articles/tabyls.html">check out tabyl()</a>.</p>


</section>

 ]]></description>
  <guid>https://albert-rapp.de/posts/07_janitor_showcase/07_janitor_showcase.html</guid>
  <pubDate>Tue, 11 Jan 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot-tips: Learning by Thieving</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/06_learning_by_thieving/06_learning_by_thieving.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p><a href="https://github.com/rfordatascience/tidytuesday">TidyTuesday</a>, the weekly social data project that brings together R users, is a great way to connect to the R community and learn to wrangle and visualize data. But more importantly, it is a superb chance to learn new data visualization skills by <del>doing</del> thieving. Let me elaborate.</p>
<p>Each week, you get a chance to work with a new data set and create a (hopefully) nice visualization<sup>1</sup>. Afterwards, you can share visualizations with the world on twitter using <a href="https://twitter.com/search?q=%23tidytuesday&amp;src=typed_query">#tidyTuesday</a>. Of course, being the curious person that you are, you check out contributions from other fellow R users. And more often than not, you will see really cool visualizations and wish that you could do something like that too. And you can!</p>
<p>Usually, people share their code together with their viz.&nbsp;Consequently, you are only one ctrl-C away from stepping up your dataviz game. Do I mean that you should take the entire code and brand that as your own work? Of course not! But you can maybe ctrl-C aspects of the code and reuse it for something you have been wanting to do for a long time. Let’s make this specific. Last week, I found this gem by <a href="https://twitter.com/geokaramanis">Georgios Karamanis</a>.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Transphobic hate crimes in Sweden for this week's Bring Your Own Data <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a>.<br><br>The inspiration was a plot made by <a href="https://twitter.com/thomasoide?ref_src=twsrc%5Etfw"><span class="citation" data-cites="thomasoide">@thomasoide</span></a> for this Axios article: <a href="https://t.co/zMrnr9tszG">https://t.co/zMrnr9tszG</a><br><br>Source: <a href="https://twitter.com/myndigheten_bra?ref_src=twsrc%5Etfw"><span class="citation" data-cites="myndigheten_bra">@myndigheten_bra</span></a><br><br>code: <a href="https://t.co/HSCew2zrUg">https://t.co/HSCew2zrUg</a><br><br> <a href="https://twitter.com/hashtag/Rstats?src=hash&amp;ref_src=twsrc%5Etfw">#Rstats</a> <a href="https://twitter.com/hashtag/dataviz?src=hash&amp;ref_src=twsrc%5Etfw">#dataviz</a> <a href="https://t.co/IVQ1wTBZmt">pic.twitter.com/IVQ1wTBZmt</a>
</p>
— Georgios Karamanis (<span class="citation" data-cites="geokaramanis">@geokaramanis</span>) <a href="https://twitter.com/geokaramanis/status/1478744093765296130?ref_src=twsrc%5Etfw">January 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>What intrigued me were the bars with criss-cross lines. Now, clearly I want to be able to do that too. Luckily, the tweet also contains a link to the corresponding GitHub <a href="https://github.com/gkaramanis/tidytuesday/tree/master/2022/2022-week_01">repository</a>. Et voilà, a quick glance at the code reveals the use of a so-called <code>ggpattern</code> package and a quick ctrl-C of the package name combined with a internet search leads me to the package’s <a href="https://coolbutuseless.github.io/package/ggpattern/">documentation</a>.</p>
<p>There, I find out that it is quite easy to get bars with different patterns<sup>2</sup> using <code>geom_col_pattern()</code>. For example, these code snippets are taken straight from the documentation (more ctrl-Cs). For more, check out the documentation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggpattern)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb1-4"></span>
<span id="cb1-5">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">level =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>, <span class="st" style="color: #20794D;">'d'</span>), <span class="at" style="color: #657422;">outcome =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">2.3</span>, <span class="fl" style="color: #AD0000;">1.9</span>, <span class="fl" style="color: #AD0000;">3.2</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb1-6"></span>
<span id="cb1-7">stripes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(df) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">geom_col_pattern</span>(</span>
<span id="cb1-9">    <span class="fu" style="color: #4758AB;">aes</span>(level, outcome, <span class="at" style="color: #657422;">pattern_fill =</span> level), </span>
<span id="cb1-10">    <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">'stripe'</span>,</span>
<span id="cb1-11">    <span class="at" style="color: #657422;">fill    =</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb1-12">    <span class="at" style="color: #657422;">colour  =</span> <span class="st" style="color: #20794D;">'black'</span></span>
<span id="cb1-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;">theme_bw</span>(<span class="dv" style="color: #AD0000;">18</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) </span>
<span id="cb1-16"></span>
<span id="cb1-17">kittens <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(df) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;">geom_col_pattern</span>(</span>
<span id="cb1-19">    <span class="fu" style="color: #4758AB;">aes</span>(level, outcome, <span class="at" style="color: #657422;">fill =</span> level), </span>
<span id="cb1-20">    <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">'placeholder'</span>,</span>
<span id="cb1-21">    <span class="at" style="color: #657422;">pattern_type =</span> <span class="st" style="color: #20794D;">'kitten'</span>,</span>
<span id="cb1-22">    <span class="at" style="color: #657422;">pattern_size =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb1-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">theme_bw</span>(<span class="dv" style="color: #AD0000;">18</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>) </span>
<span id="cb1-26"></span>
<span id="cb1-27">stripes <span class="sc" style="color: #5E5E5E;">+</span> kittens</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="06_learning_by_thieving_files/figure-html/unnamed-chunk-2-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/06_learning_by_thieving/06_learning_by_thieving_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>There you go. So, now I “can do” bars with different patterns. <em>“Hold on, it is not like you are totally an expert now. How does any of that help?”</em>, you might think. And, clearly you are right. Having emulated something I saw online, does not make me exactly into an visual artist but now I am equipped with one more tool to try out come next TidyTuesday.</p>
<p>Repeat that often enough and soon you have acquired a lot of tools to use in diverse settings. Eventually, the lines between <em>“I copied what I found online”</em> and <em>“This is a trick I like to do frequently”</em> blur. In the end, repeated practice and learning from others is what makes you into an expert. And sometimes that “learning from others” part is as simple as strolling through GitHub repositories on the lookout for your next great coup.</p>




<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Honestly, it does not really matter if your visualization is looking “nice”. I have ended up sharing a bunch of, say, average at best visualizations. (<a href="https://twitter.com/rappa753/status/1425709562636742658">Exhibit A</a>, <a href="https://twitter.com/rappa753/status/1447855544644120576">Exhibit B</a>). The point is too keep showing up and trying. In fact, even the visualizations I am not totally proud of contain elements which I have spent a lot of time working on. This practice has often ended up helping me in unexpected situations.↩︎</p></li>
<li id="fn2"><p>I know, I know. The tweet was using <code>geom_rect_pattern()</code>. Not exactly the same but the principles are.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Visualization</category>
  <category>Opinion</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/06_learning_by_thieving/06_learning_by_thieving.html</guid>
  <pubDate>Sun, 09 Jan 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>A couple of visualizations from ggforce</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>It is almost the beginning of a new year and I have decided to finish off this year with a quick blog post. Also, friends were shaming me that I have been slacking off on this blog lately. Therefore, let’s get started right away. We’ll keep things simple and look at a few cool plots from the <code>ggforce</code> package. Of course, we have already glimpsed at this package in the <a href="https://albert-rapp.deposts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html">previous installment</a> of this <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a>.</p>
<section id="mark-point-plots" class="level2">
<h2 class="anchored" data-anchor-id="mark-point-plots">Mark Point Plots</h2>
<p>Let us first take a look at the <code>penguins</code> data set from the <code>palmerpenguins</code> package. Same as last time, this will be the dummy data set we use for plots but of course any other data set would be fine too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_light</span>())</span>
<span id="cb1-4">dat <span class="ot" style="color: #003B4F;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(sex))</span>
<span id="cb1-6">p <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, flipper_length_mm, <span class="at" style="color: #657422;">col =</span> species)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">geom_point</span>()</span>
<span id="cb1-9">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-2-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Visually, we can see that the points are strongly grouped by species which makes sense as these kind of measurements often define a species. With help from <code>ggforce</code> we can visually emphasize this grouping by drawing rectangles or ellipses around the groups.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(ggforce)</span>
<span id="cb2-2">rect_plot <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_mark_rect</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-4">ellipse_plot <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">geom_mark_ellipse</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> species), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.25</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(patchwork) <span class="co" style="color: #5E5E5E;"># see last ggplot2-tips post</span></span>
<span id="cb2-8">rect_plot <span class="sc" style="color: #5E5E5E;">/</span> ellipse_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>There is also a <code>geom_mark_hull()</code> function that requires the <code>concaveman</code> package to be installed. Using this function, we can draw a hull around the points.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">geom_mark_hull</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">concavity =</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-4-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Beware though that this hull is “redrawn at draw time”, so your hull may look different when you zoom into the plot. Also, let me point out that <code>geom_mark_hull()</code> has an argument <code>concavity</code> that allows you to make the hull “more wiggly”.</p>
</section>
<section id="alluvial-plots" class="level2">
<h2 class="anchored" data-anchor-id="alluvial-plots">Alluvial Plots</h2>
<p>With <code>ggforce</code> you can easily draw so-called alluvial plots. Originally, these are used to visualize a “stream over time” as for instance shown on <a href="https://en.wikipedia.org/wiki/Alluvial_diagram#/media/File:NeuroAlluvial2001-2007-691x273.png">Wikipedia</a>. But the same visualization can be used to visualize “composition of groups” like so.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>From this plot, it is clear that unsurprisingly most of high weight penguins are male. What is maybe more surprising is that all Chinstrap penguins live on Dream. Obviously, the first layer in this alluvial plot is sort of redundant as the color already codes the sex but for accessibility it is often encouraged to use some form of double encoding (e.g.&nbsp;different shape AND color for groups). Thus, I find it practical and somewhat convenient to add this first layer.</p>
<p>Creating this plot requires a couple of steps but <code>ggforce</code> has useful functions that make our life easier. More precisely we will need to</p>
<ul>
<li>count occurences in each subgroup and convert this in a suitable format for later plotting. <code>gather_set_data()</code> will help us doing that.</li>
<li>draw lines between subgroups with <code>geom_parallel_sets()</code></li>
<li>draw boxes to identify subgroups with <code>geom_parallel_sets_axes()</code></li>
<li>label the boxes with <code>geom_parallel_sets_labels</code></li>
</ul>
<p>The first step is processed as follows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">reshaped_dat <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-3">    <span class="at" style="color: #657422;">mass_group =</span> <span class="fu" style="color: #4758AB;">factor</span>(</span>
<span id="cb4-4">      <span class="fu" style="color: #4758AB;">cut_number</span>(body_mass_g, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb4-5">      <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"high"</span>, <span class="st" style="color: #20794D;">"medium"</span>, <span class="st" style="color: #20794D;">"low"</span>)</span>
<span id="cb4-6">    )</span>
<span id="cb4-7">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">count</span>(species, island, sex, mass_group) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">gather_set_data</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</div>
<p>This simply counts the occurences in each subgroup and then adds three columns <code>x</code>, <code>y</code> and <code>id</code> based on the subgroup labels. These three new columns are necessary for generating the plot which is done as follows</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">reshaped_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;">x =</span> x, </span>
<span id="cb5-4">    <span class="at" style="color: #657422;">split =</span> y, </span>
<span id="cb5-5">    <span class="at" style="color: #657422;">id =</span> id, </span>
<span id="cb5-6">    <span class="at" style="color: #657422;">value =</span> n</span>
<span id="cb5-7">  )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">geom_parallel_sets</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> sex), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_axes</span>(<span class="at" style="color: #657422;">axis.width =</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_labels</span>(<span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Here, value is the counts of the subgroups. Also, notice that the splits on the x-axis is not in the same order as in my original plot. The order can be easily changed by converting <code>x</code> to a factor whose levels have the desired ordering. The complete code is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">reshaped_dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">factor</span>(x, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"sex"</span>, <span class="st" style="color: #20794D;">"species"</span>, <span class="st" style="color: #20794D;">"island"</span>, <span class="st" style="color: #20794D;">"mass_group"</span>)), </span>
<span id="cb6-4">    <span class="at" style="color: #657422;">split =</span> y, </span>
<span id="cb6-5">    <span class="at" style="color: #657422;">id =</span> id, </span>
<span id="cb6-6">    <span class="at" style="color: #657422;">value =</span> n</span>
<span id="cb6-7">  )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">geom_parallel_sets</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> sex), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_axes</span>(<span class="at" style="color: #657422;">axis.width =</span> <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;">geom_parallel_sets_labels</span>(<span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">'white'</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-11">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-12">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">breaks =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-13">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">12</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">'Set1'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="voronoi-diagrams" class="level2">
<h2 class="anchored" data-anchor-id="voronoi-diagrams">Voronoi Diagrams</h2>
<p>Next, let us explore Voronoi diagrams. These are constructed from a set of “center points” which are used to form polygons such that these fill the whole plane and each polygons consists of the points that are closest to a polygon’s center point. If you found this somewhat confusing, then you are in luck because Wikipedia has a super neat <a href="https://de.wikipedia.org/wiki/Voronoi-Diagramm#/media/Datei:Voronoi_growth_euclidean.gif">animation</a> that illustrates this concept.</p>
<p>Using bill and flipper lengths to define the center points’ x- and y-coordinates, we can create a Voronoi diagram via <code>geom_voronoi_tile()</code> and <code>geom_voronoi_segment()</code> as follows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, flipper_length_mm, <span class="at" style="color: #657422;">group =</span> <span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> species)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">geom_voronoi_segment</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"Set1"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Here, the lines between polygons are shown due to <code>geom_voronoi_segment()</code> and if we wish to get rid of the lines we can simply remove this layer. Also, let us ignore possible applications of Voronoi diagrams<sup>1</sup> for a bit. What I really wanted to demonstrate is a small bit of Rtistry I found on <a href="https://twitter.com/kc_analytics/status/1416149064555667460?s=20">Twitter</a> and found really cool.</p>
<p>With a couple of random numbers and a bit of coloring one can create some visually appealing graphics (at least I like to think so). First, let’s take a look at only a few random numbers</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23479</span>)</span>
<span id="cb8-2">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">25</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(N), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(N)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(<span class="at" style="color: #657422;">option =</span> <span class="st" style="color: #20794D;">'A'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Not so super impressive but using many random numbers a “smoother” picture will be created.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23479</span>)</span>
<span id="cb9-2">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(N), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">runif</span>(N)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(<span class="at" style="color: #657422;">option =</span> <span class="st" style="color: #20794D;">'A'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Of course, arranging the center points differently and using other colors leads to very different pictures.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">23479</span>)</span>
<span id="cb10-2">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">runif</span>(N, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">abs</span>(x) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">runif</span>(N))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">geom_voronoi_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">scale_fill_viridis_c</span>(<span class="at" style="color: #657422;">option =</span> <span class="st" style="color: #20794D;">'E'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'none'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sina-plots" class="level2">
<h2 class="anchored" data-anchor-id="sina-plots">Sina Plots</h2>
<p>Coming back to less artistic plots, consider the following violin plots from the <code>ggplot2</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> species, <span class="at" style="color: #657422;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">geom_violin</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Compared with common boxplots, these kind of plots show the distribution of the data more explicitly with density estimates (rotated by 90 degrees and mirrored for symmetry). This gets rid of the intrinsic problem of boxplots, i.e.&nbsp;only showing quantiles. Sometimes though, we want to see the quantiles as well. In these instances, an additional boxplot is plotted within the violin plots like so.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> species, <span class="at" style="color: #657422;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">geom_violin</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="at" style="color: #657422;">width =</span> <span class="fl" style="color: #AD0000;">0.25</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>However, even with both of these plots combined we still don’t know how many points are in this data set. To make that information available in the visualizations, so-called sina plots fill the area of violin plots with jittered data points instead of depicting the estimated density directly.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> species, <span class="at" style="color: #657422;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">geom_sina</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-15-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>If a data set is large, then the points will display the same contour as the violin plot. In any case, the violin plot can be plotted beneath the points as well for better visibility.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> species, <span class="at" style="color: #657422;">y =</span> body_mass_g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_violin</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">geom_sina</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="05_ggforce_examples_files/figure-html/unnamed-chunk-16-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>This way, we can see both the distribution AND the number of data points in a single plot. Of course, there are more ways to display the distribution of data and <code>ggdist</code> is just the right package to do that job. I will show you that particular package in the next installment of the <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a>.</p>
<p>And that concludes our small demonstration of a few <code>ggforce</code> functions. For more functions check out <a href="https://ggforce.data-imaginist.com/"><code>ggforce</code>’s website</a>. For sure, there is more cool stuff like Bezier curves and facet zooms to explore.</p>
<p>Finally, here is an overview of all the cool visuals we have created. Let me know what you think in the comments or simply hit the applause button below if you liked the content.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="collected_plots.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/collected_plots.png" class="img-fluid figure-img" width="1772"></a></p>
</figure>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <a href="https://en.wikipedia.org/wiki/Voronoi_diagram#Applications">Wikipedia</a> if you’re interested in a list of applications.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/05_ggforce_examples/05_ggforce_examples.html</guid>
  <pubDate>Thu, 30 Dec 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>6 simple Shiny things I have learned from creating a somewhat small app</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/06_shiny_app_learnings/06_shiny_app_learnings.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>A couple of weeks back, I wanted to explain to my student what I mean when I talk about the “variance of the sample variance”. In my head, this term sounds quite confusing and contains the word “variance” at least one too many times. But as I was not sure whether my subsequent explanation really came through, I decided to let my students explore the notion on their own through <a href="https://rappa.shinyapps.io/estimator-variance/">a Shiny app</a>.</p>
<p>Honestly, I thought this would be quite simple to code because I have already learned the basics of Shiny when I wanted to show my students what exciting web developmental things R can do. Back then, I summarized the basics in one chapter of <a href="https://yards.albert-rapp.de/shiny-applications.html">my YARDS lecture notes</a>.</p>
<p>However, even though the idea of my app was simple, I soon came to realize that I would need to learn a couple more Shiny-related things to get the job done. And, as is usual with coding, I did this mostly by strolling through the web in order to find code solutions for my particular problems. Most of the time, I consulted Hadley Wickham’s <a href="https://mastering-shiny.org/">Mastering Shiny</a> but still I ended up searching for a lot of random other stuff on the web.</p>
<p>Consequently, I decided that it might be nice to collect what I have learned in one place. So, here is a compilation of loosely connected troubles I solved during my Shiny learning process. May this summary serve someone well.</p>
<section id="use-a-theme-for-simple-customization" class="level2">
<h2 class="anchored" data-anchor-id="use-a-theme-for-simple-customization">Use a theme for simple customization</h2>
<p>Let’s start with something super easy. If you wish to customize the appearance of you app, you can set the <code>theme</code> argument of <code>fluidPage()</code> to either a CSS-file that contains the necessary configuration (this is the hard way) or use a theme from <code>bslib::bs_theme()</code>. The latter approach comes with a lot of named preimplemented themes and is easily implemented by <code>bootswatch = "name"</code>. In my app, I have simply added <code>theme = bslib::bs_theme(bootswatch = "superhero")</code>. For other themes, have a look at <a href="https://rstudio.github.io/shinythemes/">RStudio’s Shiny themes page</a>.</p>
<p>Check out this super simple example that I have adapted from the default “new Shiny app” output (you will actually have to copy and run this in an R script on your own).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"></span>
<span id="cb1-4">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;"># Theme added here</span></span>
<span id="cb1-6">  <span class="at" style="color: #657422;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">bs_theme</span>(<span class="at" style="color: #657422;">bootswatch =</span> <span class="st" style="color: #20794D;">"superhero"</span>),</span>
<span id="cb1-7">  </span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"Old Faithful Geyser Data"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">sliderInput</span>(<span class="st" style="color: #20794D;">"bins"</span>,</span>
<span id="cb1-12">                  <span class="st" style="color: #20794D;">"Number of bins:"</span>,</span>
<span id="cb1-13">                  <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-14">                  <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-15">                  <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb1-16">    ),</span>
<span id="cb1-17">    </span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-19">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"distPlot"</span>)</span>
<span id="cb1-20">    )</span>
<span id="cb1-21">  )</span>
<span id="cb1-22">)</span>
<span id="cb1-23"></span>
<span id="cb1-24">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb1-25">  output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb1-26">    x    <span class="ot" style="color: #003B4F;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb1-27">    bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> input<span class="sc" style="color: #5E5E5E;">$</span>bins <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-28">    <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #657422;">breaks =</span> bins, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #657422;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb1-29">  })</span>
<span id="cb1-30">}</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>During the course of this text, we will extend this small example bit by bit. But, I want to avoid copy-and-pasting code each time we change something. Thus, for the remaining examples I will only describe the changes to the previous version instead of pasting the whole code. Nevertheless, I will provide links after each example so that each script can be downloaded at will. The current example can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/01_add_theme.R">here</a>.</p>
</section>
<section id="isolate-slider-from-reactivity" class="level2">
<h2 class="anchored" data-anchor-id="isolate-slider-from-reactivity">Isolate slider from reactivity</h2>
<p>As is currently intended, our app’s histogram changes whenever the slider is moved. Sometimes, though, this is not what we wish to do. Instead, we may want to delay the rendering of the plot until a button is clicked.</p>
<p>This can be achieved through a simple <code>isolate()</code> command which, well, isolates whatever is in between the function’s parentheses from changes on the UI. Here, let us put <code>input$bins</code> into the <code>isolate()</code> function and check what happens when we move the slider (full code <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/02_add_isolate.R">here</a>), i.e.&nbsp;we changed</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>Excellent! Nothing happens when we move the slider. Dumb and useless but excellent anyway.</p>
<p>Observe that we could have also put the whole <code>renderPlot()</code> function call into <code>isolate()</code>. This app would work in the sense that we created valid code but then the reactivity of the slider is still active. The <code>isolate()</code> documentation hints at this with “…if you assign a variable inside the isolate(), its value will be visible outside of the <code>isolate()</code>”.</p>
</section>
<section id="create-and-observe-buttons" class="level2">
<h2 class="anchored" data-anchor-id="create-and-observe-buttons">Create and observe Buttons</h2>
<p>Let us bring back some reactivity to our app by adding a button that reevaluates our histogram when clicked. First, we will add a button to the UI. Second, we will implement what needs to happen on the server side of things when the button is clicked.</p>
<p>The first step is pretty simple. All we have to do is add <code>actionButton()</code> to the UI. Same as <code>sliderInput()</code> we have to specify a <code>inputId</code> and <code>label</code> for the button. Here, we could add</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"draw_button"</span>, <span class="st" style="color: #20794D;">"Reevaluate!"</span>, <span class="at" style="color: #657422;">width =</span> <span class="st" style="color: #20794D;">"100%"</span>)</span></code></pre></div>
</div>
<p>Then, on the server side we will have to catch each click on the button. Once a click is registered, the plot is supposed to be rendered again. We do this with <code>observeEvent()</code> which expects an event expression and a handler expression. In our case, the former is simply the id of our button, i.e.&nbsp;<code>input$draw_button</code>, and the latter is what code is to be executed when the event is observed. Therefore, we move our code for rendering the plot into this part of <code>observeEvent()</code>. Thus, in our server function we now have</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb4-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb4-3">    output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-4">      x    <span class="ot" style="color: #003B4F;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb4-5">      bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-6">      <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #657422;">breaks =</span> bins, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #657422;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb4-7">    })</span>
<span id="cb4-8">  }</span>
<span id="cb4-9">)</span></code></pre></div>
</div>
<p>Notice that we have wrapped our code into <code>{}</code>. Strictly speaking, this is not necessary because we only “do one thing” but, of course, we can easily imagine that we want to tie multiple calculations to a button click. In this case, we will need to wrap all commands into <code>{}</code>. In any case, our code now does what we expect it to do and on each click a new histogram is rendered using the current value of the slider input. This new app’s complete code can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/03_add_button.R">here</a>.</p>
</section>
<section id="use-eventreactive-as-an-alternative-for-updating-values" class="level2">
<h2 class="anchored" data-anchor-id="use-eventreactive-as-an-alternative-for-updating-values">Use eventReactive() as an alternative for updating values</h2>
<p>Honestly, this part I learned just 5 minutes ago while I was writing the last section of this blog post. When I looked into the documentation of <code>observeEvent()</code>, I noticed that there is also a function <code>eventReactive()</code> which may be better suited for our current use case as it allows us to avoid manually isolating <code>input$bins</code>.</p>
<p>This new function works similar to <code>observeEvent()</code> but it creates a reactive variable instead. This, we can use for rendering. Check this out</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(</span>
<span id="cb5-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb5-3">    x    <span class="ot" style="color: #003B4F;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb5-4">    bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> input<span class="sc" style="color: #5E5E5E;">$</span>bins <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #657422;">breaks =</span> bins, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #657422;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb5-6">  }</span>
<span id="cb5-7">)</span>
<span id="cb5-8"></span>
<span id="cb5-9">output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({<span class="fu" style="color: #4758AB;">plot</span>()})</span></code></pre></div>
</div>
<p>Notice how we do not use <code>isolate()</code> anymore and use the <code>plot</code> variable like a reactive in <code>renderPlot()</code>, i.e.&nbsp;we have to “call” its value with <code>()</code>.</p>
<p>However, be aware that <code>eventReactive()</code> creates a reactive variable such that you cannot change, say, multiple plots at once. Nevertheless, <code>eventReactive()</code> can be a great way to tie a plot to an event. So, I guess it dependes on your use case and personal preference if you want to use <code>eventReactive()</code> rather than <code>observeEvent()</code>. Anyway, this version’s code can be copied from <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/04_eventReactive_instead.R">here</a>.</p>
</section>
<section id="use-reactiveval-to-manually-change-values-on-click" class="level2">
<h2 class="anchored" data-anchor-id="use-reactiveval-to-manually-change-values-on-click">Use reactiveVal() to manually change values on click</h2>
<p>Another neat function is <code>reactiveVal()</code> which helps you to construct for instance counters that increase on the click of a button. We can initialize a reactive value by writing</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">counter <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>within the server function. This way, our counter is set to zero and we can update it and set it to, say, one by calling <code>counter(value = 1)</code>. The current value of the counter can be accessed through <code>counter()</code>.</p>
<p>Clearly, we can tie the updating of a reactive value to an event that we observe through <code>observeEvent()</code>. For instance, we count how often the draw button in our small app is clicked by changing our previous <code>observeEvent(input$draw_button, ...)</code>. Here, we would change this particular line of code to</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb7-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb7-3">    tmp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">counter</span>()</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;">counter</span>(tmp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb7-5">    </span>
<span id="cb7-6">    output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb7-7">      x    <span class="ot" style="color: #003B4F;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb7-8">      bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb7-9">      <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #657422;">breaks =</span> bins, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #657422;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb7-10">    })</span>
<span id="cb7-11">  }</span>
<span id="cb7-12">)</span></code></pre></div>
</div>
<p>Finally, we can show this information on our UI for demonstration purposes by adding a <code>textOutput("demonstration_text")</code> to our UI and setting</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">output<span class="sc" style="color: #5E5E5E;">$</span>demonstration_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderText</span>(<span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb8-2">  <span class="st" style="color: #20794D;">"You have clicked the draw button"</span>,</span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">counter</span>(),</span>
<span id="cb8-4">  <span class="st" style="color: #20794D;">"times. Congrats!"</span></span>
<span id="cb8-5">))</span></code></pre></div>
</div>
<p>The complete app can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/05_add_reactiveVal.R">here</a>.</p>
</section>
<section id="use-tabsetpanel-and-unique-plot-names" class="level2">
<h2 class="anchored" data-anchor-id="use-tabsetpanel-and-unique-plot-names">Use tabsetPanel and unique plot names</h2>
<p>Often, you do not want to display all information at once. <a href="https://rappa.shinyapps.io/estimator-variance/">In my particular case</a>, I wanted to show only one out of two plots based on the user’s chosen estimator (sample mean or sample variance). A great way to achieve that is to use <code>tabsetPanel()</code> in the UI.</p>
<p>Ordinarily, you can create a UI this way by setting</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Plot"</span>, <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"plot"</span>)),</span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Summary"</span>, <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"summary"</span>)),</span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Table"</span>, <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="st" style="color: #20794D;">"table"</span>))</span>
<span id="cb9-6">  )</span>
<span id="cb9-7">)</span></code></pre></div>
</div>
<p>This was an example taken straight out of the documentation of <code>tabsetPanel()</code>. What you will get if you start an app containing a UI like this is a panel with three tabs (each one corresponding to a plot, text or table output) and the user can click on the tabs to switch between the views. This isn’t that surprising.</p>
<p>However, if we also add an <code>id</code> to this and set <code>type</code> to <code>hidden</code>, like so</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;">id =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"hidden"</span>,</span>
<span id="cb10-5">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Plot"</span>, <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"plot"</span>)),</span>
<span id="cb10-6">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Summary"</span>, <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"summary"</span>)),</span>
<span id="cb10-7">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"Table"</span>, <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="st" style="color: #20794D;">"table"</span>))</span>
<span id="cb10-8">  )</span>
<span id="cb10-9">)</span></code></pre></div>
</div>
<p>then, by default, the user does not have the options to change between views by clicking on tabs. Now, the view will need to change based on other interactions of the user with the UI. This change will then need to be customized within the server function. This is where the <code>id</code> argument comes into play because it allows ourselves to address the tabs via <code>updateTabsetPanel()</code>.</p>
<p>Here, let us take our previous example and display the same information on a different panel, i.e.&nbsp;at the end we will have two panels with exactly the same information in each tab. I know. This is not particularly exciting or meaningful but it serves our current purpose well.</p>
<p>Naively, we might implement our user-interface like so</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;">id =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>,</span>
<span id="cb11-4">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"hidden"</span>,</span>
<span id="cb11-5">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel1"</span>, {</span>
<span id="cb11-6">      <span class="co" style="color: #5E5E5E;"># UI commands from before here</span></span>
<span id="cb11-7">    }),</span>
<span id="cb11-8">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel2"</span>, {</span>
<span id="cb11-9">      <span class="co" style="color: #5E5E5E;"># UI commands from before here</span></span>
<span id="cb11-10">    }),</span>
<span id="cb11-11">  )</span>
<span id="cb11-12">)</span></code></pre></div>
</div>
<p>However, we will have to be careful! If we simply copy-and-paste our UI from before, then we won’t have unique identifiers to address e.g.&nbsp;the draw button or the plot output. Since this is a serious NO-NO (all caps for dramatic effect) and the app won’t work properly, let us instead write a function that draws the UI for us but creates it with different identifiers like this</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">create_UI <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(unique_part) {</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb12-4">      <span class="co" style="color: #5E5E5E;"># unique label here by adding unique_part to bins</span></span>
<span id="cb12-5">      <span class="fu" style="color: #4758AB;">sliderInput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"bins"</span>, unique_part, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>),</span>
<span id="cb12-6">                  <span class="st" style="color: #20794D;">"Number of bins:"</span>,</span>
<span id="cb12-7">                  <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb12-8">                  <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb12-9">                  <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb12-10">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"draw_button"</span>, unique_part, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>), <span class="st" style="color: #20794D;">"Reevaluate!"</span>, <span class="at" style="color: #657422;">width =</span> <span class="st" style="color: #20794D;">"100%"</span>),</span>
<span id="cb12-11">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"change_view"</span>, unique_part, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>), <span class="st" style="color: #20794D;">"Change view"</span>, <span class="at" style="color: #657422;">width =</span> <span class="st" style="color: #20794D;">"100%"</span>)</span>
<span id="cb12-12">    ),</span>
<span id="cb12-13">    </span>
<span id="cb12-14">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb12-15">      <span class="fu" style="color: #4758AB;">textOutput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"demonstration_text"</span>, unique_part, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)), <span class="co" style="color: #5E5E5E;"># Counter text added</span></span>
<span id="cb12-16">      <span class="fu" style="color: #4758AB;">textOutput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"countEvaluations"</span>, unique_part, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)),</span>
<span id="cb12-17">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"distPlot"</span>, unique_part, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>))</span>
<span id="cb12-18">    )</span>
<span id="cb12-19">  )</span>
<span id="cb12-20">}</span></code></pre></div>
</div>
<p>Also, notice that I have created another button called “Change view” within the UI. Further, this button’s name is so mind-baffling that I won’t even try to elaborate what it will do. Finally, using <code>create_UI</code>, we can set up the UI like so</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">tabsetPanel</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;">id =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>,</span>
<span id="cb13-4">    <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"panel1"</span>,</span>
<span id="cb13-5">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"hidden"</span>,</span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel1"</span>, <span class="fu" style="color: #4758AB;">create_UI</span>(<span class="st" style="color: #20794D;">"panel1"</span>)),</span>
<span id="cb13-7">    <span class="fu" style="color: #4758AB;">tabPanel</span>(<span class="st" style="color: #20794D;">"panel2"</span>, <span class="fu" style="color: #4758AB;">create_UI</span>(<span class="st" style="color: #20794D;">"panel2"</span>)),</span>
<span id="cb13-8">  )</span>
<span id="cb13-9">)</span></code></pre></div>
</div>
<p>and address everything within the UI in a unique manner. Of course, such a functional approach only works well if the two panels look sufficiently similar such that it makes sense to design them through a single function. In my particular app that deals with the variance of estimators, this was the case because the tabs for the sample mean and sample variance were quite similar in their structure.</p>
<p>Now that we have covered how the UI needs to be set up, let me show you how to change the view from one panel to the next. Shockingly, let us link this to a click on the “change view” button(s) like so</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb14-2">  input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel1, </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"panel2"</span>)</span>
<span id="cb14-4">)</span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb14-6">  input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel2, </span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"panel1"</span>)</span>
<span id="cb14-8">)</span></code></pre></div>
</div>
<p>Also, note that the previous code</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb15-2">  input<span class="sc" style="color: #5E5E5E;">$</span>draw_button, {</span>
<span id="cb15-3">    tmp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">counter</span>()</span>
<span id="cb15-4">    <span class="fu" style="color: #4758AB;">counter</span>(tmp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-5">    </span>
<span id="cb15-6">    output<span class="sc" style="color: #5E5E5E;">$</span>distPlot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb15-7">      x    <span class="ot" style="color: #003B4F;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb15-8">      bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(input<span class="sc" style="color: #5E5E5E;">$</span>bins) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-9">      <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #657422;">breaks =</span> bins, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #657422;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb15-10">    })</span>
<span id="cb15-11">  }</span>
<span id="cb15-12">)</span></code></pre></div>
</div>
<p>won’t work anymore because the old identifiers like <code>draw_button</code> etc. need to be updated to <code>draw_button_panel1</code> or <code>draw_button_panel2</code>. Clearly, this could potentially require some code duplication to implement the server-side logic for both tabs. But since we feel particularly clever today<sup>1</sup>, let us write another function that avoids a lot of code duplication.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">render_my_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(panel, counter, input, output) {</span>
<span id="cb16-2">  tmp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">counter</span>() <span class="co" style="color: #5E5E5E;"># save current value of counter</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">counter</span>(tmp <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># update counter</span></span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="co" style="color: #5E5E5E;"># Create identifier names</span></span>
<span id="cb16-6">  bins_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"bins"</span>, panel, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-7">  distplot_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"distPlot"</span>, panel, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-8">  demonstration_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"demonstration_text"</span>, panel, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb16-9">  </span>
<span id="cb16-10">  <span class="co" style="color: #5E5E5E;"># Render Plot</span></span>
<span id="cb16-11">  output[[distplot_name]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb16-12">    x    <span class="ot" style="color: #003B4F;">&lt;-</span> faithful[, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb16-13">    bins <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fu" style="color: #4758AB;">min</span>(x), <span class="fu" style="color: #4758AB;">max</span>(x), <span class="at" style="color: #657422;">length.out =</span> <span class="fu" style="color: #4758AB;">isolate</span>(<span class="fu" style="color: #4758AB;">pluck</span>(input, bins_name)) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-14">    <span class="fu" style="color: #4758AB;">hist</span>(x, <span class="at" style="color: #657422;">breaks =</span> bins, <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">'darkgray'</span>, <span class="at" style="color: #657422;">border =</span> <span class="st" style="color: #20794D;">'white'</span>)</span>
<span id="cb16-15">  })</span>
<span id="cb16-16">  </span>
<span id="cb16-17">  <span class="co" style="color: #5E5E5E;"># Render counter text</span></span>
<span id="cb16-18">  output[[demonstration_text]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderText</span>(<span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb16-19">    <span class="st" style="color: #20794D;">"You have clicked the draw button"</span>,</span>
<span id="cb16-20">    <span class="fu" style="color: #4758AB;">counter</span>(),</span>
<span id="cb16-21">    <span class="st" style="color: #20794D;">"times. Congrats!"</span></span>
<span id="cb16-22">  ))</span>
<span id="cb16-23">}</span></code></pre></div>
</div>
<p>Notice a few things here: - Our function needs to know the objects <code>counter</code>, <code>input</code> and <code>output</code> to work. - Also we need to switch to double-bracket notation for assigning new variables like <code>distPlot_panel1</code> to <code>output</code>. Obviously, we couldn’t use <code>$</code> for assignment anymore but single-bracket notation like <code>output[var_name]</code> is for some reason forbidden in Shiny. At least, that’s what an error message will kindly tell you when you dare to use only one bracket.</p>
<p>So, all in all our server-side logic looks like this now</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb17-2">  <span class="co" style="color: #5E5E5E;"># Counter initialization</span></span>
<span id="cb17-3">  counter <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb17-4">  counter2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactiveVal</span>(<span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb17-5">  </span>
<span id="cb17-6">  <span class="co" style="color: #5E5E5E;"># Plot Rendering</span></span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-8">    input<span class="sc" style="color: #5E5E5E;">$</span>draw_button_panel1, {</span>
<span id="cb17-9">      <span class="fu" style="color: #4758AB;">render_my_plot</span>(<span class="st" style="color: #20794D;">"panel1"</span>, counter, input, output)</span>
<span id="cb17-10">    }</span>
<span id="cb17-11">  )</span>
<span id="cb17-12">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-13">    input<span class="sc" style="color: #5E5E5E;">$</span>draw_button_panel2, {</span>
<span id="cb17-14">      <span class="fu" style="color: #4758AB;">render_my_plot</span>(<span class="st" style="color: #20794D;">"panel2"</span>, counter2, input, output)</span>
<span id="cb17-15">    }</span>
<span id="cb17-16">  )</span>
<span id="cb17-17">  </span>
<span id="cb17-18">  <span class="co" style="color: #5E5E5E;"># Panel Switching</span></span>
<span id="cb17-19">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-20">    input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel1, </span>
<span id="cb17-21">    <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"panel2"</span>)</span>
<span id="cb17-22">  )</span>
<span id="cb17-23">  <span class="fu" style="color: #4758AB;">observeEvent</span>(</span>
<span id="cb17-24">    input<span class="sc" style="color: #5E5E5E;">$</span>change_view_panel2, </span>
<span id="cb17-25">    <span class="fu" style="color: #4758AB;">updateTabsetPanel</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"my_tabs"</span>, <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"panel1"</span>)</span>
<span id="cb17-26">  )</span>
<span id="cb17-27">}</span></code></pre></div>
</div>
<p>The complete app that we have just build can be found <a href="https://albert-rapp.de/posts/06_shiny_app_learnings/DummyApp/06_tabs.R">here</a>.</p>
</section>
<section id="closing" class="level2">
<h2 class="anchored" data-anchor-id="closing">Closing</h2>
<p>Alright, I hope this helps you to build your own small Shiny app. <a href="https://rappa.shinyapps.io/estimator-variance/">In my particular case</a>, I had to use another cool function from the <code>shinyjs</code> package to update the text on the UI such that it appears in red for a second (in order for the user to notice what changes). And because I have the feeling that <code>shinyjs</code> has way more in store for us, I will end this already quite long blog post here and save that (exciting) story for another time. Hope you will be there when I talk about <code>shinyjs</code>.</p>


</section>


<div id="quarto-appendix" class="default"><section class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>And with that I really mean today. When I built my Shiny app, I actually used code duplication. But in hindsight, I feel somewhat embarrassed to leave it as it is for this blog post. Thus, I figured out how to make it work with a function.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Shiny</category>
  <guid>https://albert-rapp.de/posts/06_shiny_app_learnings/06_shiny_app_learnings.html</guid>
  <pubDate>Wed, 08 Dec 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot tips: Arranging plots</title>
  <dc:creator>Albert Rapp</dc:creator>
  <link>https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html</link>
  <description><![CDATA[ 



<div class="cell">

</div>
<p>In this week’s <a href="https://github.com/rfordatascience/tidytuesday">TidyTuesday</a>, I noticed that I am frequently not using only <code>ggplot2</code> to create plots. In fact, it has become essential to me to leverage the powers of other great additional packages that align well with <code>ggplot2</code>. Therefore, I decided to extend my <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a> by introducing a few packages I use quite often.</p>
<p>In this post, I want to cover how to arrange multiple plots. In particular, I will talk about the fantastic <a href="https://patchwork.data-imaginist.com/"><code>patchwork</code></a> package by <a href="https://www.data-imaginist.com/">Thomas Lin Pedersen</a> which helps to arrange plots quite intuitively. Further, I want to take a glance at <a href="https://ggforce.data-imaginist.com/"><code>ggforce</code></a>, another package written by the same author as <code>patchwork</code>, because it also has a neat function for arranging plots. However, <code>ggforce</code> can do way more and I will demonstrate that in another installment of this series. Also, if you like to watch and listen rather than read about how the two packages work, you can check out the corresponding video on <a href="https://youtu.be/C5Ik-WkPuGQ">YouTube</a>.</p>
<p>So, let us begin by creating a data set we want to fiddle with for plotting purposes. For simplicity, let us use the <code>penguins</code> data (without missing values) from the <code>palmerpenguins</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_light</span>())</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># All missing values can be filtered out by filtering the `sex` variable</span></span>
<span id="cb1-5">dat <span class="ot" style="color: #003B4F;">&lt;-</span> palmerpenguins<span class="sc" style="color: #5E5E5E;">::</span>penguins <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(sex))</span></code></pre></div>
</div>
<section id="arrange-plots-via-patchwork" class="level2">
<h2 class="anchored" data-anchor-id="arrange-plots-via-patchwork">Arrange Plots via patchwork</h2>
<p>Often, we want to show multiple plots that tell a story when looked at together. Using <code>patchwork</code>, we can easily compose a single plot consisting of subplots. This is done by using the simple symbols <code>+</code> resp. <code>/</code> to display plots next to resp. on top of each other.</p>
<p>For demonstration purposes, let us generate a few simple plots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">point_plot <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, flipper_length_mm, <span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>)</span>
<span id="cb2-4">point_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">point_plot2 <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(bill_length_mm, bill_depth_mm, <span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">geom_jitter</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>)</span>
<span id="cb3-4">point_plot2</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-3-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># plot_plot is obviously a fun name</span></span>
<span id="cb4-2">boxplot_plot <span class="ot" style="color: #003B4F;">&lt;-</span> dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> body_mass_g, <span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>()</span>
<span id="cb4-5">boxplot_plot</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-3-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Clearly, showing each plot separately is boring and may not tell a story convincingly. Possibly, here you may want to say that the length and depth measurements give no clear distinction between male and female penguins but the weight measurements offers a better distinguishabilty between sexes. Maybe, if we see all plots together, we can tell that story without boring the reader.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb5-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> (point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2) <span class="sc" style="color: #5E5E5E;">/</span> boxplot_plot</span>
<span id="cb5-3">p</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-4-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>See how I have used <code>+</code> to put the point plots next to each other and <code>/</code> to plot the boxplots below the two point plots. Obviously, that was super easy and neat. But this simple arrangement leads to a doubling of the legends which is somewhat bothersome. However, this is no cause for concern. <code>plot_layout()</code> is there to collect those legends for you.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-5-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Of course, this leaves you with two legends which is kind of superfluous. The easy way to get rid of this is to plot no legends for the boxplots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">boxplot_plot <span class="ot" style="color: #003B4F;">&lt;-</span> boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">guides</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb7-2">p <span class="ot" style="color: #003B4F;">&lt;-</span> (point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2) <span class="sc" style="color: #5E5E5E;">/</span> boxplot_plot</span>
<span id="cb7-3">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-6-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Now, what about legend positioning? Well, we already know how that usually works for a single plot (via <code>theme()</code> in case you forgot) and the good news is that the exact same thing works with patchwork as well. But beware to apply an additional <code>theme()</code> layer to the whole plot and not just to the last plot added to our composed plot. To make sure that happens, we have to add this layer via <code>&amp;</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>By the same logic, we can make additional changes to the whole plot e.g.&nbsp;to change the color mapping.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-8-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Next, let us control the layout a bit more and annotate the plot with <code>plot_annotation()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">(point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.7</span>, <span class="fl" style="color: #AD0000;">0.3</span>))) <span class="sc" style="color: #5E5E5E;">/</span> </span>
<span id="cb10-2">  boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>, <span class="at" style="color: #657422;">heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">plot_annotation</span>(</span>
<span id="cb10-5">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Look at that arrangement!"</span>,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Wow"</span>,</span>
<span id="cb10-7">    <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"Olà."</span>,</span>
<span id="cb10-8">    <span class="at" style="color: #657422;">tag_levels =</span> <span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb10-9">    <span class="at" style="color: #657422;">tag_prefix =</span> <span class="st" style="color: #20794D;">"("</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #657422;">tag_suffix =</span> <span class="st" style="color: #20794D;">")"</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;">&amp;</span> </span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"Penguin sex"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-13">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-14">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-9-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>We did quite a lot here, so let’s recap:</p>
<ul>
<li>We changed the widths of the plots in the first row by passing a vector of relative widths to <code>widths</code> in <code>plot_layout()</code>.</li>
<li>Same thing with <code>heights</code> in <code>plot_layout()</code> to make the boxplots larger.</li>
<li>Renamed legend label with the regular <code>labs()</code> function.</li>
<li>Added a title, subtitle, caption and tags to the <strong>whole</strong> plot with <code>plot_annotation()</code>.</li>
</ul>
<p>Also, if you want to have the tags to only label the upper and lower row, you may want to wrap the first row together by <code>wrap_elements()</code>. Think of this as creating a new single unit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">wrapped_plots <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">wrap_elements</span>(</span>
<span id="cb11-2">  point_plot <span class="sc" style="color: #5E5E5E;">+</span> point_plot2 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">widths =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.7</span>, <span class="fl" style="color: #AD0000;">0.3</span>))</span>
<span id="cb11-3">)</span>
<span id="cb11-4">(wrapped_plots) <span class="sc" style="color: #5E5E5E;">/</span> </span>
<span id="cb11-5">  boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">plot_layout</span>(<span class="at" style="color: #657422;">guides =</span> <span class="st" style="color: #20794D;">"collect"</span>, <span class="at" style="color: #657422;">heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">plot_annotation</span>(</span>
<span id="cb11-8">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Look at that arrangement!"</span>,</span>
<span id="cb11-9">    <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Wow"</span>,</span>
<span id="cb11-10">    <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"Olà."</span>,</span>
<span id="cb11-11">    <span class="at" style="color: #657422;">tag_levels =</span> <span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb11-12">    <span class="at" style="color: #657422;">tag_prefix =</span> <span class="st" style="color: #20794D;">"("</span>,</span>
<span id="cb11-13">    <span class="at" style="color: #657422;">tag_suffix =</span> <span class="st" style="color: #20794D;">")"</span></span>
<span id="cb11-14">  ) <span class="sc" style="color: #5E5E5E;">&amp;</span> </span>
<span id="cb11-15">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"top"</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;">scale_fill_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-10-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Notice how the upper row reinstated the default colors and has two legends. This demonstrates how <code>wrap_elements()</code> made the plots “independent” from the overall theming via <code>&amp;</code>, so to speak. On the bright side, there is no (C) tag anymore.</p>
<p>Unsurprisingly, <code>patchwork</code> can do much more but for starters I think the previous examples will already get you quite far. They are you “80/20 leverage points”, if you will. But in order to add one more neat feature, let me finish our intro to <code>patchwork</code> by showing you how to create plots in plots via insets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Tweak boxplots a bit for better visual fit to point_plot</span></span>
<span id="cb12-2">plt <span class="ot" style="color: #003B4F;">&lt;-</span> boxplot_plot <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"grey80"</span>))</span>
<span id="cb12-6"></span>
<span id="cb12-7">point_plot <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">coord_cartesian</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">60</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">inset_element</span>(</span>
<span id="cb12-10">    plt, </span>
<span id="cb12-11">    <span class="at" style="color: #657422;">left =</span> <span class="fl" style="color: #AD0000;">0.01</span>, </span>
<span id="cb12-12">    <span class="at" style="color: #657422;">right =</span> <span class="fl" style="color: #AD0000;">0.4</span>,</span>
<span id="cb12-13">    <span class="at" style="color: #657422;">top =</span> <span class="fl" style="color: #AD0000;">0.99</span>, </span>
<span id="cb12-14">    <span class="at" style="color: #657422;">bottom =</span> <span class="fl" style="color: #AD0000;">0.6</span></span>
<span id="cb12-15">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-11-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="create-subplots-via-ggforce" class="level2">
<h2 class="anchored" data-anchor-id="create-subplots-via-ggforce">Create Subplots via ggforce</h2>
<p>I really enjoy arranging plots with <code>patchwork</code> because, to me, the syntax feels quite intuitive (mostly). However, as you probably noticed, I had to design each subplot and arrange them by hand. Clearly, if I want to use a grid-like arrangement to display each combination of two variables from a given set of variables, this may become tedious.</p>
<p>Luckily, there is the <code>ggforce</code> package that has a neat faceting function to accomplish just that. As was already mentioned above, apart from that, the <code>ggforce</code> package offers even more cool stuff which we will look at in a future blog post.</p>
<p>With <code>facet_matrix()</code> it becomes quite easy to get a grid of subplots to display multiple combinations of two variables. For instance, take a look at this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">library</span>(ggforce)</span>
<span id="cb13-2">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .panel_x, <span class="at" style="color: #657422;">y =</span> .panel_y, <span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g)</span>
<span id="cb13-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-12-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Now, while this is not a particular beautiful plot, it gives us a quick overview of interesting variables which might be great for an exploratory analysis. Notice how we had to use <code>.panel_x</code> and <code>.panel_y</code> as placeholder for the individual variables. We could use the <code>geom_auto*()</code> functions to avoid typing that as they default to the correct values for <code>x</code> and <code>y</code>. Consequently, we could have written</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">geom_autopoint</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb14-5">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g)</span>
<span id="cb14-6">  )</span></code></pre></div>
</div>
<p>With a little bit of tweaking, we can make this plot more interesting. For example. it would be neat if we had density plots on the diagonal. No problem! Add another <code>geom_autodensity()</code> layer and make sure that <code>facet_matrix()</code> understands to map only this layer to the diagonal subplots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">geom_autopoint</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 1</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;">geom_autodensity</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"identity"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 2</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb15-6">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g),</span>
<span id="cb15-7">    <span class="at" style="color: #657422;">layer.diag =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb15-8">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>See how <code>layer.diag = 2</code> maps the diagonal elements to the second line of <code>geom_*</code> code. Similarly, we can manipulate the content of the upper and lower triangle in this grid by changing <code>layer.lower</code> or <code>layer.upper</code> in <code>facet_matrix()</code>. Let’s add another layer to see that in action.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> sex)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_autopoint</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 1</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;">geom_autodensity</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.75</span>, <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"identity"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 2</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;">geom_hex</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .panel_x, <span class="at" style="color: #657422;">y =</span> .panel_y), <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.75</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;"># Layer 3</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;">vars</span>(bill_length_mm, flipper_length_mm, bill_depth_mm, body_mass_g),</span>
<span id="cb16-8">    <span class="at" style="color: #657422;">layer.diag =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;">layer.lower =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb16-10">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-15-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Last but not least, let me mention that we can also easily create what is called an “asymmetric grid” in <code>ggforce</code> by mapping rows and columns manually. This is great for having categorical variables on one axis and numerical variables on the other axis.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(</span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .panel_x, <span class="at" style="color: #657422;">y =</span> .panel_y, <span class="at" style="color: #657422;">group =</span> .panel_x)</span>
<span id="cb17-5">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb17-7">    <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">vars</span>(sex, species), </span>
<span id="cb17-8">    <span class="at" style="color: #657422;">rows =</span> <span class="fu" style="color: #4758AB;">vars</span>(bill_depth_mm<span class="sc" style="color: #5E5E5E;">:</span>body_mass_g)</span>
<span id="cb17-9">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-16-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Beware that <code>geom_boxplot()</code> is a bit tricky as it requires the <code>group</code> argument to be explicitly set. Furthermore, if you want to add another aesthetic, e.g.&nbsp;<code>fill</code>, you will have to set <code>group</code> via <code>interaction()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(</span>
<span id="cb18-4">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb18-5">      <span class="at" style="color: #657422;">x =</span> .panel_x, </span>
<span id="cb18-6">      <span class="at" style="color: #657422;">y =</span> .panel_y, </span>
<span id="cb18-7">      <span class="at" style="color: #657422;">fill =</span> island, </span>
<span id="cb18-8">      <span class="at" style="color: #657422;">group =</span> <span class="fu" style="color: #4758AB;">interaction</span>(.panel_x, island)</span>
<span id="cb18-9">    )</span>
<span id="cb18-10">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb18-11">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(</span>
<span id="cb18-12">    <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">vars</span>(sex, species), </span>
<span id="cb18-13">    <span class="at" style="color: #657422;">rows =</span> <span class="fu" style="color: #4758AB;">vars</span>(bill_depth_mm<span class="sc" style="color: #5E5E5E;">:</span>body_mass_g)</span>
<span id="cb18-14">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="04_arranging_plots_files/figure-html/unnamed-chunk-17-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>This concludes our short summary of possibilities to arrange plots. In the next post of this <a href="https://albert-rapp.de/ggplot-series.html">ggplot2-tips series</a> we will take a closer look at <code>ggforce</code>. I hope you enjoyed today’s blog post and I look forward to “see” you at my next blog post. In the meantime, feel free to leave a comment or a click on the applause button below.</p>


</section>

 ]]></description>
  <category>Visualization</category>
  <guid>https://albert-rapp.de/posts/ggplot2-tips/04_arranging_plots/04_arranging_plots.html</guid>
  <pubDate>Wed, 27 Oct 2021 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
